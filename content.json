{"meta":{"title":"楓の葉小窝","subtitle":"","description":"","author":"John Doe","url":"http://linxuesong.github.io","root":"/"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2022-12-05T05:59:20.499Z","comments":false,"path":"about/index.html","permalink":"http://linxuesong.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"analytics","date":"2020-12-18T10:09:55.000Z","updated":"2022-12-05T05:59:20.515Z","comments":false,"path":"analytics/index.html","permalink":"http://linxuesong.github.io/analytics/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-03-09T05:50:05.000Z","updated":"2022-12-05T05:59:20.577Z","comments":true,"path":"categories/index.html","permalink":"http://linxuesong.github.io/categories/index.html","excerpt":"","text":""},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2022-12-05T05:59:20.561Z","comments":false,"path":"bangumi/index.html","permalink":"http://linxuesong.github.io/bangumi/index.html","excerpt":"","text":""},{"title":"bangumi-bilibili","date":"2021-11-10T04:57:26.000Z","updated":"2022-12-05T05:59:20.546Z","comments":true,"path":"bangumi-bilibili/index.html","permalink":"http://linxuesong.github.io/bangumi-bilibili/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2022-12-05T05:59:20.593Z","comments":false,"path":"client/index.html","permalink":"http://linxuesong.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载："},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2022-12-05T05:59:20.608Z","comments":true,"path":"comment/index.html","permalink":"http://linxuesong.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2022-12-05T05:59:20.640Z","comments":false,"path":"donate/index.html","permalink":"http://linxuesong.github.io/donate/index.html","excerpt":"","text":""},{"title":"gallery","date":"2021-01-25T11:40:18.000Z","updated":"2022-12-05T05:59:21.046Z","comments":false,"path":"gallery/index.html","permalink":"http://linxuesong.github.io/gallery/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2022-12-05T05:59:21.077Z","comments":false,"path":"lab/index.html","permalink":"http://linxuesong.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala"},{"title":"dinoswords","date":"2020-12-17T06:10:15.000Z","updated":"2022-12-05T05:59:20.624Z","comments":false,"path":"dinoswords/index.html","permalink":"http://linxuesong.github.io/dinoswords/index.html","excerpt":"","text":"操作介绍： 开始游戏：首先点击屏幕 跳跃：注意是“点击屏幕” ！ 道具：跳跃后捡到的道具，使用下方对应26字母键盘键 支持手机，电脑，等设备玩耍，点击屏幕开始和跳跃。 操作介绍： 开始游戏：首先点击屏幕 跳跃：注意是“点击屏幕” ！ 道具：跳跃后捡到的道具，使用下方对应26字母键盘键 支持手机，电脑，等设备玩耍，点击屏幕开始和跳跃。"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2022-12-05T05:59:21.093Z","comments":true,"path":"links/index.html","permalink":"http://linxuesong.github.io/links/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2022-12-05T05:59:21.140Z","comments":true,"path":"rss/index.html","permalink":"http://linxuesong.github.io/rss/index.html","excerpt":"","text":""},{"title":"shuoshuo","date":"2021-01-25T11:40:18.000Z","updated":"2022-12-05T05:59:21.155Z","comments":false,"path":"shuoshuo/index.html","permalink":"http://linxuesong.github.io/shuoshuo/index.html","excerpt":"","text":""},{"title":"sitelog","date":"2020-12-22T02:41:25.000Z","updated":"2022-12-05T05:59:21.171Z","comments":false,"path":"sitelog/index.html","permalink":"http://linxuesong.github.io/sitelog/index.html","excerpt":"","text":""},{"title":"sourceshare","date":"2019-02-10T13:32:48.000Z","updated":"2022-12-05T05:59:21.187Z","comments":false,"path":"sourceshare/index.html","permalink":"http://linxuesong.github.io/sourceshare/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2022-12-05T05:59:21.108Z","comments":false,"path":"music/index.html","permalink":"http://linxuesong.github.io/music/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2022-12-05T05:59:21.218Z","comments":false,"path":"theme-sakura/index.html","permalink":"http://linxuesong.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2022-12-05T05:59:21.202Z","comments":true,"path":"tags/index.html","permalink":"http://linxuesong.github.io/tags/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2022-12-05T05:59:21.265Z","comments":false,"path":"video/index.html","permalink":"http://linxuesong.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }"},{"title":"test","date":"2020-10-02T15:00:17.000Z","updated":"2022-12-05T05:59:21.061Z","comments":true,"path":"gallery/test/index.html","permalink":"http://linxuesong.github.io/gallery/test/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2021-11-12T14:20:40.000Z","updated":"2022-12-05T05:59:27.666Z","comments":true,"path":"2021/11/12/hello-world/","link":"","permalink":"http://linxuesong.github.io/2021/11/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"hexo-butterfly-tag-plugins-plus插件样式测试文章","slug":"hexo-butterfly-tag-plugins-plus插件样式测试文章","date":"2021-11-11T11:38:04.000Z","updated":"2022-12-05T05:59:19.916Z","comments":true,"path":"2021/11/11/hexo-butterfly-tag-plugins-plus插件样式测试文章/","link":"","permalink":"http://linxuesong.github.io/2021/11/11/hexo-butterfly-tag-plugins-plus%E6%8F%92%E4%BB%B6%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","excerpt":"","text":"参考文章https://akilar.top/posts/615e2dec/ 行内文本text文本内容 文本内容 文本内容 文本内容 文本内容 文本内容 行内文本span 彩色文字在一段话中方便插入各种颜色的标签，包括：红色、黄色、绿色、青色、蓝色、灰色。 超大号文字文档「开始」页面中的标题部分就是超大号文字。Volantis A Wonderful Theme for Hexo 段落文本p 彩色文字在一段话中方便插入各种颜色的标签，包括：红色、黄色、绿色、青色、蓝色、灰色。 超大号文字文档「开始」页面中的标题部分就是超大号文字。Volantis A Wonderful Theme for Hexo 提示块动态标签 warning ban 复选列表 纯文本测试 支持简单的 markdown 语法 支持自定义颜色 绿色 + 默认选中 黄色 + 默认选中 青色 + 默认选中 蓝色 + 默认选中 增加 减少 叉 链接卡片糖果屋教程贴https://akilar.top/posts/615e2dec/","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"gson的常规使用","slug":"gson的常规使用","date":"2021-09-02T16:17:28.000Z","updated":"2022-12-05T05:59:19.885Z","comments":true,"path":"2021/09/03/gson的常规使用/","link":"","permalink":"http://linxuesong.github.io/2021/09/03/gson%E7%9A%84%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"golang 字符串常见处理","slug":"golang-字符串常见处理","date":"2021-07-23T03:20:04.000Z","updated":"2022-12-05T05:59:19.853Z","comments":true,"path":"2021/07/23/golang-字符串常见处理/","link":"","permalink":"http://linxuesong.github.io/2021/07/23/golang-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E5%A4%84%E7%90%86/","excerpt":"","text":"一、截取子串","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://linxuesong.github.io/tags/golang/"}],"author":"linxuesong"},{"title":"文章样式测试","slug":"文章样式测试","date":"2021-07-12T07:02:36.000Z","updated":"2022-12-05T05:59:20.421Z","comments":true,"path":"2021/07/12/文章样式测试/","link":"","permalink":"http://linxuesong.github.io/2021/07/12/%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/","excerpt":"","text":".output_wrapper/*此属性为全局*/ { font-size: 16px; color: #3e3e3e; line-height: 1.6; word-spacing:0px; letter-spacing:0px; font-family: \"Helvetica Neue\",Helvetica,\"Hiragino Sans GB\",\"Microsoft YaHei\",Arial,sans-serif; } .output_wrapper * { font-size: inherit ; color: inherit; line-height: inherit; margin:0px; padding:0px; } p {/*段落*/ margin: 1.5em 0px; } h1,h2,h3,h4,h5,h6 { margin: 1.5em 0px; font-weight:bold; } h1 { font-size: 1.6em ; } h2 { font-size: 1.4em; } h3 { font-size: 1.3em; } h4 { font-size: 1.2em; } h5 { font-size: 1em; } h6 { font-size: 1em; } h1{/*增加对h3标题的修改*/ border-bottom:2px solid #EC4444; } h1 span{/*增加对h1标题字体的修改*/ display:inline-block; font-weight:normal; background: #EC4444; color:#ffffff; padding:3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right:3px; } h1:after{/*增加对h3标题后面的修饰*/ display: inline-block; content:\" \"; vertical-align: bottom; border-bottom: 36px solid #EFEBE9; border-right: 20px solid transparent; } ul, ol { padding-left: 32px; } ul{ /*无序列表*/ list-style-type: disc; } ol { /*有序列表*/ list-style-type: decimal; } li * { /* color: #3e3e3e;*/ } li{ /*在公众号下，改变不了li符号的属性（如颜色），并会影响其子元素的属性;而在其它博客平台中，则能正常使用*/ margin-bottom: 0.5em; /* color:#159957; */ } .code_size_default /*代码块默认size*/ { line-height: 18px; font-size: 14px; font-weight:normal; word-spacing:0px; letter-spacing:0px; } .code_size_tight /*代码块紧凑size*/ { line-height: 15px; font-size: 11px; font-weight:normal; word-spacing:-3px; letter-spacing:0px; } pre code /*代码块*/ { font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; } blockquote { /*引用块*/ display: block; padding: 15px 1rem; font-size: 0.9em; padding-right: 15px; margin: 1em 0; color: #819198; border-left: 6px solid #dce6f0; background: #f2f7fb; overflow: auto; overflow-scrolling: touch; word-wrap: normal; word-break: normal; } blockquote p { margin: 0px; } a { /*超链接*/ text-decoration: none; color: #1e6bb8; word-wrap:break-word; } strong /*强调*/ { font-weight: bold; } em /*斜体*/ { font-style:italic; } del /*删除线*/ { font-style:italic; } strong em/*强调的斜体*/ { font-weight: bold; } hr { /*分隔线*/ height: 1px; margin: 1.5rem 0px; border: none; border-top: 1px dashed #A5A5A5; } code /*行内代码*/ { word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin:0 2px; color:#e96900; background:#f8f8f8; } img { display: block; margin:0 auto; /*图片水平居中*/ /* margin:0 0; */ /*图片水平居左，如需要请打开*/ max-width:100%; } figcaption/*图片描述文字*/ { margin-top:10px; text-align:center; /* text-align:left; */ /*当图片水平居左时，请打开*/ color:#999; font-size: 0.7em; } /*================表格开始================*/ table { display:table; width: 100% ; text-align: left; } tbody { border: 0; } table tr { border: 0; border-top: 1px solid #CCC; background-color: white; } /*隔行改变行的背景色，如需要请打开*/ /* table tr:nth-child(2n) { background-color: #F8F8F8; } */ table tr th, table tr td { font-size: 1em; border: 1px solid #CCC; padding: 0.5em 1em; text-align: left; } /*表头的属性*/ table tr th { font-weight: bold; background-color: #F0F0F0; } /*================表格结束================*/ /*================数学公式开始================*/ .katex-display {/*块公式*/ font-size:1.22em; } .katex {/*行内公式*/ padding:8px 3px; } .katex-display > .katex {/*块公式*/ display:inline-block; text-align:center; padding:3px; } .katex img {/*行内公式对应的图片*/ display:inline-block; vertical-align:middle; } /*================数学公式结束================*/ a[href^=\"#\"] sup {/*注脚*/ vertical-align:super; margin:0 2px; padding:1px 3px; color: #ffffff; background:#666666; font-size:0.7em; } /*================任务列表开始================*/ .task-list-list { list-style-type: none; } .task-list-list.checked {/*已完成*/ color: #3e3e3e; } .task-list-list.uncheck {/*未完成*/ color: #bfc1bf; } .task-list-list .icon_uncheck, .task-list-list .icon_check { display: inline-block; vertical-align: middle; margin-right: 10px; } .task-list-list .icon_check:before {/*已完成*/ content: \"√\"; border: 2px solid #3e3e3e; color:red; } .task-list-list .icon_uncheck:before {/*未完成*/ content: \"x\"; border: 2px solid #bfc1bf; color: #bfc1bf; } .task-list-list .icon_check:before, .task-list-list .icon_uncheck:before {/*标志框*/ padding:2px; padding-left: 5px; padding-right: 8px; border-radius:5px; } /*================任务列表结束================*/ .toc {/*总目录*/ margin-left:25px; } .toc_item {/*每条目录*/ display:block; } .toc_left {/*每级目录的缩进*/ margin-left:25px; } [toc] 基本快捷键1、通用操作Command是Mac里最重要的修饰键，在大多数情况下相当于Windows下的Ctrl。所以以下最基本操作很好理解： Command-Z 撤销 Command-X 剪切 Command-C 拷贝（Copy） Command-V 粘贴 Command-A 全选（All） Command-S 保存（Save) Command-F 查找（Find） 2.截图Command-Shift-4 截取所选屏幕区域到一个文件 Command-Shift-3 截取全部屏幕到文件 Command-Shift-Control-3 截取全部屏幕到剪贴板 Command-Shift-4 截取所选屏幕区域到一个文件，或追加按空格键仅捕捉一个窗口 Command-Shift-Control-4 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗 3、在应用程序中：Command-Option-esc 打开强制退出窗口 Command-H 隐藏（Hide）当前正在运行的应用程序窗口 Command-Option-H 隐藏（Hide）其他应用程序窗口 Command-Q 退出（Quit）最前面的应用程序 Command-Shift-Z 重做，也就是撤销的逆向操作 Command-Tab 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于Windows中（Alt+Tab） Command-Option-esc 打开“强制退出”窗口，如果有应用程序无响应，可在窗口列表中选择强制退出 4、文本处理：Command-右箭头 将光标移至当前行的行尾 Command-B 切换所选文字粗体（Bold）显示 fn-Delete 相当于PC全尺寸键盘上的Delete，也就是向后删除 fn-上箭头 向上滚动一页（Page Up） fn-下箭头 向下滚动一页（Page Down） fn-左箭头 滚动至文稿开头（Home） fn-右箭头 滚动至文稿末尾（End） Command-右箭头 将光标移至当前行的行尾 Command-左箭头 将光标移至当前行的行首 Command-下箭头 将光标移至文稿末尾 Command-上箭头 将光标移至文稿开头 Option-右箭头 将光标移至下一个单词的末尾 Option-左箭头 将光标移至上一个单词的开头 Control-A 移至行或段落的开头 5、在Finder中：Command-Option-V 剪切文件 Command-Shift-N 新建文件夹（New） Command-Shift-G 调出窗口，可输入绝对路径直达文件夹（Go） return 这个其实不算快捷键，点击文件，按下可重命名文件 Command-O 打开所选项。在Mac里打开文件不像Windows里直接按Enter Command-Option-V 作用相当于Windows里的文件剪切。在其它位置上对文件复制（Command-C），在目的位置按下这个快捷键，文件将被剪切到此位置 Command-上箭头 打开包含当前文件夹的文件夹，相当于Windows里的“向上” Command-Delete 将文件移至废纸篓 Command-Shift-Delete 清倒废纸篓 空格键 快速查看选中的文件，也就是预览功能 6、在浏览器中：Control-Tab 转向下一个标签页 Command-L 光标直接跳至地址栏 Control-Tab 转向下一个标签页 Control-Shift-Tab 转向上一个标签页 Command-加号或等号 放大页面 Command-减号 缩小页面 7.Mac启动与关机时的快捷键：Command-Option-P-R 重置NVRAM Option 开机后立即按下，将显示启动管理器，如果Mac装有双系统或者插有启动U盘，可在启动管理器中选择启动盘 Command-R 开机后立即按下，可打开OS X的恢复功能（Recovery） Command-Option-P-R 开机后立即按下，重置NVRAM。有些时候电脑会出现些小问题，重置NVRAM是你除了重新启动，尝试修复的第一选择。 Command-Option-Control-电源按钮 退出所有应用程序，允许你进行文稿储存，然后关机 按住电源按钮5秒 强制Mac关机","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"hexo博客推广计划，如何让更多人知道","slug":"hexo博客推广计划，如何让更多人知道","date":"2021-07-06T13:08:12.000Z","updated":"2022-12-05T05:59:19.931Z","comments":true,"path":"2021/07/06/hexo博客推广计划，如何让更多人知道/","link":"","permalink":"http://linxuesong.github.io/2021/07/06/hexo%E5%8D%9A%E5%AE%A2%E6%8E%A8%E5%B9%BF%E8%AE%A1%E5%88%92%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E6%9B%B4%E5%A4%9A%E4%BA%BA%E7%9F%A5%E9%81%93/","excerpt":"","text":"搜索如何将自己的站点加入到百度、谷歌等搜索引擎，让更多的人发现你","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://linxuesong.github.io/tags/hexo/"}],"author":"linxuesong"},{"title":"Go性能分析工具","slug":"Go性能分析工具","date":"2021-06-17T12:42:37.000Z","updated":"2022-12-05T05:59:19.322Z","comments":true,"path":"2021/06/17/Go性能分析工具/","link":"","permalink":"http://linxuesong.github.io/2021/06/17/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/","excerpt":"","text":"一、GODEBUG参数特别方便，无需下载第三方工具，无需修改程序 代码 分析协程调度情况 https://segmentfault.com/a/1190000020108079 二、Trace特点无需下载第三方工具，需要修改程序代码 https://segmentfault.com/a/1190000019736288 如何用修改代码,加入trace import ( &quot;os&quot; &quot;runtime/trace&quot; ) func main() &#123; trace.Start(os.Stderr) defer trace.Stop() //一定要这一行执行后才会有trace文件 ch := make(chan string) go func() &#123; ch &lt;- &quot;EDDYCJY&quot; &#125;() &lt;-ch &#125; 生成跟踪文件： $ go run main.go 2> trace.out // 运行生成追踪文件 分析追踪文件 $ go tool trace trace.out // 会启动浏览器，展示网页版分析报告 分析结果说明 栗子分析结果 实例1: 如何分析程序耗时时间长—-Scheduler latency profile-调度延迟概况多协程生成随机数据，随机数据做参数访问 var wg sync.WaitGroup // main等待所有goroutine结束 func CallGetUserInfoDbatchGoVersion() &#123; rand.Seed(time.Now().UnixNano()) // 使用rand生成随机种子，**之后性能分析我们会发现这个地方有问题** uidcnt := rand.Intn(50) // 使用随机种子生成50以内随机数 **之后性能分析我们会发现这个地方有问题** SCFCALL(uidcnt) // 使用生成的随机数做参数远程调用，具体处理逻辑忽略 &#125; func main() &#123; for j:=0;j&lt;100;j++ &#123; wg.Add(1) go CallGetUserInfoDbatchGoVersion() // 开启多goroutine &#125; wg.Wait() log.Println(&quot;执行完毕&quot;) &#125; 对上面代码加上trace的分析 import &quot;runtime/trace&quot; var wg sync.WaitGroup // main等待所有goroutine结束 func CallGetUserInfoDbatchGoVersion() &#123; rand.Seed(time.Now().UnixNano()) // 使用rand生成随机种子，**之后性能分析我们会发现这个地方有问题** uidcnt := rand.Intn(50) // 使用随机种子生成50以内随机数 SCFCALL(uidcnt) // 使用生成的随机数做参数远程调用，具体处理逻辑忽略 &#125; func main() &#123; trace.Start(f) defer trace.Stop() // 注意一定要执行了trace.Stop之后才会生成分析报告 for j:=0;j&lt;100;j++ &#123; wg.Add(1) go CallGetUserInfoDbatchGoVersion() // 开启多goroutine &#125; wg.Wait() log.Println(&quot;执行完毕&quot;) &#125; 结果报告中“Scheduler latency profile-调度延迟概况”如下 可以看到锁耗时占用到了77%，看调用来自Seed(*Rand),定位到耗时函数的位置后，分析这个函数 func Seed(seed int64) &#123; globalRand.Seed(seed) &#125; // 使用了全局对象globalRand，这个对象是lockedSource，每次使用前会加锁，导致每个go routin竞争锁 func Intn(n int) int &#123; return globalRand.Intn(n) &#125; // 使用全局对象，多routine会有所得竞争 解决方案:正对每个go routine生成单独的Rand对象rngSource func CallGetUserInfoDbatchGoVersion() &#123; r := rand.New(rand.NewSource(time.Now().UnixNano())) // 全局对象替换成创建本地对象 uidcnt := r.Intn(50) // 使用随机种子生成50以内随机数 // 全局对象替换成本地对象 SCFCALL(uidcnt) // 使用生成的随机数做参数远程调用，具体处理逻辑忽略 &#125; 修改后的性能分析截图—整体耗时缩短，而且不会在随机数这里有长耗时： 三、PProf需要下载第三方工具，需要修改程序代码 https://segmentfault.com/a/1190000016412013 使用举例 分析结果","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"http://linxuesong.github.io/tags/Golang/"}],"author":"linxuesong"},{"title":"主题优化增加网页百度统计功能","slug":"主题优化增加网页百度统计功能","date":"2021-06-04T11:56:09.000Z","updated":"2022-12-05T05:59:20.108Z","comments":true,"path":"2021/06/04/主题优化增加网页百度统计功能/","link":"","permalink":"http://linxuesong.github.io/2021/06/04/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E5%A2%9E%E5%8A%A0%E7%BD%91%E9%A1%B5%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/","excerpt":"","text":"1.开通百度统计账号 2.获取跟踪代码 3.将跟踪代码放到head末尾位置本主题的head路径为themes/Sakura/layout/_partial/head.ejs TODO: 继续优化将其变成一个站点配置功能，使用指定的百度提供代码中的key作为区分不同的统计 # Baidu Analytics ID baidu_analytics: 上面步骤中记录的百度统计里用户的key值。 4.效果截图 参考代码http://www.jcsama.com/2016/01/25/hexo-baido-analytics/","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"protobuf学习整理","slug":"protobuf学习整理","date":"2021-06-03T11:53:54.000Z","updated":"2022-12-05T05:59:20.062Z","comments":true,"path":"2021/06/03/protobuf学习整理/","link":"","permalink":"http://linxuesong.github.io/2021/06/03/protobuf%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/","excerpt":"","text":"一、ProtoBuf简介语言平台无关的、灵活、高效、自动化的序列化机制 类似协议：XML、JSON 区别点：XML、JSON关注人类可读性，通常用于双方交互的协议；ProtoBuf更关注压缩效率、传输速度，人类可读性差(指序列化之后的文件) 二、如何用？2.1golang语言2.1.0环境准备需要如下两个工具 1.protoc:可以执行不同语言的api，生成不同语言版本的结构体文件 2.protoc-gen-go:go版本的生成程序可以生成go语言的结构体 以上工具不同版本生成的文件是不一样的，所以安需要下载指定版本 安装最新版本 1.安装最新的protoc-gen-go, 在gopath路径下执行如下命令 go get github.com/golang/protobuf/protoc-gen-go // protoc-gen-go会安到$gopath/bin下,如果自己下载编译，也要放到这个路径下 2.安装最新的protobuf https://github.com/protocolbuffers/protobuf/releases //下载后解压，可以做其他的部分 安装之前的版本 1.安装之前版本的protoc-gen-go, 在gopath路径下执行如下命令 GIT_TAG=&quot;v1.2.0&quot; go get -d -u github.com/golang/protobuf/protoc-gen-go git -C &quot;$(go env GOPATH)&quot;/src/github.com/golang/protobuf checkout $GIT_TAG go install github.com/golang/protobuf/protoc-gen-go 2.安装之前版本的protobuf https://github.com/protocolbuffers/protobuf/releases 2.2.1准备原协议.proto文件message xxx &#123; // 字段规则：required -&gt; 字段只能也必须出现 1 次 // 字段规则：optional -&gt; 字段可出现 0 次或1次 // 字段规则：repeated -&gt; 字段可出现任意多次（包括 0） // 类型：int32、int64、sint32、sint64、string、32-bit .... // 字段编号：0 ~ 536870911（除去 19000 到 19999 之间的数字） 字段规则 类型 名称 = 字段编号; &#125; // 例1: 在 xxx.proto 文件中定义 Example1 message // 包含五个字段，依次为string,bytes,EmbeddedMessage自定义结构体,repeatedInt32Val,repeatedStringVal syntax = \"proto3\"; // protobuf版本 package user; // 声明protobuf文件所在包，方便被其他protobuf文件导入结构体，一般放到proto/自定义包名路径下 option go_package = \"github.com/xvrzhao/pb-demo/proto/user\"; // 声明生成的go文件所属的包 import \"proto/user/message.proto\"; // 导入同包内的其他 proto 文件 import \"proto/article/message.proto\"; // 导入其他包的 proto 文件 message Example1 &#123; optional string stringVal = 1; optional bytes bytesVal = 2; message EmbeddedMessage &#123; int32 int32Val = 1; string stringVal = 2; &#125; optional EmbeddedMessage embeddedExample1 = 3; repeated int32 repeatedInt32Val = 4; repeated string repeatedStringVal = 5; &#125; 2.2.3生成proto.go文件protoc --go_out=&#123;输出位置&#125; &#123;.proto文件路径&#125; // 例如 protobuf包解压路径/src/protoc --go_out=. msg.proto //protoc如果没有加入到/usr/local/bin 2.2 JAVA语言2.2.3编译命令 -I 后面是 proto 文件所在目录 —java_out 后面是 java 文件存放地址 最后一行是 proto 文件名称 protoc -I=src/main/resource/proto --java_out=src/main/java gps_data.proto public class Main &#123; public static void main(String[] args) &#123; System.out.println(&quot;===== 构建一个GPS模型开始 =====&quot;); GpsDataProto.gps_data.Builder gps_builder = GpsDataProto.gps_data.newBuilder(); gps_builder.setAltitude(1); gps_builder.setDataTime(&quot;2017-12-17 16:21:44&quot;); gps_builder.setGpsStatus(1); gps_builder.setLat(39.123); gps_builder.setLon(120.112); gps_builder.setDirection(30.2F); gps_builder.setId(100L); GpsDataProto.gps_data gps_data = gps_builder.build(); System.out.println(gps_data.toString()); System.out.println(&quot;===== 构建GPS模型结束 =====&quot;); System.out.println(&quot;===== gps Byte 开始=====&quot;); for (byte b : gps_data.toByteArray()) &#123; System.out.print(b); &#125; System.out.println(&quot;\\n&quot; + &quot;bytes长度&quot; + gps_data.toByteString().size()); System.out.println(&quot;===== gps Byte 结束 =====&quot;); System.out.println(&quot;===== 使用gps 反序列化生成对象开始 =====&quot;); GpsDataProto.gps_data gd = null; try &#123; gd = GpsDataProto.gps_data.parseFrom(gps_data.toByteArray()); &#125; catch (InvalidProtocolBufferException e) &#123; e.printStackTrace(); &#125; System.out.print(gd.toString()); System.out.println(&quot;===== 使用gps 反序列化生成对象结束 =====&quot;); &#125; &#125; 2.2.4常见问题&lt;dependency&gt; &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt; &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;/dependency&gt; Send Encrypt Format:https://im.58.com/msg/sendmsg?params=KpGqIsMkjMQ-hlsc9cr2AwXdcBcQVFgKzupEoQ9nubVvlaSyJ7hQLMsdh2CTBRoNCN2KAjsd9TY04YrxQr246CdFY3ynkdh15qSM9Msyu1o_9NmhvStJo8Ib9MGIsvpSMVTnut9W1M_D5gRidqBhMSRRWQPS_9OXZr0GUPYL6H8OU7EBnqW0vc6YOoVQAVOtrSJE0sP4gaXrHtWD09QvUnr8xcyO5blJQz5NCgRcTSEtCQl9geBnKSc5XTqSDDwyBQ5eXwOtq-ge_H-ZlGyuUgo_u-jcRIy63d7-OaZgoPrFBYztNEsZyYAE7yNn5jdOJu2T7Oazz92i5YB5x4e_O7pZv4Erm-tsoQaN10t59g4jSZr2WciigoaHnng0woIlGKHSJtleql-EKfKaW3nIePaPQWuA6H0iDFHMA_HB7IuMN_HkZ1g3o1BovuU-YvvTJwi_cVpOM6VauqAGIBtf5VEXKevq2vjfeeU7I_e1-HwZcULA2TmlC-nYNmVvchFvevOGL9bUEqHydbaEkTfVAw9hPFLQTBiTJeyjrz0r-M_TkbZlPkNeZkbhnQAktHaYN5gtMQYzRXSI7JNWNJwsjFKLHuUa9Ut0YBPFjYlpjcmd2_AiIcWGhs6JaHZMP6K2zzgI2qcxxw9Z1YMwYjmezaoLOsB6Yf5jg4UIrKHLzy70pdu-_CVi5tjKoPrVrGDnOOoTKJhpi3Ny-NztIPlwPYjJtZtZU8Y9HPHHqoRdvmk3eAKTLOLyk1u65p-4YkNCl2QksptlYVCAvrtbS94l35gRQ-lEMs4fUGgIP-jir4QjLBD101IRVg96X7e6XszNCkX_RpONx_Uh51ZaxlJ5iNG8_TCZLyuCD7EgQyPcFTmaubHmsm0HmzespMIsmkUOrEvvMbh-2wqCdV5EAJP-NjKY_HQ16DiC0u4xkV111eaAwc1HkrBlrAy7XECAa5lM1ln3fDj25gThpGpthQKVKjs39dQqC5Yc93m6tYpsZTg%3D&amp;version=a1.0","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"protobuf","slug":"protobuf","permalink":"http://linxuesong.github.io/tags/protobuf/"},{"name":"go","slug":"go","permalink":"http://linxuesong.github.io/tags/go/"}],"author":"linxuesong"},{"title":"mac快捷键整理","slug":"mac快捷键整理","date":"2021-05-25T06:14:02.000Z","updated":"2022-12-05T05:59:19.963Z","comments":true,"path":"2021/05/25/mac快捷键整理/","link":"","permalink":"http://linxuesong.github.io/2021/05/25/mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/","excerpt":"","text":"基本快捷键1、通用操作Command是Mac里最重要的修饰键，在大多数情况下相当于Windows下的Ctrl。所以以下最基本操作很好理解： Command-Z 撤销 Command-X 剪切 Command-C 拷贝（Copy） Command-V 粘贴 Command-A 全选（All） Command-S 保存（Save) Command-F 查找（Find） 2.截图Command-Shift-4 截取所选屏幕区域到一个文件 Command-Shift-3 截取全部屏幕到文件 Command-Shift-Control-3 截取全部屏幕到剪贴板 Command-Shift-4 截取所选屏幕区域到一个文件，或追加按空格键仅捕捉一个窗口 Command-Shift-Control-4 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗 3、在应用程序中：Command-Option-esc 打开强制退出窗口 Command-H 隐藏（Hide）当前正在运行的应用程序窗口 Command-Option-H 隐藏（Hide）其他应用程序窗口 Command-Q 退出（Quit）最前面的应用程序 Command-Shift-Z 重做，也就是撤销的逆向操作 Command-Tab 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于Windows中（Alt+Tab） Command-Option-esc 打开“强制退出”窗口，如果有应用程序无响应，可在窗口列表中选择强制退出 4、文本处理：Command-右箭头 将光标移至当前行的行尾 Command-B 切换所选文字粗体（Bold）显示 fn-Delete 相当于PC全尺寸键盘上的Delete，也就是向后删除 fn-上箭头 向上滚动一页（Page Up） fn-下箭头 向下滚动一页（Page Down） fn-左箭头 滚动至文稿开头（Home） fn-右箭头 滚动至文稿末尾（End） Command-右箭头 将光标移至当前行的行尾 Command-左箭头 将光标移至当前行的行首 Command-下箭头 将光标移至文稿末尾 Command-上箭头 将光标移至文稿开头 Option-右箭头 将光标移至下一个单词的末尾 Option-左箭头 将光标移至上一个单词的开头 Control-A 移至行或段落的开头 5、在Finder中：Command-Option-V 剪切文件 Command-Shift-N 新建文件夹（New） Command-Shift-G 调出窗口，可输入绝对路径直达文件夹（Go） return 这个其实不算快捷键，点击文件，按下可重命名文件 Command-O 打开所选项。在Mac里打开文件不像Windows里直接按Enter Command-Option-V 作用相当于Windows里的文件剪切。在其它位置上对文件复制（Command-C），在目的位置按下这个快捷键，文件将被剪切到此位置 Command-上箭头 打开包含当前文件夹的文件夹，相当于Windows里的“向上” Command-Delete 将文件移至废纸篓 Command-Shift-Delete 清倒废纸篓 空格键 快速查看选中的文件，也就是预览功能 6、在浏览器中：Control-Tab 转向下一个标签页 Command-L 光标直接跳至地址栏 Control-Tab 转向下一个标签页 Control-Shift-Tab 转向上一个标签页 Command-加号或等号 放大页面 Command-减号 缩小页面 7.Mac启动与关机时的快捷键：Command-Option-P-R 重置NVRAM Option 开机后立即按下，将显示启动管理器，如果Mac装有双系统或者插有启动U盘，可在启动管理器中选择启动盘 Command-R 开机后立即按下，可打开OS X的恢复功能（Recovery） Command-Option-P-R 开机后立即按下，重置NVRAM。有些时候电脑会出现些小问题，重置NVRAM是你除了重新启动，尝试修复的第一选择。 Command-Option-Control-电源按钮 退出所有应用程序，允许你进行文稿储存，然后关机 按住电源按钮5秒 强制Mac关机","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"资料整理","slug":"资料整理","permalink":"http://linxuesong.github.io/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"}],"author":"linxuesong"},{"title":"MarkDown快速查询转移字符","slug":"MarkDown快速查询转移字符","date":"2021-05-25T06:13:33.000Z","updated":"2022-12-05T05:59:19.775Z","comments":true,"path":"2021/05/25/MarkDown快速查询转移字符/","link":"","permalink":"http://linxuesong.github.io/2021/05/25/MarkDown%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2%E8%BD%AC%E7%A7%BB%E5%AD%97%E7%AC%A6/","excerpt":"","text":"MarkDown快速查询转移字符公式块部分举例 $$ dp[i]= \\begin&#123;cases&#125; 计算式1 &amp;计算式条件 \\\\换行 计算式2 &amp;计算式条件 \\\\换行 \\end&#123;cases&#125; $$ 详细表格 公式块 \\begin{cases} 内容 \\end{cases} 大公式表达式 \\big [ //比较大的左中括号 \\bigg[ //再大一点 \\Big[ //比big大一点 \\Bigg[ //比bigg大一点 a_2 a下标2 a^3 a上标3 上标下标 \\sum ：∑ \\int ：∫ \\oint ：∮ \\prod：∏ 求和、求导 \\alpha： α \\beta： β \\gamma：γ \\Phi ： Φ \\Omega：Ω \\Delta： Δ \\delta： δ 希腊字母 代码块部分文本部分 MarkDown文本转移 输入文本 显示内容 &amp;nbsp; 或者 键盘全角模式空格键 空格 &lt;sup&gt;xxx&lt;/sup&gt; 上标 &lt;sub&gt;xxx&lt;/sub&gt; 下标 30&amp;deg; 角度符号30&deg; 表格部分如果markdown语法对应的表格在hexo上无法显示可以直接插入html代码 MarkDown文本转移 标题1 标题2 行1列1 行1列2 行2列1 行2列2 、 1.如何表格中要加入需要转移的内容可以访问https://www.sojson.com/rehtml 2.style=”text-align:center;” 在tb、th标签中加入样式控制对齐方式","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"资料整理","slug":"资料整理","permalink":"http://linxuesong.github.io/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"}],"author":"linxuesong"},{"title":"Linux常用命令整理","slug":"Linux常用命令整理","date":"2021-05-25T06:12:56.000Z","updated":"2022-12-05T05:59:19.760Z","comments":true,"path":"2021/05/25/Linux常用命令整理/","link":"","permalink":"http://linxuesong.github.io/2021/05/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/","excerpt":"","text":"Linux常用命令整理一、文件操作移动:mv 复制:cp 删除:rm 创建文件夹:mkdir -p参数是即使父目录不存在，递归创建出来文件夹 查找: find 路径 -name 文件名 二、进程管理1.ps命令ps - aux|(grep 命令名) 显示所有进程信息，连同命令行 显示结果说明: 主要参数: USER 用户账号 PID 当前进程ID CPU 进程占用CPU MEM 进程占用内存 VSZ 虚拟内存量Kbytes RSS 物理内存量KBytes TTY 于哪一终端运作,如果与终端机无关显示? STAT 进程状态R运行、S睡眠、T停止、Z僵尸 START 启动时间 TIME 实际占用CPU运行时间 COMMAND 该程序的实际命令 三、文件内容查看及操作tail -fn100 文件 |grep 内容 循环查看日志文件某内容最新消息 快速查找匹配文本grep -Frn 匹配内容 文件名 快速编辑匹配文本sed 格式化文本awk: 如快速输出每一行的第1个和第4个单词 awk ‘{if($6==”42030”) {print} }’ hdp_teu_spat_im_php_access_info.2021042017.*|grep 23653471544838 1.awk1.1通用格式 awk’{pattern+action}’ filename (其操作为每读取一行执行action一次) 1.2参数详情1.3举例：1.3.1打印每一行的第一个文本awk ‘{print $1}’ file1 1.3.2加入初始和结尾的执行语句awk ‘BGGEIN{print “我是开头”} {print $1} END{print “结尾”}’ BEGIN、END后面的语句仅执行一次，中间的语句则每读取一次执行一次 1.3.3加入条件语句ifawk { if($5!=’”lin”) {print $5} } 过滤每行第5个参数为lin的行，打出其他第5行的参数 2.Sed匹配删除替换指定文本2.1通用格式 sed -nefri ‘command’ 文件内容 (其操作为每读取一行执行action一次) 2.2参数详情 常用选项： -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。 -e∶直接在指令列模式上进行 sed 的动作编辑； -f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作； -r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法) -i∶直接修改读取的档案内容，而不是由萤幕输出。 常用命令： a ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！ d ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚； i ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～ s ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ 2.3举例 假设我们有一文件名为ab。 2.3.1删除某行：# sed &#39;1d&#39; ab #删除第一行 # sed &#39;$d&#39; ab #删除最后一行 # sed &#39;1,2d&#39; ab #删除第一行到第二行 # sed &#39;2,$d&#39; ab #删除第二行到最后一行 2.3.2显示某行：# sed -n &#39;1p&#39; ab #显示第一行 # sed -n &#39;$p&#39; ab #显示最后一行 # sed -n &#39;1,2p&#39; ab #显示第一行到第二行 # sed -n &#39;2,$p&#39; ab #显示第二行到最后一行 2.3.3使用模式进行查询：# sed -n &#39;/ruby/p&#39; ab #查询包括关键字ruby所在所有行 # sed -n &#39;/\\$/p&#39; ab #查询包括关键字$所在所有行，使用反斜线\\屏蔽特殊含义 2.3.4增加一行或多行字符串：;) # cat ab Hello! ruby is me,welcome to my blog. end # sed &#39;1a drink tea&#39; ab #第一行后增加字符串&quot;drink tea&quot; Hello! drink tea ruby is me,welcome to my blog. end # sed &#39;1,3a drink tea&#39; ab #第一行到第三行后增加字符串&quot;drink tea&quot; Hello! drink tea ruby is me,welcome to my blog. drink tea end drink tea # sed &#39;1a drink tea\\nor coffee&#39; ab #第一行后增加多行，使用换行符\\n Hello! drink tea or coffee ruby is me,welcome to my blog. end 2.3.5代替一行或多行：;) # sed &#39;1c Hi&#39; ab #第一行代替为Hi Hi ruby is me,welcome to my blog. end # sed &#39;1,2c Hi&#39; ab #第一行到第二行代替为Hi Hi end ;) 2.3.6替换一行中的某部分 格式：sed ‘s/要替换的字符串/新的字符串/g’ （要替换的字符串可以用正则表达式） # sed -n &#39;/ruby/p&#39; ab | sed &#39;s/ruby/bird/g&#39; #替换ruby为bird # sed -n &#39;/ruby/p&#39; ab | sed &#39;s/ruby//g&#39; #删除ruby 2.3.7插入：;) # sed -i &#39;$a bye&#39; ab #在文件ab中最后一行直接输入&quot;bye&quot; # cat ab Hello! ruby is me,welcome to my blog. end bye ;) 2.3.8删除匹配行：sed -i &#39;/匹配字符串/d&#39; filename （注：若匹配字符串是变量，则需要“”，而不是‘’。记得好像是） 2.3.9替换匹配行中的某个字符串：sed -i &#39;/匹配字符串/s/替换源字符串/替换目标字符串/g&#39; filename 3.grep匹配文本 Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。 grep [options] 主要参数 [options]主要参数： －c：只输出匹配行的计数。 &lt;/sapn&gt; －I：不区分大 小写(只适用于单字符)。 －h：查询多文件时不显示文件名。 －l：查询多文件时只输出包含匹配字符的文件名。 －n：显示匹配行及 行号。 －s：不显示不存在或无匹配文本的错误信息。 －v：显示不包含匹配文本的所有行。 pattern正则表达式主要参数： \\： 忽略正则表达式中特殊字符的原有含义。 ^：匹配正则表达式的开始行。 $: 匹配正则表达式的结束行。 \\&lt;：从匹配正则表达 式的行开始。 >：到匹配正则表达式的行结束。 [ ]：单个字符，如[A]即A符合要求 。 [ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。 。：所有的单个字符。 ：有字符，长度可以为0。 5.2 grep简单使用 显示所有以d开头的文件中包含 test的行: $ grep &#39;test&#39; d* 显示在aa，bb，cc文件中匹配test的行: $ grep &#39;test&#39; aa bb cc 输出匹配行的计数: grep -c &quot;48&quot; data.doc #输出文档中含有48字符的行数 显示匹配行和行数: grep -n &quot;48&quot; data.doc #显示所有匹配48的行和行号 显示非匹配的行: grep -vn &quot;48&quot; data.doc #输出所有不包含48的行 显示非匹配的行: grep -vn &quot;48&quot; data.doc #输出所有不包含48的行 大小写敏感: grep -i &quot;ab&quot; data.doc #输出所有含有ab或Ab的字符串的行 5.3 grep正则表达式的应用 (注意：最好把正则表达式用单引号括起来)grep &#39;[239].&#39; data.doc #输出所有含有以2,3或9开头的，并且是两个数字的行 不匹配测试： grep &#39;^[^48]&#39; data.doc #不匹配行首是48的行 使用扩展模式匹配： grep -E &#39;219|216&#39; data.doc 显示所有包含每个字符串至少有5个连续小写字符的字符串的行: $ grep &#39;[a-z]\\&#123;5\\&#125;&#39; aa 如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符(.)，这些字符后面紧跟着 另外一个es(\\1)，找到就显示该行。如果用egrep或grep -E，就不用”\\”号进行转义，直接写成’w(es)t.\\1′就可以了: $ grep &#39;w\\(es\\)t.*\\1&#39; aa 5.4 正则表达式 符号表示 a 四、解压文件 文件格式 命令 tar 解压tar - xvf 压缩tar - cvf 压缩目标文件 压缩文件 tar.gz 解压tar -zxvf 压缩tar -czf zip 解压zip 压缩后文件名 压缩unzip需要下载zip rar 解压rar a [压缩后文件名] [被压缩文件] 压缩unrar e需要下载rar 五、检测网络netstat -ant n表示以ip的形势显示而非域名 a显示所有socket默认只显示connected状态的 t监听tcp端口 六、查看磁盘使用情况1.统计磁盘整体情况df -h 2.统计具体文件夹的磁盘使用情况du —max-depth=1 -h查看当前目录下的每个文件夹的使用情况 du -sh显示当前目录整体占用情况 七、本机和服务器之间的操作​ 1.nc 目的主机监听端口 nc -l 监听端口&lt;未使用端口&gt; &gt; 要接收的文件名 举例： nc -l 4444 &gt; cache.tar.gz源主机发起请求 nc 目的主机ip 目的端口 &lt; 要发送的文件 举例： nc 192.168.0.85 4444 &lt; /root/cache.tar.gz 传输过程是 目的主机接受文件完成后回自动关闭监听链接 八、linux输出重定向关于shell中：&gt;/dev/null 2&gt;&amp;1 详解 ​ shell中可能经常能看到：&gt;/dev/null 2&gt;&amp;1 。命令的结果可以通过%&gt;的形式来定义输出 ​ 分解这个组合：“&gt;/dev/null 2&gt;&amp;1” 为五部分。 ​ 1：&gt; 代表重定向到哪里，例如：echo “123” &gt; /home/123.txt​ 2：/dev/null 代表空设备文件​ 3：2&gt; 表示stderr标准错误​ 4：&amp; 表示等同于的意思，2&gt;&amp;1，表示 2 的输出重定向等同于 1​ 5：1 表示stdout标准输出，系统默认值是1，所以”&gt;/dev/null”等同于 “1&gt;/dev/null” ​ 因此，&gt;/dev/null 2&gt;&amp;1也可以写成 “ 1&gt; /dev/null 2&gt; &amp;1 ” 那么 &amp;&gt;/dev/null 语句执行过程为：1&gt;/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。2&gt;&amp;1 ：接着，标准错误输出重定向 到标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。 九、系统资源统计9.0综合9.0.1 toptop 接收参数 -p 指定要观察的pid 交互命令 在 top 执行过程当中可以使用的按键指令: 数字1 显示所有核的情况 ? :显示在 top 当中可以输入的按键指令; P :以 CPU 的使用资源排序显示; M :以 Memory 的使用资源排序显示; N :以 PID 来排序喔! T :由该 Process 使用的 CPU 时间累积 (TIME+) 排序。 k :给予某个 PID 一个讯号 (signal) r :给予某个 PID 重新制订一个 nice 值。 q :离开 top 软件的按键 H :显示线程 参数含义 第一行 目前时间、运行时间、登录人数 1，5，15分钟每个cpu运行的进程数 第二行 程序运行总量和个别程序运行状态 第三行 cpu负载情况, wa表示等待I/O wait比例 第四五行 swap要尽量少，buffer/cached是 读写磁盘用作缓冲的内存，当内存实在不够用时会释放该部分的内存 所以实际可用内存= free+buffer+cached top下半部分 PID :每个 process 的 ID 啦! USER:该 process 所属的使用者; PR :Priority 的简写，程序的优先执行顺序，越小越早被执行; NI :Nice 的简写，与 Priority 有关，也是越小越早被执行; %CPU:CPU 的使用率; %MEM:内存的使用率; TIME+:CPU 使用时间的累加 9.0.2 dstat//实时的监控cpu、磁盘、网络、IO、内存，甚至还有socket等情况，生成csv表格 dstat -c：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息。 -C：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息。 -d：显示磁盘读写数据大小。 -D hda,total：include hda and total。 -n：显示网络状态。 -N eth1,total：有多块网卡时，指定要显示的网卡。 -l：显示系统负载情况。 -m：显示内存使用情况。 -g：显示页面使用情况。 -p：显示进程状态。 -s：显示交换分区使用情况。 -S：类似D/N。 -r：I/O请求情况。 -y：系统状态。 --ipc：显示ipc消息队列，信号等信息。 --socket：用来显示tcp udp端口状态。 -a：此为默认选项，等同于-cdngy。 -v：等同于 -pmgdsc -D total。 --output 文件：此选项也比较有用，可以把状态信息以csv的格式重定向到指定的文件中，以便日后查看。例：dstat --output /root/dstat.csv &amp; 此时让程序默默的在后台运行并把结果输出到/root/dstat.csv文件中。 9.1磁盘iostat [-k -m]显示读写单位 [-d] 2 每2秒1次 [-x]可以显示更详细信息 选项 说明 %user CPU在用户态执行进程的时间百分比。 %nice CPU在用户态模式下，用于nice操作，所占用CPU总时间的百分比 %system CPU处在内核态执行进程的时间百分比 %iowait CPU用于等待I/O操作占用CPU总时间的百分比 %steal 管理程序(hypervisor)为另一个虚拟进程提供服务而等待虚拟CPU的百分比 %idle CPU空闲时间百分比 若 %iowait 的值过高，表示硬盘存在I/O瓶颈 若 %idle 的值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量 若 %idle 的值持续低于1，则系统的CPU处理能力相对较低，表明系统中最需要解决的资源是 CPU使用比例iostat -x svctm %util 9.2cpu9.3网卡流量// 实时显示网卡流量信息 nload 9.4内存vmstat vmstat 3 10 每3秒1次，一共10次，没10不会停 -S k｜m 以kb、mb单位显示内存 字段说明： Procs（进程） r: 运行队列中进程数量，这个值也可以判断是否需要增加CPU。（长期大于1） b: 等待IO的进程数量。 Memory（内存） swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。 free: 空闲物理内存大小。 buff: 用作缓冲的内存大小。 cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小。 Swap si: 每秒从交换区写到内存的大小，由磁盘调入内存。 so: 每秒写入交换区的内存大小，由内存调入磁盘。 注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。 IO（现在的Linux版本块的大小为1kb） bi: 每秒读取的块数 bo: 每秒写入的块数 注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。 system（系统） in: 每秒中断数，包括时钟中断。 cs: 每秒上下文切换数。 注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。 CPU（以百分比表示） us: 用户进程执行时间百分比(user time) us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。 sy: 内核系统进程执行时间百分比(system time) sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。 wa: IO等待时间百分比 wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。 id: 空闲时间百分比 综合:top、、dstat 十、其他1.在终端开发应用程序，如使用文本编辑器打开文本文件 open -a &lt;应用程序&gt; &lt;文件名&gt; 2.打印文件树 方法一：find . -print | sed -e ‘s;/*/;|;g;s;|; |;g’ 方法二：下载tree命令","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"资料整理","slug":"资料整理","permalink":"http://linxuesong.github.io/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"},{"name":"linux","slug":"linux","permalink":"http://linxuesong.github.io/tags/linux/"}],"author":"linxuesong"},{"title":"个人博客的分类和标签","slug":"个人博客的分类和标签","date":"2021-05-25T06:12:31.000Z","updated":"2022-12-05T05:59:20.093Z","comments":true,"path":"2021/05/25/个人博客的分类和标签/","link":"","permalink":"http://linxuesong.github.io/2021/05/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/","excerpt":"","text":"分类和标签只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 categories: - Diary tags: - PS3 - Games 分类方法的分歧 如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法： categories: - Diary - Life 会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。 如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。 categories: - [Diary, PlayStation] - [Diary, Games] - [Life] 此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类。 1.当前博客的分类技术、生活、才艺、期望、纪念 2.当前博客的标签主题相关主题美化写作相关 算法相关动态规划、BFS、DFS、回溯、LeetCodegolanggolang、golang语法基础、golang源码解读、golang第三方包、golang文件读取java趣物发现实物开箱、有趣软件linux操作系统 悦读、主题美化、LeetCode、MarkDown、Sakura、nginx、web、linux、多线程、感悟、数组、文件读取、简单、算法、黑科技、博客归类、资料整理、动态规划","categories":[{"name":"主题","slug":"主题","permalink":"http://linxuesong.github.io/categories/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"博客归类","slug":"博客归类","permalink":"http://linxuesong.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%BD%92%E7%B1%BB/"}],"author":"linxuesong"},{"title":"Golang日志第三方库的使用","slug":"Golang日志第三方库的使用","date":"2021-05-20T02:44:05.000Z","updated":"2022-12-05T05:59:19.306Z","comments":true,"path":"2021/05/20/Golang日志第三方库的使用/","link":"","permalink":"http://linxuesong.github.io/2021/05/20/Golang%E6%97%A5%E5%BF%97%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1.第三方日志库的对比2.Zap2.1简单实例-会把日志打印到控制台//1.快速创建Zap.logger的方法，使用预先写好的配置创建日志变量 //NewExample(Option...) //NewDevelopment(Option...) //NewProduction logger, _ := zap.NewProduction() defer logger.Sync() // flushes buffer, if any //2.创建日志对象后可以打印日志了，有两种打印日志的方式 //2.1效率低一点，但自由度更高 sugar := logger.Sugar() sugar.Infow(&quot;failed to fetch URL&quot;, // Structured context as loosely typed key-value pairs. &quot;url&quot;, url, &quot;attempt&quot;, 3, &quot;backoff&quot;, time.Second, ) sugar.Infof(&quot;Failed to fetch URL: %s&quot;, url) //2.2效率高一点，要指定类型 defer logger.Sync() logger.Info(&quot;failed to fetch URL&quot;, // Structured context as strongly typed Field values. zap.String(&quot;url&quot;, url), zap.Int(&quot;attempt&quot;, 3), zap.Duration(&quot;backoff&quot;, time.Second), ) 2.2定义自己的logger-打印到指定文件//使用zap.New创建自定义的日志变量 //func New(core zapcore.Core, options ...Option) *Logger //zapcore.Core可以使用zapcore.NewCore，如果需要不同级别日志输出到不同文件使用zapcore.NewTee(Core...)放入多个core 需要需要三个配置 // Encoder编码器(日志格式)：可以使用预先设置的配置 zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),除此之外还有zapcore.NewConsoleEncoder(EncoderConfig)等配置 // WriterSyncer(日志输出位置):zapcore.AddSync(io.Writer)将打开的文件传入 // LogLevel(哪些日志级别的日志将被打印): 可以直接使用提供好的日志级别，也可以定制zap.LevelEnablerFunc(func(lvl zapcore.Level) bool) 传入一个函数返回bool用于判断日志级别是否需要被打印 //1.创建Encode日志格式 encoder := zapcore.NewConsoleEncoder(zapcore.EncoderConfig&#123; MessageKey: &quot;msg&quot;, LevelKey: &quot;level&quot;, EncodeLevel: zapcore.CapitalLevelEncoder, TimeKey: &quot;ts&quot;, EncodeTime: func(t time.Time, enc zapcore.PrimitiveArrayEncoder) &#123; enc.AppendString(fmt.Sprintf(&quot;%d%02d%02d_%02d%02d%02d&quot;, t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute(), t.Second())) &#125;, CallerKey: &quot;file&quot;, EncodeCaller: zapcore.ShortCallerEncoder, EncodeDuration: func(d time.Duration, enc zapcore.PrimitiveArrayEncoder) &#123; enc.AppendInt64(int64(d) / 1000000) &#125;, &#125;) //2.创建writer日志输出位置 file, err := os.OpenFile(logPath, os.O_CREATE|os.O_APPEND|os.O_RDWR, 0744) if err != nil &#123; return fmt.Errorf(&quot;log file open file ,err:%v&quot;, err) &#125; writer := apcore.AddSync(writer) //3.创建logLevel日志输出范围 // 实现判断日志等级的interface (其实 zapcore.*Level 自身就是 interface)，创建出的level等价于zapcore.InfoLevel level := zap.LevelEnablerFunc(func(lvl zapcore.Level) bool &#123; return lvl &gt;= zapcore.InfoLevel &#125;) // 4.创建具体core zapcore.NewCore(encoder, writer, level) // 如果要是不同级别日志放到不同文件，用NewTee // core := zapcore.NewTee( // zapcore.NewCore(encoder, writer, level), // zapcore.NewCore(encoder2, writer2, level2) // ) // 创建logger，可以加入可选项 logger = zap.New(core, zap.AddCaller()) // 需要传入 zap.AddCaller() 才会显示打日志点的文件名和行数 3.文件日志切割第三方库 仓库 natefinch/lumberjack 按文件大小自动切割 lestrrat-go/file-rotatelogs 按找时间自动切割 /* 日志轮转相关函数 Filename: 日志文件的位置 MaxSize：在进行切割之前，日志文件的最大大小（以MB为单位） MaxBackups：保留旧文件的最大个数 MaxAges：保留旧文件的最大天数 Compress：是否压缩/归档旧文件 */ writer := &amp;lumberjack.Logger&#123; Filename: logPath, MaxSize: 100, MaxBackups: 5, MaxAge: 5, Compress: false, &#125; /* 日志轮转相关函数 `WithLinkName` 为最新的日志建立软连接 `WithRotationTime` 设置日志分割的时间，隔多久分割一次 WithMaxAge 和 WithRotationCount二者只能设置一个 `WithMaxAge` 设置文件清理前的最长保存时间 `WithRotationCount` 设置文件清理前最多保存的个数 */ writer, err := rotatelogs.New( logPath+&quot;.%Y-%m-%d-%H:%M&quot;, rotatelogs.WithLinkName(logPath), rotatelogs.WithMaxAge(time.Duration(24)*time.Hour), rotatelogs.WithRotationTime(time.Duration(60)*time.Hour), )","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"http://linxuesong.github.io/tags/Golang/"}],"author":"linxuesong"},{"title":"JAVA异常机制","slug":"JAVA异常机制","date":"2021-04-14T09:16:25.000Z","updated":"2022-12-05T05:59:19.525Z","comments":true,"path":"2021/04/14/JAVA异常机制/","link":"","permalink":"http://linxuesong.github.io/2021/04/14/JAVA%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/","excerpt":"","text":"一、异常异常有两种选择：throws和catch，一种是抛给调用者，另一种是在本方法中捕获处理。 选择标准：如果知道如何处理就catch，不知道如何处理就throws 异常种类：Throwable是父类， 1⃣️Error子类是系统错误不可控，所以不用抛出、不用处理 2⃣️Exception/RuntimeException是可控的要被控制,我们的代码不应有数组越界等错误 3⃣️Exception/IOException是文件读写错误，类加载错误 1⃣️2⃣️是不需要throws和catech的，3⃣️是需要throws或catch的,并且如果throws要列出所有可能抛出的IOException public static void func1() throws IOException &#123;//列出所有可能抛出的的IOException try&#123; //检测代码 &#125;catch(FileNotFoundException | UnKonwHostException) &#123; // 处理捕获异常 throw new ServeletException(&quot;xx&quot;); //也可以再次抛出异常 &#125;finally &#123; //最后一定执行的代码，常做一些关闭文件，释放资源的事情， 对于close也可能爆出异常，对此可以用带资源的try语句，保证最后关闭资源 &#125; &#125; 二、日志将提示信息按照不同级别打印到指定文件中 1.JDK的Loggingimport java.io.UnsupportedEncodingException; import java.util.logging.Logger; public class Main &#123; public static void main(String[] args) Logger logger = Logger.getLogger(Main.class.getName()); logger.info(&quot;Start process...&quot;); try &#123; &quot;&quot;.getBytes(&quot;invalidCharsetName&quot;); &#125; catch (UnsupportedEncodingException e) &#123; // TODO: 使用logger.severe()打印异常 &#125; logger.info(&quot;Process end.&quot;); &#125; &#125; 如果要打印到指定文件需要修改配置文件，JVM启动时传递的参数-Djava.util.logging.config.file=config-file-name 2.Commons Logging和Log4j参考https://www.liaoxuefeng.com/wiki/1252599548343744/1264739436350112 3.SLF4J和Logbackhttps://www.liaoxuefeng.com/wiki/1252599548343744/1264739155914176","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"异常","slug":"异常","permalink":"http://linxuesong.github.io/tags/%E5%BC%82%E5%B8%B8/"},{"name":"java","slug":"java","permalink":"http://linxuesong.github.io/tags/java/"}],"author":"linxuesong"},{"title":"Java中祖先类Object提供的基础方法","slug":"Java中祖先类Object提供的基础方法","date":"2021-04-09T07:28:30.000Z","updated":"2022-12-05T05:59:19.541Z","comments":true,"path":"2021/04/09/Java中祖先类Object提供的基础方法/","link":"","permalink":"http://linxuesong.github.io/2021/04/09/Java%E4%B8%AD%E7%A5%96%E5%85%88%E7%B1%BBObject%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/","excerpt":"","text":"函数声明 Object中作用 子类重写作用 boolean equals (Object other) 两个对象的引用是否相等，而非其实例域 比较子类的两个对象其内容是否相等 String hashCode() 由对象导出的散列码 String toString () 返回对象类名和散列码 方便打印对象变量的实际内容，在JAVA语句中+x或x可以自动转为x.toString() Class getClass () 返回包含对象信息的类对象 String getName() 获取类名字","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://linxuesong.github.io/tags/JAVA/"}],"author":"linxuesong"},{"title":"Java重写完美的equals方法","slug":"Java重写完美的equals方法","date":"2021-04-09T07:08:57.000Z","updated":"2022-12-05T05:59:19.556Z","comments":true,"path":"2021/04/09/Java重写完美的equals方法/","link":"","permalink":"http://linxuesong.github.io/2021/04/09/Java%E9%87%8D%E5%86%99%E5%AE%8C%E7%BE%8E%E7%9A%84equals%E6%96%B9%E6%B3%95/","excerpt":"","text":"示例代码： @Override public boolean equals(Object otherObject) &#123; // 1.判断是否引用自身，小优化可以提前避免后面的实例比较 if(this == otherObject) &#123; return true; &#125; // 2.比较this和otherObject是否为同一个类,此处有两种选择： // a. this.getClass()==otherObject.getClass(),各个子类中的语义不一致 // b. otherObject instanceof ClassName,各个子类中的语义一致 if (this.getClass() != otherObject.getClass()) &#123; return false; &#125; // 如果步骤2中按b分支，既比较双方可以转为通用父类，则多下面一步转换 // 按照a分支则无需此步骤 // ClassName other = (ClassName) otherObject; Father other = (Father) otherObject; // 3.比较this，other的内部实例, 基本类型用==，其他类型用Objects.equals(a,b) return Objects.equals(this.a, other.a) &amp;&amp; this.b == other.b; &#125;","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://linxuesong.github.io/tags/JAVA/"}],"author":"linxuesong"},{"title":"JAVA中数组的常见操作","slug":"JAVA中数组的常见操作","date":"2021-04-08T08:34:03.000Z","updated":"2022-12-05T05:59:19.510Z","comments":true,"path":"2021/04/08/JAVA中数组的常见操作/","link":"","permalink":"http://linxuesong.github.io/2021/04/08/JAVA%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/","excerpt":"","text":"一、普通数组int[]深拷贝类似C++中的数组指针，使用等号赋值只是浅拷贝，深拷贝需要用Arrays类的如下方法 Static type copyOf(type a[], int length) // 深拷贝出一个新的数组 Static type copyOfRange(type a[], int start, int end) 排序int[] a = new int[1000]; Arrays.sort(a); // 使用优化后的快速排序方法对数组进行排序 判断是否相等直接用等号判断是判断引用是否为同一处，如果要判断具体值要用Arrays类的如下方法 static boolean equals(type[] a, type[] b) 二、泛型数组列表ArrayList\\使用// 构建 ArrayList staff = new ArrayList(); // 声明并构造 // 增删改查 staff.add(new Emplyee(\"xxx\")); // 尾部添加元素,也可以指定位置 Employee e = staff.remove(index);// 删除下标为index的元素，之后所有元素前一 staff.set(index, e); // 将index位置元素赋值 Employee e = staff.get(index); // 取指定位置元素 // 遍历 for(Employee e : staff) &#123;&#125; 使用ArrayList存放基本类型数据需要装箱和拆箱 ArrayList&lt;Integer&gt; lst = new ArrayList&lt;Integer&gt;(); lst.add(3); //等价于Integer.valueOf(3) int a = lst.get(0); //等价于lst.get(0).intValue()","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://linxuesong.github.io/tags/JAVA/"},{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"}],"author":"linxuesong"},{"title":"JAVA String和StringBuilder常用方法","slug":"JAVA-String常用方法","date":"2021-04-08T08:02:34.000Z","updated":"2022-12-05T05:59:19.494Z","comments":true,"path":"2021/04/08/JAVA-String常用方法/","link":"","permalink":"http://linxuesong.github.io/2021/04/08/JAVA-String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"","text":"一、String不可变字符串1.int compareTo(String other) 比较两字符串大小2.boolean equals(Object object)比较两字符串是否其内容一致==比较运算符比较的是引用位置是否相等，而非其内容 3.boolean endsWith(String suffix)和Boolean startsWith(String prefix)以指定字符串开始或结尾返回true4.int indexOf(String str)返回与指定字符串匹配的首个位置如果还要其他要求，是有函数重载的 5.int length()字符串长度6.String toLowerCase()和String toUpperCase()大小写转换7.String trim()删除原始字符串头部和尾部的空格更多方法可以参考Java的官网api文档 二、StringBuilderstring问题是每次做字符串拼接都会产生一个新的String对象，这样既耗时又费空间 使用StringBuilder则可以避免这个问题发生 1.String toString()转为字符串2.StringBuilder insert(int offset， String str) 指定位置插入自负传3.void setCharAt(int i， char c)设置指定位置字符4.StringBuilder append（String str）追加字符串在尾部","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://linxuesong.github.io/tags/JAVA/"},{"name":"String","slug":"String","permalink":"http://linxuesong.github.io/tags/String/"}],"author":"linxuesong"},{"title":"Redis常用命令整理","slug":"Redis常用命令整理","date":"2021-04-01T06:59:02.000Z","updated":"2022-12-05T05:59:19.791Z","comments":true,"path":"2021/04/01/Redis常用命令整理/","link":"","permalink":"http://linxuesong.github.io/2021/04/01/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/","excerpt":"","text":"0.前言及Redis的链接redis缓存数据库，主要存放key-value键值对，其中key为字符串，value可为多种类型字符串、列表、集合、字典 1.设置字符串set key value get key value 2.设置列表lpsuh key childElement // 头部插入 lpop key // 头部删除 lrang key 0 10 // 从头部开始查询到10 // 注：尾部操作则将lpush替换成rpush // 头部插入的下表说明，头部入A、B、C 下标: 0、 1、 2 元素: A、 B、 C 下标: -3、 -2、 -1 3.设置集合集合分为无序集合和有序集合(元素含权重)，集合元素个数为2的32次方-1个 无序集合 sadd key member // 添加元素 smemebers key // 查询所有元素 scard key // 获取集合中元素个数 sdiff key1 key2 // 差集 sinter key1 key2 // 集合的交集运算 sunion key1 key2 // 集合的补集 有序集合（元素含权重） 将sadd改为zadd极为有序集合 zadd key score member // 添加元素，score为元素权重 4.key的其他操作（移除、过期时间、检测）del key // 删除key exist key // 检测key是否存在 type key // 查看key类型 expire // 设置过期时间 persist key // 持久化key，移除key过期时间 ttl key // 查寻key的剩余过期时间 5.Redis发布和订阅6.Redis事务7.Redis脚本","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Reids","slug":"Reids","permalink":"http://linxuesong.github.io/tags/Reids/"}],"author":"linxuesong"},{"title":"golang包管理工具介绍","slug":"golang包管理工具介绍","date":"2021-03-31T11:34:09.000Z","updated":"2022-12-05T05:59:19.869Z","comments":true,"path":"2021/03/31/golang包管理工具介绍/","link":"","permalink":"http://linxuesong.github.io/2021/03/31/golang%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"参考博客 Go管理工具的使用 0.没有包管理工具的情况0.1寻找依赖的路径：1⃣️在GOROOT目录下查找 2⃣️在GOPATH/src下面查找包 0.2获取依赖go get 依赖地址 // 依赖包会存放到gopath下面两个位置，pkg里面.a文件和src下面的.go文件 1.govendor1.1管理方式寻找依赖的路径： 1⃣️在$GOPATH/src/当前包文件/vendor目录 2⃣️向当前包目录的上级目录查找知道找到src下的vendor 3⃣️在GOROOT目录下查找 4⃣️在GOPATH下面查找包 1.2安装go get -u github.com/kardianos/govendor 安装完成后为方便使用加入到环境变量 export PATH=&quot;$GOPATH/bin:$PATH&quot; 1.3使用0⃣️如果不是从git上拉取已有vendor.json的项目，而是本地新建项目，则要初始化本地项目 初始化项目目录，生成vendor目录和vendor.json文件 govendor init 1⃣️下载项目依赖，这里以引入 依赖为例 从远程拉去下来依赖并放入当前vendor文件夹，记录到vendor.json,在gopath下不会有依赖包 govendor fetch &quot;包链接&quot; // 举例：govendor fetch &quot;github.com/labstack/echo/...&quot; //这里三个点表示文件夹下的所有文件，或者echo后面不要有斜杠，标识拉取项目 🐻踩坑：i.对于无法从网上下载下里的包，只能从git上自己手动下载，放到vendor下面 ii.有时需要加上三个点标识所有文件，不然会下载下一个空文件夹 2⃣️提交到git上只需要提交vendor.json即可,不需要把所有的vendor依赖文件夹提交上去 从git上拉起他人项目，项目中含有vendor.json文件，通过如下命令安装依赖包 govendor sync 1.4其他常用命令 govendor list // 列出代码中所有被引用到的包及其状态 govendor fetch // 从远程仓库添加或更新某个包 子命令 功能 init 初始化一个新项目，生成vendor文件夹 list 根据当前项目文件的import列出所有依赖包 add update remove status fetch 从远程仓库拉取依赖包 sync migrate get license shell 状态参数 状态 缩写 含义 +local l 本地包，即项目内部编写的包 +external e 外部包，即在 GOPATH 中、却不在项目 vendor 目录 +vendor v 已在 vendor 目录下的包 +std s 标准库里的包 +excluded x 明确被排除的外部包 +unused u 未使用的包，即在 vendor 目录下，但项目中并未引用到 +missing m 被引用了但却找不到的包 +program p 主程序包，即可被编译为执行文件的包 +outside 相当于状态为 +external +missing +all 所有包 支持状态参数的子命令有：list、add、update、remove、fetch 2.gomod前沿:go1.13版本会默认开启mod，1.11版本后才支持mod 2.0前期准备,设置go环境参数使其支持modgo env -w GO111MODULE=on // 启用go mod，之后可以用go env 命令展示一下go的配置 2.1管理方式模块:多个包package的集合 当GO111MODULE=on时，那么就会使用modules功能:这种模式下，$GOPATH不再作为build时导入的角色，依赖包会存放在$GOPATH/pkg/mod目录下。工程中的依赖包也会从此目录下查找. 2.2初始化一个新项目go mod init &lt;项目名&gt; //项目名不填写则是gopath/src后的相对路径名，填的话一般为github.com/your name/project name 2.3添加依赖a.先编写程序improt依赖包其实当go run执行时会自动下载依赖包，当然也可以不运行而是只去下载依赖包 b.下载依赖包go mod tidy // 检测并下载本项目的module所依赖的文件，同时会移除不需要的模块 依赖包的存放位置是$GoPath/pkg/mod/ C.修改go.mod文件可以使用其他依赖路径如：for的仓库、本地的拷贝例如go.mod的内容乳腺癌 replace example.com/project/foo =&gt; ../foo d.go.mod文件的介绍go.mod 提供了module, require、replace和exclude 四个命令 module 语句指定包的名字（路径） require 语句指定的依赖项模块 replace 语句可以替换依赖项模块 exclude 语句可以忽略依赖项模块 2.4其他命令 命令 描述 vendor 将依赖复制到vendor下 graph 打印模块依赖图 verify 验证依赖是否正确 edit 编辑go.mod文件 download 下载私有仓库的依赖到本地cache 🐻在国内访问golang.org/x的各个包都需要翻墙，你可以在go.mod中使用replace替换成github上对应的库。形式如下： replace ( golang.org/x/crypto v0.0.0-20180820150726-614d502a4dac =&gt; github.com/golang/crypto v0.0.0-20180820150726-614d502a4dac golang.org/x/net v0.0.0-20180821023952-922f4815f713 =&gt; github.com/golang/net v0.0.0-20180826012351-8a410e7b638d golang.org/x/text v0.3.0 =&gt; github.com/golang/text v0.3.0 )","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://linxuesong.github.io/tags/Go/"},{"name":"包管理工具","slug":"包管理工具","permalink":"http://linxuesong.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"}],"author":"linxuesong"},{"title":"mac自带终端美化不用iterm2","slug":"mac配置iterm2","date":"2021-03-20T03:27:45.000Z","updated":"2022-12-05T05:59:20.010Z","comments":true,"path":"2021/03/20/mac配置iterm2/","link":"","permalink":"http://linxuesong.github.io/2021/03/20/mac%E9%85%8D%E7%BD%AEiterm2/","excerpt":"","text":"参考链接： 晨旭OvO原创文章https://blog.csdn.net/a1228136188/article/details/109092435 本文为CSDN博主「DuebassLei」https://blog.csdn.net/m0_37903882/article/details/112655290https://blog.csdn.net/m0_37903882/article/details/112655290 前沿：mac终端的使用，这里只使用系统自带的终端+oh my zsh，无iterm2、hyper等 使用iterm2的好处是配置界面丰富主题多，有支持lz、sz的方法 不使用iterm2的好处是省去一个软件，配置也不算是麻烦 最终效果如下 设置步骤如下 1.下载zsh、oh-my-zshZsh// a 安装 yum install -y zsh // b 查看 zsh --version // c shell由bash变为zsh chsh -s /bin/zsh // d 验证 #重新查看目前默认的shell,已经变为bin/zsh echo $SHELL Oh-my-Zshsh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; 2.配置zsh修改配置文件vi ～/.zshrc 配置文件修改如下# 1.Path to your oh-my-zsh installation. on-my-zsh命令成为zsh命令 export TERM=&quot;xterm-256color&quot; export ZSH=&quot;/root/.oh-my-zsh&quot; #default 2.设置主题为powerlevel9k #ZSH_THEME=&quot;robbyrussell&quot; ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot; # 3.plugins=(git) 改为 plugins=(git zsh-syntax-highlighting zsh-autosuggestions) plugins=(git zsh-syntax-highlighting zsh-autosuggestions) source $ZSH/oh-my-zsh.sh 3.根据配置添加所需资源安装主题git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k 安装主题powerline字体# 下载 git clone https://github.com/powerline/fonts.git # 进入文件夹并安装 cd fonts ./install.sh 安装 Awesome-Terminal Fonts字体git clone https://github.com/gabrielelana/awesome-terminal-fonts.git cd awesome-terminal-fonts ./install.sh 安装nerd-fonts显示图标#下载 git clone https://github.com/ryanoasis/nerd-fonts.git #安装同上 安装插件# 代码高亮安装zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting # 自动补全命令 git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions 4.更新配置文件source .zshrc 关闭重启终端 如果发现报错说明第三步 配置所需资源安装不成功 问题一：如果最后配置完显示乱码，一定是终端展示的字体问题","categories":[{"name":"转载","slug":"转载","permalink":"http://linxuesong.github.io/categories/%E8%BD%AC%E8%BD%BD/"}],"tags":[{"name":"mac软件","slug":"mac软件","permalink":"http://linxuesong.github.io/tags/mac%E8%BD%AF%E4%BB%B6/"}],"author":"linxuesong"},{"title":"mac迁移软件经历","slug":"mac迁移软件经历","date":"2021-03-20T03:10:25.000Z","updated":"2022-12-05T05:59:19.978Z","comments":true,"path":"2021/03/20/mac迁移软件经历/","link":"","permalink":"http://linxuesong.github.io/2021/03/20/mac%E8%BF%81%E7%A7%BB%E8%BD%AF%E4%BB%B6%E7%BB%8F%E5%8E%86/","excerpt":"","text":"Mac工作软件安装踩坑记录 1.Idea先下载idea，在idea里面下载jdk，这样避免配置jdk 1.1下载idea1.2在idea内部安装jdk 1.3修改maven配置主要解决：解决maven包拉取不下来 打开一个项目文件，在配置中将原来电脑的setting.xml做替换，更新maven即可 2.goland2.1安装goland2.2在goland中安装go环境 3.邮件3.1关闭腾讯企业邮箱的安全登录登录腾讯企业邮箱官网，设置-》账户，将账户安全修改如下： 3.2mac邮件添加邮箱账户选填加其他邮箱账户 电子邮件和密码是公司提供的，确认后进入如下界面 这个配置的填写参考腾讯邮箱 设置-》客户端设置界面 配置tls端口时要先关闭“自动管理链接设置” 参考博客：使用Mac自带邮箱添加腾讯企业邮箱 https://www.jianshu.com/p/2eb79645d94f","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"软件安装","slug":"软件安装","permalink":"http://linxuesong.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}],"author":"linxuesong"},{"title":"主题博客增加天气插件","slug":"主题博客增加天气插件","date":"2021-03-08T07:57:56.000Z","updated":"2022-12-05T05:59:20.124Z","comments":true,"path":"2021/03/08/主题博客增加天气插件/","link":"","permalink":"http://linxuesong.github.io/2021/03/08/%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/","excerpt":"","text":"效果预览： 1.注册和风天气账号官方网址如下https://www.qweather.com/ 2.导入生成的插件代码博客目录\\themes\\Sakura\\layout_partial\\header.ejs 嵌入到代码的最尾部","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"name":"sakura","slug":"sakura","permalink":"http://linxuesong.github.io/tags/sakura/"}],"author":"linxuesong"},{"title":"ubuntu中apt-get安装的默认路径","slug":"ubuntu中apt-get安装的默认路径","date":"2021-03-01T03:12:51.000Z","updated":"2022-12-05T05:59:20.077Z","comments":true,"path":"2021/03/01/ubuntu中apt-get安装的默认路径/","link":"","permalink":"http://linxuesong.github.io/2021/03/01/ubuntu%E4%B8%ADapt-get%E5%AE%89%E8%A3%85%E7%9A%84%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/","excerpt":"","text":"博客源地址：https://blog.csdn.net/yanhx1204/article/details/54893581 一、apt-get 安装deb是debian linus的安装格式，跟red hat的rpm非常相似，最基本的安装命令是：dpkg -i file.deb或者直接双击此文件 dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。以下是一些 Dpkg 的普通用法： 1、dpkg -i 安装一个 Debian 软件包，如你手动下载的文件。 2、dpkg -c 列出 的内容。 3、dpkg -I 从 中提取包裹信息。 4、dpkg -r 移除一个已安装的包裹。 5、dpkg -P 完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。 6、dpkg -L 列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。 7、dpkg -s 显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。 8、dpkg-reconfigure 重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。 二、软件安装后相关文件位置 1.下载的软件存放位置 /var/cache/apt/archives 2.安装后软件默认位置 /usr/share 3.可执行文件位置 /usr/bin 4.配置文件位置 /etc 5.lib文件位置 /usr/lib","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"转载","slug":"转载","permalink":"http://linxuesong.github.io/categories/%E8%BD%AC%E8%BD%BD/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://linxuesong.github.io/tags/linux/"}],"author":"linxuesong"},{"title":"编程开发技术学习资源整理","slug":"编程开发技术学习资源整理","date":"2021-02-26T06:19:14.000Z","updated":"2022-12-05T05:59:20.468Z","comments":true,"path":"2021/02/26/编程开发技术学习资源整理/","link":"","permalink":"http://linxuesong.github.io/2021/02/26/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/","excerpt":"","text":"0.大纲概览主要介绍一下，本片文章涉及到的内容 1.编程语言,含c++、go、java 1.编程语言语法1.1 C++1.2 Golang①W3Cschool https://www.w3cschool.cn/yqbmht/7rcvwcqm.html 描述：前几章可以做入门使用，之后几章多了一些网络通信的编程 ②https://draveness.me/golang/入门级学习 ③https://draveness.me/golang/docs/part1-prerequisite/ch01-prepare/golang-debug/ 更加底层的学习go语言，设计到汇编，内容细致，干活多 1.3 Java2.Linux命令速查https://blog.csdn.net/waitig1992/article/details/51884653 描述：通过预览页快速定位到http://www.linuxdaxue.com/，快速定位把 3.Nginx学习源码学习： https://www.kancloud.cn/digest/understandingnginx/202587 章节式学习，有些枯燥 https://segmentfault.com/a/1190000016922188 单独对nginx配置文件解析过程进行的分析 4.算法https://labuladong.gitbook.io/algo/内容生动，总结力强，是提升效率的好文章，主讲算法刷题套路、算法框架总结","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"资源","slug":"资源","permalink":"http://linxuesong.github.io/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://linxuesong.github.io/tags/nginx/"}],"author":"linxuesong"},{"title":"hexo博客添加友链检测界面UptimeRobot+CupSatus","slug":"hexo博客添加友链检测界面UptimeRobot-CupSatus","date":"2021-02-03T10:01:58.000Z","updated":"2022-12-05T05:59:19.947Z","comments":true,"path":"2021/02/03/hexo博客添加友链检测界面UptimeRobot-CupSatus/","link":"","permalink":"http://linxuesong.github.io/2021/02/03/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE%E6%A3%80%E6%B5%8B%E7%95%8C%E9%9D%A2UptimeRobot-CupSatus/","excerpt":"","text":"0.效果展示1.前期准备a.注册UptimeRobot账号，将自己的网站和要检测的网站或者账号加上去 b.去https://github.com/izoyo/Cup网址下载CupStatus页面 2.应用到自己的hexo博客上hexo new page “friendlink_status” 页面 在source/friendlink_status/中把CupSatus的所有文件放进去，目录如下 按照开源项目CupSatus中说的把js/config.js中的key替换成自己upTimeRobot账号下对应的api key即可 然后在博客目录/config.yml 注意不是主题目录下的那个配置文件 加入skip-render: -friendlink_status/** 不使用主题的layout.ejs渲染这个页面 在主题的配置文件中菜单导航栏上加入这个页面即可","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"博客美化增加瀑布流相册","slug":"博客美化增加瀑布流相册","date":"2021-01-26T06:53:03.000Z","updated":"2022-12-05T05:59:20.327Z","comments":true,"path":"2021/01/26/博客美化增加瀑布流相册/","link":"","permalink":"http://linxuesong.github.io/2021/01/26/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E7%80%91%E5%B8%83%E6%B5%81%E7%9B%B8%E5%86%8C/","excerpt":"","text":"参考链接: 来源: itsNekoDeng文章作者: NekoDeng文章链接: https://nekodeng.gitee.io/posts/waterfall-flow-photo-album.html#toc-heading-9 自己经过修改后移植到sakura主题 1.增加相册界面和相册详情页面1.1新建gallery界面(相册概览)hexo new &quot;gallery&quot; 在博客目录/source/gallery可以看到index.md文件，修改内容如下 --- title: gallery comments: false date: 2021-01-25 19:40:18 keywords: description: photos: layout: &quot;gallery&quot; --- 1.2增加相册详情页 在博客目录创建/source/gallery/test/index.md 创test文件夹 及其下面的index.md文件 index内容为 --- title: test date: 2020-10-02 23:00:17 type: &quot;galleries&quot; layout: &quot;galleries&quot; password: --- 1.2相册加密功能（选用）在上面index.md文件中，可以实现加密功能，加密使用SHA256加密，所以在加密前需要先将你的密码转换成SHA256格式然后输入到最上面的创建相片页面的index.md的password里面。至于SHA256加密，请自行网上搜索在线生成，例如: http://www.ttmd5.com/hash.php?type=9 编辑主题导航栏加入相册按钮2.新增布局样式文件在博客目录/themes/sakura/layout/位置下新增两个文件gallery.ejs、galleries.ejs 这两个布局样式引用了https://github.com/feimosi/baguetteBox.js中的js和css样式文件，感兴趣可以自行参考 文件内容分别如下: gallery.ejs [&#123; &quot;name&quot;: &quot;test&quot;, &quot;cover&quot;: &quot;https://i.loli.net/2020/10/05/kBcvAf7INgMLaem.jpg&quot;, &quot;date&quot;: &quot;2017-10&quot;, &quot;description&quot;: &quot;test&quot;, &quot;url_name&quot;: &quot;test&quot;, &quot;album&quot;: [&#123; &quot;img_url&quot;: &quot;https://i.loli.net/2020/10/05/qtOevHpw5XImS1J.jpg&quot;, &quot;title&quot;: &quot;test&quot;, &quot;describe&quot;: &quot;test&quot; &#125;, &#123; &quot;img_url&quot;: &quot;https://i.loli.net/2020/10/05/4acvniMKTx8euqp.jpg&quot;, &quot;title&quot;: &quot;test&quot;, &quot;describe&quot;: &quot;test&quot; &#125;, &#123; &quot;img_url&quot;: &quot;https://i.loli.net/2020/10/05/4acvniMKTx8euqp.jpg&quot;, &quot;title&quot;: &quot;test&quot;, &quot;describe&quot;: &quot;test&quot; &#125;] &#125;] galleries.ejs &lt;!-- 加密功能 --&gt; &lt;% if (theme.PhotoVerifyPassword.enable) &#123; %&gt; &lt;script src=&quot;&lt;%- theme.libs.js.crypto %&gt;&quot;&gt;&lt;/script&gt; &lt;script&gt; (function() &#123; let pwd = &#39;&lt;%- page.password %&gt;&#39;; if (pwd &amp;&amp; pwd.length &gt; 0) &#123; if (pwd !== CryptoJS.SHA256(prompt(&#39;&lt;%- theme.PhotoVerifyPassword.promptMessage %&gt;&#39;)).toString(CryptoJS.enc.Hex)) &#123; alert(&#39;&lt;%- theme.PhotoVerifyPassword.errorMessage %&gt;&#39;); location.href = &#39;&lt;%- url_for(&quot;/&quot;) %&gt;&#39;; &#125; &#125; &#125;)(); &lt;/script&gt; &lt;% &#125; %&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- theme.libs.css.baguetteBoxCss %&gt;&quot;&gt; &lt;!-- 该主题自带的lightGallery.js在图片多的时候会很卡，所以弃用，使用了一个我在网上找的baguetteBox，很轻量级，就是功能少了点 --&gt; &lt;script src=&quot;&lt;%- theme.libs.js.baguetteBoxJs %&gt;&quot;&gt;&lt;/script&gt; &lt;style&gt; .my-gallery .photo img &#123; transition: all 0.6s ease-in-out; &#125; .my-gallery .photo:hover img &#123; opacity: 0.6; transform: scale(1.05); &#125; .my-gallery &#123; margin: 20px auto; &#125; .miaoshus .title &#123; font-family: MV Boli; &#125; .miaoshus &#123; padding: 20px; border: 1px dashed #e6e6e6; color: #969696; position: relative; display: inline-block; width: 75%; background: #fbfbfb50; border-radius: 10px; font-size: 16px; margin: 24px auto 12px; &#125; body.dark .miaoshus &#123; background: 0 0; border: 1px dashed #888; &#125; body &#123; overflow: visible!important; &#125; .box &#123; position: relative; &#125; .box img &#123; width: 350px; vertical-align: top; padding: 8px; border-radius: 10px; transition: all 0.5s; &#125; .box img:hover &#123; transform: scale(1.05); &#125; .page-footer &#123; display: none &#125; body &#123; overflow-y: visible!important; &#125; header &#123; background-color: #000; &#125; .biaotiss &#123; font-family: MV Boli; &#125; @media only screen and (max-width: 1058px) &#123; .box &#123; margin-left: 145px; &#125; &#125; @media only screen and (max-width: 770px) &#123; .box &#123; margin-left: 15px; &#125; &#125; @media only screen and (max-width: 500px) &#123; #previous-button, #next-button &#123; display: none; &#125; &#125; @media only screen and (max-width: 380px) &#123; .box &#123; margin-left: -5px; &#125; &#125; @media only screen and (max-width: 323px) &#123; .box img &#123; width: 296px; left: 0; &#125; &#125; &lt;/style&gt; &lt;div class=&quot;tag-title center-align&quot;&gt; &lt;div class=&quot;miaoshus&quot;&gt; &lt;div class=&quot;title center-align&quot;&gt; “ &lt;% if (is_home() &amp;&amp; config.subtitle &amp;&amp; config.subtitle.length &gt; 0) &#123; %&gt; &lt;%= config.subtitle %&gt; &lt;% &#125; else &#123; %&gt; &lt;%= page.title %&gt; &lt;% &#125; %&gt; ” &lt;/div&gt; “ &lt;%- theme.gallery.title %&gt; ” “ 这里有光影流年，还有两朵穿衣裳的云，相拥在明天的河岸。” &lt;/div&gt; &lt;/div&gt; &lt;!-- 相册 --&gt; &lt;section class=&quot;gallery&quot;&gt; &lt;div id=&quot;myGallery&quot; class=&quot;my-gallery&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;box&quot;&gt; &lt;% if (site.data &amp;&amp; site.data.gallery) &#123; %&gt; &lt;% var galleries = site.data.gallery; var pageTitle = page.title; function getCurrentGallery(galleries, pageTitle) &#123; for (let i = 0; i &lt; galleries.length; i++) &#123; if (galleries[i][&#39;name&#39;] == pageTitle) &#123; return galleries[i]; &#125; &#125; &#125; var currentGallery = getCurrentGallery(galleries, pageTitle); var photos = currentGallery.album; %&gt; &lt;% for (var i = 0, len = photos.length; i &lt; len; i++) &#123; %&gt; &lt;% var my_album = photos[i]; %&gt; &lt;a href=&quot;&lt;%- my_album.img_url %&gt;&quot; data-caption=&quot;&lt;%- my_album.title %&gt;&quot;&gt; &lt;img class=&quot;mat&quot; src=&quot;/medias/loading.svg&quot; data-src=&quot;&lt;%- my_album.img_url %&gt;&quot; alt=&quot;img&quot;+&lt;%- i %&gt; &gt; &lt;/a&gt; &lt;% &#125; %&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;script&gt; $(function () &#123; // 获取图片的宽度(200px) let imgWidth = $(&#39;.mat&#39;).outerWidth(); // 200 waterfallHandler(); // 瀑布流处理 function waterfallHandler() &#123; // 获取图片的列数 let column = parseInt($(window).width() / imgWidth); // 高度数组 let heightArr = []; for(let i=0; i&lt;column; i++) &#123; heightArr[i] = 0; &#125; // 遍历所有图片进行定位处理 $.each($(&#39;.mat&#39;), function (index, item) &#123; // 当前元素的高度 let itemHeight = $(item).outerHeight(); // 高度数组最小的高度 let minHeight = Math.min(...heightArr); // 高度数组最小的高度的索引 let minIndex = heightArr.indexOf(minHeight); $(item).css(&#123; position: &#39;absolute&#39;, top: minHeight + &#39;px&#39;, left: minIndex * imgWidth + &#39;px&#39; &#125;); heightArr[minIndex] += itemHeight; &#125;); &#125; // 窗口大小改变 $(window).resize(function () &#123; waterfallHandler(); &#125;); &#125;); &lt;/script&gt; &lt;script&gt; baguetteBox.run(&#39;.gallery&#39;, &#123; // 配置参数 buttons:Boolean,//是否显示导航按钮。 noScrollbars:true,//是否在显示时隐藏滚动条。 titleTag:true,//是否使用图片上的title属性作为图片标题 async:false,//是否异步加载文件。 &#125;); start() $(window).on(&#39;scroll&#39;, function()&#123; start(); &#125;) function start()&#123; //.not(&#39;[data-isLoaded]&#39;)选中已加载的图片不需要重新加载 $(&#39;.gallery img&#39;).not(&#39;[data-isLoaded]&#39;).each(function()&#123; var $node = $(this) if( isShow($node) )&#123; loadImg($node); &#125; &#125;); &#125; //判断一个元素是不是出现在窗口(视野) function isShow($node)&#123; return $node.offset().top &lt;= $(window).height() + $(window).scrollTop(); &#125; //加载图片 function loadImg($img)&#123; //.attr(值) //.attr(属性名称,值) $img.attr(&#39;src&#39;, $img.attr(&#39;data-src&#39;)); //把data-src的值 赋值给src $img.attr(&#39;data-isLoaded&#39;, 1);//已加载的图片做标记 &#125; &lt;/script&gt; 3.增加具体的相册图片博客目录/source/_data/位置下(如果没有_data文件夹创建) 3.1创建gallery.json文件，其内容为:[&#123; &quot;name&quot;: &quot;test&quot;, &quot;cover&quot;: &quot;https://i.loli.net/2020/10/05/kBcvAf7INgMLaem.jpg&quot;, &quot;date&quot;: &quot;2017-10&quot;, &quot;description&quot;: &quot;test&quot;, &quot;url_name&quot;: &quot;test&quot;, &quot;album&quot;: [&#123; &quot;img_url&quot;: &quot;https://i.loli.net/2020/10/05/qtOevHpw5XImS1J.jpg&quot;, &quot;title&quot;: &quot;test&quot;, &quot;describe&quot;: &quot;test&quot; &#125;, &#123; &quot;img_url&quot;: &quot;https://i.loli.net/2020/10/05/4acvniMKTx8euqp.jpg&quot;, &quot;title&quot;: &quot;test&quot;, &quot;describe&quot;: &quot;test&quot; &#125;, &#123; &quot;img_url&quot;: &quot;https://i.loli.net/2020/10/05/4acvniMKTx8euqp.jpg&quot;, &quot;title&quot;: &quot;test&quot;, &quot;describe&quot;: &quot;test&quot; &#125;] &#125;] 注:到目前位置检查一下 我们之后如果要新加自己的相册，名称也要统一1.json文件中新加 2.创相册详情文件夹 3.修改index的title 4.主页面导航菜单增加相册博客目录/themes/sakura/_config.yml 4.1增加导航 清单: &#123; path: javascript:;, fa: fa-list-ul faa-vertical, submenus: &#123; 书单: &#123;path: /books/, fa: fa-th-list faa-bounce &#125;, 番组: &#123;path: /bangumi/, fa: fa-film faa-vertical &#125;, 歌单: &#123;path: /music/, fa: fa-headphones &#125;, 电影: &#123;path: /movies/, fa: fa-video-camera &#125;, 游戏: &#123;path: /games/, fa: fa-gamepad &#125;, 图集: &#123;path: /gallery/, fa: fa-photo &#125;, 4.2增加相册配置# 增加了相册页面 gallery: title: 光影流年 #标题 icon: fa #这个显示相册页面的图标 icon2: fa #这个显示自己的具体相册里面的相册的图标 PhotoVerifyPassword: enable: true promptMessage: 该相册已加密，请输入密码访问 errorMessage: 密码错误，将返回主页！","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"回溯算法刷题整理总结","slug":"回溯算法刷题整理总结","date":"2021-01-20T03:07:57.000Z","updated":"2022-12-05T05:59:20.343Z","comments":true,"path":"2021/01/20/回溯算法刷题整理总结/","link":"","permalink":"http://linxuesong.github.io/2021/01/20/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/","excerpt":"","text":"一、回溯算法理解本质是以深度遍历的方式遍历决策树 但因为没有具体的TreeNode构成树，所以回溯与DFS遍历树很像，但不同的是回溯要多一步退回选择的操作 典型问题:全排列、N皇后问题 回溯算法的构成要素: ①选择列表 ②已选路径或已做出的选择(trace或used) ③结束条件 回溯算法的模板如下: def backTrace(已选路径, 选择列表) &#123; if(结束条件) &#123; return ; // 对于return 如果只问是否有解则返回bool即可;如果要所有的解则用全局变量数组保存所有找到的解 &#125; for 某选择:选择列表 &#123; if(不必要选择) &#123; continue; &#125; 做选择:某选择加入已选路径，下一步选择列表是否变化 backTrace(已选路径, 选择列表) 回退选择:某选择退出已选路径，回退后选择列表是否需要恢复 &#125; &#125; 回溯算法的思路如下: 画决策树，决策树节点的属性就是 选择和当前路径 我们的backTrace函数在树的各个节点游走，知道遇到结束条件","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://linxuesong.github.io/tags/%E7%AE%97%E6%B3%95/"}],"author":"linxuesong"},{"title":"主题美化增加春节、圣诞、深夜主题模式","slug":"主题美化增加春节、圣诞、深夜主题模式","date":"2021-01-12T12:58:50.000Z","updated":"2022-12-05T05:59:20.171Z","comments":true,"path":"2021/01/12/主题美化增加春节、圣诞、深夜主题模式/","link":"","permalink":"http://linxuesong.github.io/2021/01/12/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E6%98%A5%E8%8A%82%E3%80%81%E5%9C%A3%E8%AF%9E%E3%80%81%E6%B7%B1%E5%A4%9C%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"0.设计原理①给一系列的css属性起名字如dark表示黑夜，默认为失效不显示②页面上增加左侧主题切换按钮,按钮处理逻辑为将所有dark对应的css属性启用，并设置标记位 1.增加主题切换按钮及其js处理逻辑位置:themes/sakura/layout/layout.ejs 这个文件会在所有页面生效 内容如下:（ps:多了个大红灯笼的div） &lt;!-- 8.增加红灯笼按钮--&gt; &lt;!--深夜模式按钮--&gt; &lt;a onclick=&quot;switchNightMode()&quot; id=&quot;sma&quot;&gt; &lt;i class=&quot;fa fa-moon-o&quot; id=&quot;nightMode&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;!--圣诞模式按钮--&gt; &lt;script&gt; if (localStorage.getItem(&#39;themechris&#39;) === &#39;1&#39;) &#123; document.body.classList.add(&#39;themechris&#39;); &#125; else if (matchMedia(&#39;(prefers-color-scheme: themechris)&#39;).matches) &#123; document.body.classList.add(&#39;themechris&#39;); &#125; &lt;/script&gt; &lt;a onclick=&quot;switchChrisThemes()&quot; id=&quot;switchchristmas&quot;&gt; &lt;img class=&quot;theme-buttonchrismas&quot; src=&quot;https://hesifan.top/medias/christmas-img/ball.jpg&quot; title=&quot;圣诞模式&quot;&gt; &lt;/a&gt; &lt;!--春节模式按钮--&gt; &lt;script&gt; if (localStorage.getItem(&#39;themespring&#39;) === &#39;1&#39;) &#123; document.body.classList.add(&#39;themespring&#39;); &#125; else if (matchMedia(&#39;(prefers-color-scheme: themespring)&#39;).matches) &#123; document.body.classList.add(&#39;themespring&#39;); &#125; &lt;/script&gt; &lt;div onclick=&quot;switchSpringThemes()&quot; id=&quot;switchspring&quot;&gt; &lt;img class=&quot;theme-button&quot; src=&quot;https://hesifan.top/medias/spring-img/denglong.png&quot; title=&quot;春节模式&quot;&gt; &lt;/div&gt; &lt;!--春节主题的大红灯笼--&gt; &lt;div class=&quot;denglong&quot;&gt; &lt;div class=&quot;deng-box&quot;&gt; &lt;div class=&quot;deng&quot;&gt; &lt;div class=&quot;xian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;deng-a&quot;&gt; &lt;div class=&quot;deng-b&quot;&gt;&lt;div class=&quot;deng-t&quot;&gt;喜迎&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;shui shui-a&quot;&gt;&lt;div class=&quot;shui-c&quot;&gt;&lt;/div&gt;&lt;div class=&quot;shui-b&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;deng-box1&quot;&gt; &lt;div class=&quot;deng&quot;&gt; &lt;div class=&quot;xian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;deng-a&quot;&gt; &lt;div class=&quot;deng-b&quot;&gt;&lt;div class=&quot;deng-t&quot;&gt;元旦&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;shui shui-a&quot;&gt;&lt;div class=&quot;shui-c&quot;&gt;&lt;/div&gt;&lt;div class=&quot;shui-b&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--春节主题大红灯笼--&gt; &lt;script&gt; // 切换深色模式JS function switchNightMode() &#123; var body = document.body; if(body.classList.contains(&#39;dark&#39;))&#123; document.body.classList.remove(&#39;dark&#39;); localStorage.setItem(&#39;dark&#39;,&#39;0&#39;); $(&#39;#nightMode&#39;).removeClass(&quot;fa-lightbulb-o&quot;).addClass(&quot;fa-moon-o&quot;); return; &#125; else &#123; document.body.classList.add(&#39;dark&#39;); localStorage.setItem(&#39;dark&#39;,&#39;1&#39;); $(&#39;#nightMode&#39;).removeClass(&quot;fa-moon-o&quot;).addClass(&quot;fa-lightbulb-o&quot;); return; &#125; &#125; // 中国节日按钮切换 function switchSpringThemes() &#123; var body = document.body; if(body.classList.contains(&#39;themechris&#39;))&#123; document.body.classList.remove(&#39;themechris&#39;); localStorage.setItem(&#39;themechris&#39;,&#39;0&#39;); document.body.classList.add(&#39;themespring&#39;); localStorage.setItem(&#39;themespring&#39;,&#39;1&#39;); return; &#125; if(body.classList.contains(&#39;themespring&#39;))&#123; document.body.classList.remove(&#39;themespring&#39;); localStorage.setItem(&#39;themespring&#39;,&#39;0&#39;); return; &#125; else &#123; document.body.classList.add(&#39;themespring&#39;); localStorage.setItem(&#39;themespring&#39;,&#39;1&#39;); return; &#125; &#125;; // 圣诞节按钮切换 function switchChrisThemes() &#123; var body = document.body; if(body.classList.contains(&#39;themespring&#39;))&#123; document.body.classList.remove(&#39;themespring&#39;); localStorage.setItem(&#39;themespring&#39;,&#39;0&#39;); document.body.classList.add(&#39;themechris&#39;); localStorage.setItem(&#39;themechris&#39;,&#39;1&#39;); return; &#125; if(body.classList.contains(&#39;themechris&#39;))&#123; document.body.classList.remove(&#39;themechris&#39;); localStorage.setItem(&#39;themechris&#39;,&#39;0&#39;); return; &#125; else &#123; document.body.classList.add(&#39;themechris&#39;); localStorage.setItem(&#39;themechris&#39;,&#39;1&#39;); return; &#125; &#125;; &lt;/script&gt; 2.增加对应主题的css样式和按钮的css样式位置:thems/sakura/source/css/style.css 内容如下: /*节日切换按钮*/ /* 深色模式按钮设置 */ #sma &#123; background: #000; width: 38px; height: 38px; display: block; position: fixed; border-radius: 50%; right: 15px; bottom: 250px; padding-top: 15px; margin-bottom: 0; z-index: 998; cursor: pointer; &#125; #sma .fa-moon-o &#123; position: absolute; right: 8px; bottom: 8px; font-size: 1.48rem!important; &#125; #sma .fa-lightbulb-o &#123; position: absolute; right: 12px; bottom: 3px; font-size: 1.8rem!important; .fa-moon-o:before &#123; content: &quot;\\f186&quot;; &#125; .fa-comments:before &#123; content: &quot;\\f086&quot;; &#125; /*深夜模式按钮样式结束*/ /*圣诞、春节按钮*/ #switchspring &#123; background: #dc8f03; width: 38px; height: 38px; display: block; position: fixed; border-radius: 50%; right: 15px; bottom: 295px; padding-top: 15px; margin-bottom: 0; z-index: 998; cursor: pointer; &#125; #switchchristmas &#123; background: #FFF; width: 38px; height: 38px; display: block; position: fixed; border-radius: 50%; right: 15px; bottom: 340px; padding-top: 15px; margin-bottom: 0; z-index: 998; cursor: pointer; &#125; .theme-button &#123; width: 38px; height: 38px; border-radius: 50%; position: absolute; bottom: 0px; &#125; .theme-buttonchrismas &#123; width: 38px; height: 38px; border-radius: 50%; position: absolute; bottom: 0px; right: 1.7px &#125; /*圣诞、春节按钮样式结束*/ /*深夜模式背景样式*/ /*字体变灰白*/ body.dark .fas, body.dark .title, body.dark .row .text, body.dark article .article-content .summary, body.dark .card .card-image .card-title, body.dark .fa-moon-o:before, body.dark .fa-lightbulb-o:before, body.dark article .article-tags .chip, body.dark .chip-container .tag-title, body.dark div.jqcloud a, body.dark .friends-container .tag-title, body.dark .frind-ship .title h1, body.dark .card .card-content p, body.dark .card .card-content .dss, body.dark .v[data-class=v] .vcount, body.dark .v[data-class=v] .vcount .vnum, body.dark pre code, body.dark h1, body.dark h2, body.dark h3, body.dark h4, body.dark h5, body.dark h6, body.dark li, body.dark p, body.dark header .side-nav .mobile-head .logo-name, body.dark header .side-nav .mobile-head .logo-desc, body.dark header .side-nav .menu-list a, body.dark .bg-cover .post-title, body.dark a &#123; color: rgba(255, 255, 255, 0.6); &#125; /* 背景颜色变灰色 */ body.dark .card, body.dark .block-with-text:after &#123; background-color: #282c34; &#125; /* 背景颜色变黑色 */ body.dark, body.dark .v[data-class=v] .vcount, body.dark #rewardModal .modal-content, body.dark .modal, body.dark header .side-nav, body.dark header .side-nav .menu-list .m-nav-show &#123; background-color: #12121c; &#125; /* 改变透明度*/ body.dark .aplayer&#123;background: #2f3742!important;&#125; body.dark img, body.dark strong &#123; filter: brightness(.7); &#125; /*深夜模式背景样式结束*/* /*春节模式*/ /*èŠ‚æ—¥ä¸»é¢˜ æŒ‚ä»¶åŠçº¿*/ /*æ˜¥èŠ‚*/ .caishenxianleft &#123; left: 16%!important; position: absolute; top: 0px; width: 2px; height: 20px; background: #dc8f03; transform-origin: 50% -100px; animation: swing 3.5s infinite ease-in-out; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .caishenxian &#123; position: absolute; top: 0px; right: 20%; width: 2px; height: 20px; background: #dc8f03; transform-origin: 50% -100px; animation: swing 3.5s infinite ease-in-out; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .guguxian &#123; position: absolute; top: 0px; left: 20%; width: 2px; height: 20px; background: #dc8f03; transform-origin: 50% -100px; animation: swing 3.5s infinite ease-in-out; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .wenzhangxian &#123; left: 50%!important; z-index: 998; &#125; /*春节主题 挂绳吊线*/ .caishenxianleftsd &#123; left: 16%!important; position: absolute; top: 0px; width: 2px; height: 20px; background:#5be4db; transform-origin: 50% -100px; animation: swing 3.5s infinite ease-in-out; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .caishenxiansd &#123; position: absolute; top: 0px; right: 20%; width: 2px; height: 20px; background:#5be4db; transform-origin: 50% -100px; animation: swing 3.5s infinite ease-in-out; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .guguxiansd &#123; position: absolute; top: 0px; left: 20%; width: 2px; height: 20px; background: #5be4db; transform-origin: 50% -100px; animation: swing 3.5s infinite ease-in-out; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .wenzhangxiansd &#123; left: 50%!important; z-index: 998; &#125; /*春节主题 挂件*/ .fudai &#123; top: 14px!important; left: -22px!important; &#125; .caishenpic &#123; width: 48px; height: 48px; max-width: 48px; //这个参数是为了覆盖763\\963行的img css样式 border-radius: 50%; position: absolute; top: 12px; right: -22px; z-index: 9; /* transform-origin: 50% -100px; */ animation: swing 3.5s infinite ease-in-out; /* -webkit-transform-origin: 50% -100px; */ -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .lala &#123; width: 32px!important; height: 32px!important; opacity: 1!important; left: -4px!important; top: 14px!important; &#125; .chunp &#123; width: 216px!important; height: 96px!important; left: -80px!important; top: 6px!important; &#125; .fudao &#123; width: 38px; height: 38px; top: 18px!important; left: -19px!important; &#125; .lions &#123; width: 32px!important; height: 32px!important; opacity: 1!important; left: -15px!important; top: 14px!important; &#125; .fenleiss &#123; position: absolute; top: -64px; left: 20%; width: 2px; height: 20px; background: #dc8f03; transform-origin: 50% -100px; animation: swing 3.5s infinite ease-in-out; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3.5s infinite ease-in-out; &#125; .gugus &#123; width: 32px!important; height: 32px!important; opacity: 1!important; left: -15px!important; top: 9px!important; &#125; .huadengpic &#123; width: 40px!important; height: 40px!important; opacity: 1!important; left: -18px!important; top: 9px!important; &#125; .shanzipic &#123; width: 40px!important; height: 40px!important; opacity: 1!important; left: -18px!important; top: 18px!important; &#125; /*圣诞小挂件图片*/ .caishenpicsd &#123; width: 48px; height: 48px; max-width: 48px; // 用于覆盖763\\963等行的img css样式 border-radius: 50%; position: absolute; top: 12px; right: -22px; z-index: 9; /* transform-origin: 50% -100px; */ animation: swing 3.5s infinite ease-in-out; /* -webkit-transform-origin: 50% -100px; */ -webkit-animation: swing 3.5s infinite ease-in-out; &#125; /*ä¸»é¢˜ å¸½å­*/ .labelmz &#123; width: 34px; height: 34px; top: 7px; right: -84px; transform: rotate(40deg); position: absolute; z-index: 99; -webkit-transform-origin: 50% -100px; -webkit-animation: mzanimate 5s infinite ease-in-out; &#125; .weilemz &#123; position: relative; &#125; .friendmz &#123; width: 50px!important; height: 50px!important; position: absolute; top: 8px; right: -90px; transform: rotate(44deg); position: absolute; z-index: 99; -webkit-transform-origin: 50% -100px; -webkit-animation: mzanimate 1.2s infinite ease-in-out; &#125; .xiaomaozitx &#123; width: 60px; height: 60px; position: absolute; top: -127px; right: 25%; transform: rotate(40deg); position: absolute; z-index: 99; -webkit-animation: mzanimate 1.2s infinite ease-in-out; &#125; .labelmzsd &#123; width: 34px; height: 34px; top: 10px; right: -95px; transform: rotate(40deg); position: absolute; z-index: 99; -webkit-transform-origin: 50% -100px; -webkit-animation: mzanimate 5s infinite ease-in-out; &#125; /* 点击显示或隐藏总样式开始 */ .caishendeng, .xiaomaozitx, .labelmz, .friendmz, .caishendengsd, .labelmzsd &#123; display: none; &#125; body.themespring .caishendeng, body.themespring .xiaomaozitx, body.themespring .labelmz, body.themespring .friendmz, body.themechris .caishendengsd, body.themechris .labelmzsd &#123; display: block; &#125; /* 点击显示或隐藏总样式结束 */ .toupic &#123; position: relative; &#125; .denglong &#123; display: none; &#125; body.themespring .denglong &#123; display: block; &#125; @media only screen and (min-width: 1124px) &#123; .nav-menu &#123; padding-right: 0px; &#125; body.themespring .nav-menu &#123; padding-right: 96px; &#125; &#125; @media only screen and (max-width: 760px) &#123; .denglong .deng-box ,.denglong .deng-box1&#123; display: none; &#125; body.themespring .right &#123; float: left!important; &#125; &#125; @media only screen and (min-width: 768px) and (max-width: 1024px) &#123; .right &#123; float: left!important; &#125; &#125; /*æ˜¥èŠ‚ä¸»é¢˜ ç¯ç¬¼*/ .deng-box &#123; position: fixed; top: -40px; right: -20px; z-index: 999; &#125; .deng-box1 &#123; position: fixed; top: -30px; right: 10px; z-index: 999; &#125; .deng-box1 .deng &#123; position: relative; width: 120px; height: 90px; margin: 50px; background: #d8000f; background: rgba(216, 0, 15, 0.8); border-radius: 50% 50%; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 5s infinite ease-in-out; box-shadow: -5px 5px 30px 4px rgba(252, 144, 61, 1); &#125; .deng &#123; position: relative; width: 120px; height: 90px; margin: 50px; background: #d8000f; background: rgba(216, 0, 15, 0.8); border-radius: 50% 50%; -webkit-transform-origin: 50% -100px; -webkit-animation: swing 3s infinite ease-in-out; box-shadow: -5px 5px 50px 4px rgba(250, 108, 0, 1); &#125; .deng-a &#123; width: 100px; height: 90px; background: #d8000f; background: rgba(216, 0, 15, 0.1); margin: 12px 8px 8px 10px; border-radius: 50% 50%; border: 2px solid #dc8f03; &#125; .deng-b &#123; width: 45px; height: 90px; background: #d8000f; background: rgba(216, 0, 15, 0.1); margin: -4px 8px 8px 26px; border-radius: 50% 50%; border: 2px solid #dc8f03; &#125; .xian &#123; position: absolute; top: -20px; left: 60px; width: 2px; height: 20px; background: #dc8f03; &#125; .shui-a &#123; position: relative; width: 5px; height: 20px; margin: -5px 0 0 59px; -webkit-animation: swing 4s infinite ease-in-out; -webkit-transform-origin: 50% -45px; background: #ffa500; border-radius: 0 0 5px 5px; &#125; .shui-b &#123; position: absolute; top: 14px; left: -2px; width: 10px; height: 10px; background: #dc8f03; border-radius: 50%; &#125; .shui-c &#123; position: absolute; top: 18px; left: -2px; width: 10px; height: 35px; background: #ffa500; border-radius: 0 0 0 5px; &#125; .deng:before &#123; position: absolute; top: -7px; left: 29px; height: 12px; width: 60px; content: &quot; &quot;; display: block; z-index: 999; border-radius: 5px 5px 0 0; border: solid 1px #dc8f03; background: #ffa500; background: linear-gradient(to right, #dc8f03, #ffa500, #dc8f03, #ffa500, #dc8f03); &#125; .deng:after &#123; position: absolute; bottom: -7px; left: 10px; height: 12px; width: 60px; content: &quot; &quot;; display: block; margin-left: 20px; border-radius: 0 0 5px 5px; border: solid 1px #dc8f03; background: #ffa500; background: linear-gradient(to right, #dc8f03, #ffa500, #dc8f03, #ffa500, #dc8f03); &#125; .deng-t &#123; font-family: åŽæ–‡è¡Œæ¥·; font-size: 26px; color: #dc8f03; font-weight: bold; line-height: 44px; text-align: center; &#125; .night .deng-t, .night .deng-box, .night .deng-box1 &#123; background: transparent !important; &#125; @-moz-keyframes swing &#123; 0% &#123; -moz-transform: rotate(-10deg) &#125; 50% &#123; -moz-transform: rotate(10deg) &#125; 100% &#123; -moz-transform: rotate(-10deg) &#125; &#125; @-webkit-keyframes swing &#123; 0% &#123; -webkit-transform: rotate(-10deg) &#125; 50% &#123; -webkit-transform: rotate(10deg) &#125; 100% &#123; -webkit-transform: rotate(-10deg) &#125; &#125; /*春节模式结束*/ 3.在需要的位置加上挂件当我们点击切换按钮时就会显示对应模式下的挂件,//挂件图片可自己替换 挂件示例: &lt;!--可以在你想要展示小挂件的地方加上这个挂件，还没有完善等之后再进行吧--&gt; &lt;!--圣诞主题小挂件--&gt; &lt;div class=&quot;caishendengsd&quot;&gt; &lt;div class=&quot;caishenxiansd&quot;&gt; &lt;img class=&quot;caishenpicsd&quot; src=&quot;https://hesifan.top/medias/christmas-img/2.png&quot;&gt; &lt;/div&gt; \u0003 &lt;/div&gt; &lt;!-圣诞主题小挂件结束--&gt; &lt;!--春节主题小挂件--&gt; &lt;div class=&quot;caishendeng&quot;&gt; &lt;div class=&quot;caishenxianleft&quot;&gt; &lt;img class=&quot;caishenpic fudai&quot; src=&quot;https://hesifan.top/medias/spring-img/3.png&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-春节主题小挂件结束--&gt; 4.预览效果","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"博客美化增加任务清单页面","slug":"博客美化增加任务清单页面","date":"2021-01-11T12:04:09.000Z","updated":"2022-12-05T05:59:20.296Z","comments":true,"path":"2021/01/11/博客美化增加任务清单页面/","link":"","permalink":"http://linxuesong.github.io/2021/01/11/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"参考链接:https://nekodeng.gitee.io/posts/todolist-page.html#toc-heading-1 1.新建todolist页面hexo new page &quot;todolist&quot; 2.配置该页面跳过渲染这次添加的页面是一个html页面，需要配置跳过渲染后不会使用主题的layout对网页进行渲染 在主站的配置文件的skip:render种配置 skip_render: - &quot;todolist/**&quot; 3.修改todolist界面博客目录下/source/todolist/index.md 改为index.html， 文件内容如下: &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; body&#123; margin:0;background-color:#fafafa;font:14px &#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif&#125; h2&#123;margin:0;font-size:12px&#125; a&#123;color:#000;text-decoration:none&#125; input&#123;outline:0&#125; button&#123;margin:0;padding:0;border:0;background:0;font-size:100%;vertical-align:baseline;font-family:inherit;font-weight:inherit;color:inherit;outline:0&#125; ul&#123;padding:0;margin:0;list-style:none&#125; .page-top&#123;width:100%;height:40px;background-color:#db4c3f&#125; .page-content&#123;width:50%;margin:0 auto&#125; .page-content h2&#123;line-height:40px;font-size:18px;color:#fff&#125; .main&#123;width:50%;margin:0 auto;box-sizing:border-box&#125; .task-input&#123;width:99%;height:30px;outline:0;border:1px solid #ccc&#125; .task-count&#123;display:flex;margin:10px 0&#125; .task-count li&#123;padding-left:10px;flex:1;color:#dd4b39&#125; .task-count li:nth-child(1)&#123;padding:5px 0 0 10px&#125; .action&#123;text-align:center;display:flex&#125; .action a&#123;margin:0 10px;flex:1;padding:5px 0;color:#777&#125; .action a:nth-child(3)&#123;margin-right:0&#125; .active&#123;border-bottom: 2px solid #629A9C&#125; .tasks&#123;background-color:#fff&#125;.no-task-tip&#123;padding:10px 0 10px 10px;display:block;border-bottom:1px solid #ededed;color:#777&#125;.big-title&#123;color:#222&#125;.todo-list&#123;margin:0;padding:0;list-style:none&#125; .todo-list li&#123; position:relative; font-size:16px; border-left: 5px solid #629A9C; box-shadow: 0 1px 2px rgba(0,0,0,0.07); margin-bottom: 16px; &#125; .todo-list li:hover&#123;background-color:#fafafa&#125; .todo-list li.editing&#123;border-bottom:0;padding:0;&#125; .todo-list li.editing .edit&#123;display:block;padding:13px 17px 12px 17px;margin:0 0 0 43px&#125; .todo-list li.editing .view&#123;display:none&#125; .toggle&#123; text-align:center; width:16px; height:16px; position:absolute; top:2px; left: 15px; bottom:0; margin:auto 0; cursor: pointer; &#125; .todo-list li label&#123; white-space:pre-line; word-break:break-all; padding:15px 60px 15px 15px; margin-left:45px; display:block; line-height:1.2; transition:color .4s &#125; .todo-list li.completed label&#123; color:#d9d9d9; text-decoration:line-through &#125; .todo-list li .destroy&#123; display:none; text-align:center; width:16px; height:16px; position:absolute; top:0; right:15px; bottom:10px; margin:auto 0; cursor: pointer; font-size:28px; color:#cc9a9a; transition:color .2s ease-out &#125; .todo-list li .destroy:hover&#123;color:#af5b5e&#125; .todo-list li .destroy:after&#123;content:&#39;×&#39;&#125; .todo-list li:hover .destroy&#123;display:block&#125; .todo-list li .edit&#123;display:none&#125; .todo-list li.editing:last-child&#123;margin-bottom:-1px&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;page-top&quot;&gt; &lt;div class=&quot;page-content&quot;&gt; &lt;h2&gt;任务计划列表&lt;/h2&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;main&quot;&gt; &lt;h3 class=&quot;big-title&quot;&gt;添加任务：&lt;/h3&gt; &lt;input placeholder=&quot;例如：吃饭睡觉打豆豆； 提示：回车即可添加任务，双击列表标题即可编辑&quot; class=&quot;task-input&quot; type=&quot;text&quot; v-on:keyup.enter=&quot;enterFn&quot; v-model=&quot;todo&quot; /&gt; &lt;ul class=&quot;task-count&quot;&gt; &lt;li&gt;&#123;&#123;unComplete&#125;&#125;个任务未完成&lt;/li&gt; &lt;li class=&quot;action&quot;&gt; &lt;a :class=&quot;&#123;active:visibility!==&#39;unCompleted&#39;&amp;&amp;visibility!==&#39;completed&#39;&#125;&quot; href=&quot;#all&quot;&gt;所有任务&lt;/a&gt; &lt;a :class=&quot;&#123;active:visibility===&#39;unCompleted&#39;&#125;&quot; href=&quot;#unCompleted&quot;&gt;未完成的任务&lt;/a&gt; &lt;a :class=&quot;&#123;active:visibility===&#39;completed&#39;&#125;&quot; href=&quot;#completed&quot;&gt;完成的任务&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 class=&quot;big-title&quot;&gt;任务列表：&lt;/h3&gt; &lt;div class=&quot;tasks&quot;&gt; &lt;span class=&quot;no-task-tip&quot; v-show=&quot;!list.length&quot;&gt;还没有添加任何任务&lt;/span&gt; &lt;ul class=&quot;todo-list&quot; v-show=&quot;list.length&quot;&gt; &lt;li class=&quot;todo&quot; v-for=&quot;item in filterData&quot; v-bind:class=&quot;&#123;completed:item.isComplete,editing:item===edtorTodos&#125;&quot; &gt; &lt;div class=&quot;view&quot;&gt; &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; v-model=&quot;item.isComplete&quot; /&gt; &lt;label @dblclick=&quot;edtorTodo(item)&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/label&gt; &lt;button class=&quot;destroy&quot; @click=&quot;delFn(item)&quot; &gt;&lt;/button&gt; &lt;/div&gt; &lt;input class=&quot;edit&quot; type=&quot;text&quot; v-focus=&quot;edtorTodos===item&quot; v-model=&quot;item.title&quot; @blur=&quot;edtoEnd(item)&quot; @keyup.enter=&quot;edtoEnd(item)&quot; @keyup.esc=&quot;cancelEdit(item)&quot; /&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; //存取localStorage中的数据 var store = &#123; save(key,value)&#123; window.localStorage.setItem(key,JSON.stringify(value)); &#125;, fetch(key)&#123; return JSON.parse(window.localStorage.getItem(key))||[]; &#125; &#125; //list取出所有的值 var list = store.fetch(&quot;storeData&quot;); var vm = new Vue(&#123; el:&quot;.main&quot;, data:&#123; list, todo:&#39;&#39;, edtorTodos:&#39;&#39;,//记录正在编辑的数据, beforeTitle:&quot;&quot;,//记录正在编辑的数据的title visibility:&quot;all&quot;//通过这个属性值的变化对数据进行筛选 &#125;, watch:&#123; //下面的这种方法是浅监控 /*list:function()&#123;//监控list这个属性，当这个属性对应的值发生变化就会执行函数 store.save(&quot;storeData&quot;,this.list); &#125;*/ //下面的是深度监控 list:&#123; handler:function()&#123; store.save(&quot;storeData&quot;,this.list); &#125;, deep:true &#125; &#125;, methods:&#123; enterFn(ev)&#123;//添加任务 //向list中添加一项任务 //事件处理函数中的this指向的是当前这个根实例 if(this.todo==&quot;&quot;)&#123;return;&#125; this.list.push(&#123; title:this.todo, isComplete:false &#125;); this.todo = &quot;&quot;; &#125;, delFn(item)&#123;//删除任务 var index = this.list.indexOf(item); this.list.splice(index,1) &#125;, edtorTodo(item)&#123;//编辑任务 //编辑任务的时候记录编辑之前的值 this.beforeTitle = item.title; this.edtorTodos = item; &#125;, edtoEnd(item)&#123;//编辑完成 this.edtorTodos=&quot;&quot;; // this.cancelEdit = this.edtorTodos; &#125;, cancelEdit(item)&#123;//取消编辑 item.title = this.beforeTitle; this.beforeTitle = &#39;&#39;; this.edtorTodos=&#39;&#39;; &#125; &#125;, directives:&#123; &quot;focus&quot;:&#123; update(el,binding)&#123; if(binding.value)&#123; el.focus(); &#125; &#125; &#125; &#125;, computed:&#123; unComplete()&#123; return this.list.filter(item=&gt;&#123; return !item.isComplete &#125;).length &#125;, filterData()&#123; //过滤的时候有三种情况 all completed unCompleted var filter = &#123; all:function(list)&#123; return list; &#125;, completed:function(list)&#123; return list.filter(item=&gt;&#123; return item.isComplete; &#125;) &#125;, unCompleted:function(list)&#123; return list.filter(item=&gt;&#123; return !item.isComplete; &#125;) &#125; &#125; //如果找到了过滤函数，就返回过滤后的数据，如果没有找到就返回所有的数据 return filter[this.visibility]?filter[this.visibility](list):list; &#125; &#125; &#125;); function hashFn()&#123; var hash = window.location.hash.slice(1); vm.visibility = hash; &#125; hashFn(); window.addEventListener(&#39;hashchange&#39;,hashFn); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"Markdown语法整理","slug":"主题美化增加代码块折叠","date":"2020-12-26T12:54:07.000Z","updated":"2022-12-05T05:59:20.155Z","comments":true,"path":"2020/12/26/主题美化增加代码块折叠/","link":"","permalink":"http://linxuesong.github.io/2020/12/26/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0/","excerpt":"","text":"MarkDown快速查询转移字符公式块部分举例 $$ dp[i]= \\begin&#123;cases&#125; 计算式1 &amp;计算式条件 \\\\换行 计算式2 &amp;计算式条件 \\\\换行 \\end&#123;cases&#125; $$ 详细表格 公式块 \\begin{cases} 内容 \\end{cases} 大公式表达式 \\big[ 比较大的左中括号 \\bigg[ 再大一点 \\Big[ 比big大一点 \\Bigg[ 比bigg大一点 a_2 a下标2 a^3 a上标3 上标下标 \\sum ：∑ \\int ：∫ \\oint ：∮ \\prod：∏ 求和、求导 \\alpha： α \\beta： β \\gamma：γ \\Phi ： Φ \\Omega：Ω \\Delta： Δ \\delta： δ 希腊字母 代码块部分代码块折叠语法如下 &lt;details&gt; &lt;summary&gt;展开查看&lt;/summary&gt; &lt;pre&gt;&lt;code&gt; System.out.println(&quot;Hello&quot;); &lt;/code&gt;&lt;/pre&gt; &lt;/details&gt; 效果展示 展开查看 System.out.println(\"Hello\"); 文本部分 \\&nbsp; 或者 键盘全角模式空格键 空格 \\xxx\\ 上标 \\xxx\\ 下标 30\\&deg; 角度符号30&deg; 在该文件夹下新建4个js文件 添加相应的文件内容","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://linxuesong.github.io/tags/MarkDown/"}],"author":"linxuesong"},{"title":"主题美化添加文章阅读计数统计和网站运行事件","slug":"主题美化添加文章阅读计数统计","date":"2020-12-26T12:31:05.000Z","updated":"2022-12-05T05:59:20.202Z","comments":true,"path":"2020/12/26/主题美化添加文章阅读计数统计/","link":"","permalink":"http://linxuesong.github.io/2020/12/26/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E8%AE%A1%E6%95%B0%E7%BB%9F%E8%AE%A1/","excerpt":"","text":"在主题目录/layout/_partial/footer.ejs中\\和\\的下面之间加入如下代码 &lt;!-- 网站数据统计 --&gt; &lt;div class=&quot;footer-device&quot;&gt; &lt;p style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt; &lt;span style=&quot;color: #ff9999;padding-left: 20px;&quot;&gt; &lt;!-- 网站运行时间统计 --&gt; &lt;i class=&quot;fa fa-clock-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;span id=&quot;time&quot; align=&quot;center&quot;&gt;载入时间中...&lt;/span&gt; &lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date(&quot;&lt;%- theme.siteBuildingTime %&gt;&quot;);//在此处修改你的建站时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125; document.getElementById(&quot;time&quot;).innerHTML = &quot;小破站在各种灾难中苟活了 &quot;+ dnum +&quot; 天 &quot;+hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;; &#125; setInterval(&quot;createtime()&quot;,250); &lt;/script&gt; &lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;footer-device&quot;&gt; &lt;p style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt; &lt;span style=&quot;color: #b9b9b9;padding-left: 20px;&quot;&gt; &lt;!-- 全网站字数统计wordcount --&gt; &lt;i class=&quot;fa fa-line-chart&quot; aria-hidden=&quot;true&quot; style=&quot;color: #ff9999;display:inline-block&quot;&gt;&lt;/i&gt; 博客全站共: &lt;span class=&quot;post-count&quot; style=&quot;color:#ff9999;&quot;&gt;&lt;%= totalcount(site) %&gt;&lt;/span&gt;字&lt;/span&gt; &lt;!-- 不蒜子网页计数器 --&gt; &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %&gt; &lt;span style=&quot;padding-left: 20px;&quot;&gt;&lt;i class=&quot;fa fa-fire&quot; aria-hidden=&quot;true&quot; style=&quot;color: #ff9999;display:inline-block&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量： &lt;span id=&quot;busuanzi_value_site_pv&quot; style=&quot;color:#ff9999;&quot;&gt;&lt;/span&gt;次&lt;/span&gt; &lt;/span&gt; &lt;% &#125; %&gt; &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %&gt; &lt;span style=&quot;padding-left: 20px;&quot;&gt;&lt;i class=&quot;fa fa-user&quot; aria-hidden=&quot;true&quot; style=&quot;color: #ff9999;display:inline-block&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访问人数： &lt;span id=&quot;busuanzi_value_site_uv&quot; style=&quot;color:#ff9999;&quot;&gt;&lt;/span&gt;人&lt;/span&gt; &lt;/span&gt; &lt;% &#125; %&gt; &lt;/span&gt; &lt;/p&gt; &lt;/div&gt;","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"C++读取文件到内存中流程含示例","slug":"C-读取文件到内存中流程含示例","date":"2020-12-26T02:26:53.000Z","updated":"2022-12-05T05:59:19.291Z","comments":true,"path":"2020/12/26/C-读取文件到内存中流程含示例/","link":"","permalink":"http://linxuesong.github.io/2020/12/26/C-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%88%B0%E5%86%85%E5%AD%98%E4%B8%AD%E6%B5%81%E7%A8%8B%E5%90%AB%E7%A4%BA%E4%BE%8B/","excerpt":"","text":"一、示例说明程序输入为种子用户ID数据集合，每一行包括用户ID和256维用户特征，用户特征数据类型为浮点型数据（存在部分数据用科学计数法表示的情况，比如1.4283673760891302E-4），所有数据分隔符为逗号，ID处于第1个位置，其它256维特征按照顺序处于2-257个位置。其中1-128维为连续性特征，数据都大于等于0小于等于1，余下129-256维为分类型特征经过one-hot处理过后的稀疏数据，数据都为0或者1。如下格式：ID0001,0.1,0,0.56,…,0,1 保存变量的结构体如下： typedef struct User&#123; string id; float fv[128]; int iv[128]; &#125;; 计划读取文件每一行记录一个User变量的成员，元素1为id，元素2~129为fv,元素130~257为iv 二、读取文件代码示例代码: #include &lt;QCoreApplication&gt; #include &lt;fstream&gt; #include &lt;sstream&gt; using namespace std; typedef struct &#123; string id; float fv[128]; int iv[128]; &#125;User; int main(int argc, char *argv[]) &#123; QCoreApplication a(argc, argv); fstream seedf(&quot;C:\\\\Users\\\\linxuesong\\\\Desktop\\\\cpp\\\\input\\\\seed.txt&quot;); vector&lt;User&gt; users; while(!seedf.eof()) &#123; string oneline; getline(seedf, oneline); User user; // 将一行按逗号分隔 stringstream ss(oneline); getline(ss, user.id, &#39;,&#39;); //先读取一个 string para; int count = 0; // 用来计数,当读取128个float后就是int了 while(getline(ss, para, &#39;,&#39;))&#123; // 读取剩下的256个 if(count &lt;= 127)&#123; user.fv[count] = stof(para); &#125;else &#123; user.iv[count-128] = stoi(para); &#125; count++; &#125; users.push_back(user); &#125; seedf.clear(); seedf.close(); return a.exec(); &#125; 三、涉及到的知识总结1.fstream作用：主要用于读写文件 定义:fstream f; 类继承关系如图: 主要方法: 函数名 参数 返回值 作用 open ( const char * filename, os_base::openmode mode = ios_base::in \\ ios_base::out )// 文件路径和打开方式,打开方式可以省略 无 以指定的方式打开文件 close 无参数 无 关闭文件 bad() bool 状态标识符，读写出错 fail() bool 状态标识符,格式错误或读写错误 eof() bool 文件到达结尾返回ture good() bool 没有出现任何错误 tellg()和tellp()* pos_type就是一个int 返回当前读出流\\写入流的get、put指针位置 seekg()和seekp()* 重载一:pos_type重载二：(off_type offset, seekdir direction) pos_type就是一个int 设置读出流\\写入流的get、put指针位置 简单示例： vector&lt;string&gt; arrs; string tmp; fstream myfile(&quot;文件路径&quot;); // 构造函数会调用open方法 if(!myfile) &#123; // fstream重载了!感叹号操作符，fstream对象会返回true或fasle,也可以用!file.good()判断 cout &lt;&lt; &quot;文件打开失败&quot;; &#125; while(!myfile.eof()) &#123; // 直到遇到文件结束符 getline(myfile, tmp); // 取一行 arrs.push_back(tmp); &#125; myfile.close(); 2.getline作用: 读取输入流到内存中知道遇到指定的分隔符，默认分隔符为’\\n’所以默认时读取一整行 函数原型 /** *pram1 输入流 *pram2 接收流的内存变量地址 *pram3 分隔符\\n,会读取输入流知道遇到分割符，遇到分割符之后停止读取并把分隔符跳过 */ istream&amp; getline (istream&amp; is, string&amp; str, char delim = &#39;\\n&#39;); 简单示例 四、多线程读取大文件实现（仍旧为完善） 此方法因为文件流的偏移量为int，所以最多可以偏移4G的文件思路:大文件分隔若干份(cpu有几个核)文件块，对于每一部分以start和end作为标志seekg设置不同的读取起始位置，每个文件从不同的起始位置读，读到end 需要注意的是我们在读取变量时start可能不是正好的位置，需要对其进行处理,这里是先读取完本行到行末，得到一行结束位置 代码如下 #include &lt;QCoreApplication&gt; #include &lt;fstream&gt; #include &lt;sstream&gt; #include &lt;thread&gt; #include &lt;iostream&gt; #include &lt;math.h&gt; #include &lt;mutex&gt; using namespace std; typedef struct &#123; string id; float fv[128]; int iv[128]; &#125;User; typedef struct &#123; int start; int end; &#125;FileBlock; static vector&lt;vector&lt;User&gt;&gt; aa; mutex aa_lock; //获取文件大小 文件偏移量为int, 可以标识2的32次个字节 相当于4G int getFileSize(string filepath)&#123; fstream f(filepath); if(!f) &#123; cout &lt;&lt; &quot;打开文件失败&quot; &lt;&lt; endl; &#125; f.seekg(0, ios::end); return f.tellg(); f.close(); &#125; // 获取当前cpu的核数 / 线程处理参数为 param1文件地址 parm2读取文件的位置 param3 int getCpuCoreCnt() &#123; return thread::hardware_concurrency(); &#125; // 将文件分为cpu核心个部分,并放入到vector&lt;FileBlock&gt;中 vector&lt;FileBlock&gt; splitFile(string filepath) &#123; vector&lt;FileBlock&gt; fileBlocks; fstream f(filepath); if(!f) &#123; cout &lt;&lt; &quot;打开文件失败&quot; &lt;&lt; endl; &#125; int fsize = getFileSize(filepath); int cpu_core_cnt = getCpuCoreCnt(); int block_size = ceil(fsize/cpu_core_cnt); //向上取整，为了防止向下取整导致最后涵盖所有 int start=0,end; for(int i = 0; i &lt; cpu_core_cnt; i++) &#123; end = (i+1)*block_size; // 当访问最后一个访问块时可能会超出范围 if(end &gt;= fsize) &#123; end = fsize; fileBlocks.push_back(FileBlock&#123;start, end&#125;);//已经是最后一行了就结束吧 break; &#125; &#123; // end可能不正好在文件的一行的结尾\\n处，去下一行 f.seekg(end); string tmp; getline(f, tmp); &#125; end = (long)f.tellg()-1; fileBlocks.push_back(FileBlock&#123;start, end&#125;); start = f.tellg(); &#125; return fileBlocks; &#125; // 之后各个线程按文件的起始位置进行读取 void thread_read_file(FileBlock fb, string filepath) &#123; fstream seedf(filepath); vector&lt;User&gt; users; seedf.seekg(fb.start); while(seedf.tellg()&lt;=fb.end &amp;&amp; !seedf.eof()) &#123; string oneline; getline(seedf, oneline); User user; // 将一行按逗号分隔 stringstream ss(oneline); getline(ss, user.id, &#39;,&#39;); //先读取一个 string para; int count = 0; // 用来计数,当读取128个float后就是int了 while(getline(ss, para, &#39;,&#39;))&#123; // 读取剩下的256个 if(count &lt;= 127)&#123; user.fv[count] = stof(para); &#125;else &#123; user.iv[count-128] = stoi(para); &#125; count++; &#125; users.push_back(user); &#125; lock_guard&lt;mutex&gt; lock(aa_lock); aa.push_back(users); seedf.clear(); seedf.close(); &#125; int main(int argc, char *argv[]) &#123; QCoreApplication a(argc, argv); string filepath =&quot;C:\\\\Users\\\\linxuesong\\\\Desktop\\\\cpp\\\\input\\\\seed.txt&quot;; vector&lt;FileBlock&gt; fbs = splitFile(filepath); for(int i = 0; i&lt;getCpuCoreCnt(); i++) &#123; thread t(thread_read_file, fbs[i], filepath); t.join(); &#125; this_thread::sleep_for(std::chrono::seconds(1)); cout &lt;&lt; aa.size()&lt;&lt;endl; for (int i =0;i&lt;(int)aa.size();i++) for(int j; j&lt;(int)aa[i].size();j++) cout &lt;&lt; aa[i][j].id &lt;&lt; endl; return 0; &#125; 五、大于4G文件的读取，文件内存映射winodws下用handle创建内存映射对象","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"文件读取","slug":"文件读取","permalink":"http://linxuesong.github.io/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"},{"name":"C++","slug":"C","permalink":"http://linxuesong.github.io/tags/C/"},{"name":"多线程","slug":"多线程","permalink":"http://linxuesong.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"author":"linxuesong"},{"title":"hexo+valine搭建博客评论系统","slug":"hexo+valine搭建博客评论系统","date":"2020-12-26T02:26:53.000Z","updated":"2022-12-05T05:59:19.900Z","comments":true,"path":"2020/12/26/hexo+valine搭建博客评论系统/","link":"","permalink":"http://linxuesong.github.io/2020/12/26/hexo+valine%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"hexo+valine搭建博客评论系统1.注册LeanCloud 2.在leanCloud中创建应用 3.拿到appid和appkey 然后 进入应用-&gt;设置-&gt;应用key 拿到你的appid和appkey之后，打开主题配置文件 搜索 valine，填入appid 和 appkey 4.修改hexo博客主题目录themes/Skaura/_config.yml配置文件中的valine部分内容 # Valine valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 5.记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去 最后当我们发送一条评论后可以在leanCloud中的 存储/结构化数据/comment看到评论信息 PS:valine还可以美化评论背景样式、增加评论邮件通知等等的功能 参考博客:https://blog.csdn.net/cungudafa/article/details/104281764 PS:可以在https://en.gravatar.com/网站上注册头像呦，这样就可以在评论时显示自己邮箱绑定的头像了","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"主题","permalink":"http://linxuesong.github.io/categories/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"博客增加建站日志页面","slug":"博客增加建站日志页面","date":"2020-12-22T03:16:18.000Z","updated":"2022-12-05T05:59:20.296Z","comments":true,"path":"2020/12/22/博客增加建站日志页面/","link":"","permalink":"http://linxuesong.github.io/2020/12/22/%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"1.主题目录/layout/sitelog.ejs&lt;div class=&quot;blank&quot; style=&quot;padding-top: 75px;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;pattern-center &quot;&gt; &lt;div class=&quot;pattern-attachment-img&quot;&gt; &lt;% if (page.photos) &#123; %&gt; &lt;img src=&quot;&lt;%= page.photos %&gt;&quot; src=&quot;&lt;%- theme.lazyloadImg %&gt;&quot; data-src=&quot;&lt;%= page.photos %&gt;&quot; class=&quot;lazyload&quot; onerror=&quot;imgError(this,3)&quot; style=&quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&quot;&gt; &lt;% &#125; else &#123; %&gt; &lt;img src=&quot;&lt;%= theme.bg[Math.floor(Math.random() * theme.bg.length + 1)-1] %&gt;&quot; src=&quot;&lt;%- theme.lazyloadImg %&gt;&quot; data-src=&quot;&lt;%= page.photos %&gt;&quot; class=&quot;lazyload&quot; onerror=&quot;imgError(this,3)&quot; style=&quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&quot;&gt; &lt;% &#125; %&gt; &lt;header class=&quot;pattern-header &quot;&gt; &lt;h1 class=&quot;entry-title&quot;&gt; 建站日志&lt;/h1&gt; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;iconfont icon-attention&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/span&gt; &lt;/header&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot; class=&quot;site-content&quot;&gt; &lt;div id=&quot;main&quot;&gt; &lt;header class=&quot;page-header&quot;&gt; &lt;main class=&quot;content&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;div class=&quot;tag-title center-align&quot;&gt; &lt;div class=&quot;journal&quot;&gt; &lt;div class=&quot;title center-align&quot;&gt;“ 日志”&lt;/div&gt; “ 这是本站的站点日志用来记录本站建立过程，变动内容，新增内容~~ ” &lt;/div&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;tit&quot;&gt;&lt;/div&gt; &lt;div class=&quot;min&quot;&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;div class=&quot;vas&quot;&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-1220 10:09:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/loveword&quot;&gt;# 近期变动&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 修改了字体的cdn地址，丰富了倒计时页面内容了并适配了全局深色主题，新增骚气满满的骚话页面，填入了访客数据。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-12-10 15:29:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/todolist&quot;&gt;# 我的flag&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 修改了我的flag页面，更好适配matery主题。修复了部分页面字体与全站字体不一致的问题。增加了全屏按钮&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-12-09 20:25:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 修改日志页面&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 修改日志页面为当前样式，借鉴心月云日志页面，适配了全局深色模式。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-12-05 23:29:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/books&quot;&gt;# 书单&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 新增书单页面，感谢老朋友itsneko。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-29 15:28:36&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/donate&quot;&gt;# 资助系统&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 新增资助系统页面，感谢老朋友itsneko。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-29 13:32:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/artitalk&quot;&gt;# artitalk同步更新&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 替换了js文件，保持artitalk同步更新。 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-26 10:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/journal&quot;&gt;# 访客日历&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 在关于日志中增加了访客日历，由于不会JavaScript这个做的真丑日后修改。 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-25 16:58:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/life&quot;&gt;# 写作站人间草木&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 新增写作站主要用于书写非技术类文章，记录日常点滴，风花雪月。感谢我们的老朋友itsneko。 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-25 15:33:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 移除客服&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 由于客服延时太高，本来用于查看是否有人访问鉴于现在有更好的办法，所以移除客服功能。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-25 10:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/blog&quot;&gt;# 站点页面&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 新增站点页面记录建站工具及环境并补充解释权属于我的霸王条款（站点协议）&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-25 09:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 移出相册页面&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 由于暂时没有上传相册图片的打算，关闭相册页面&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-24 20:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/about&quot;&gt;# 修改补充关于我信息&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 补充关于我信息，听取大佬意见，替换了个人真实姓名，保护个人隐私避免不必要的麻烦。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-23 22:39:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/sakura&quot;&gt;# 修改樱花雨页面&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 修改樱花雨页面为自我介绍增加实用性。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-22 00:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 细节优化&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; toc目录添加白色背景，增加了背景图片及遮罩，优化了侧边滑动条，去除了订阅功能，压根没人订阅还占地方&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-21 09:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/bulletin&quot;&gt;# 公告板&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 因为意义不大删除了弹幕墙页面。增加了公告板页面公布网站正在进行的项目，关于我的一些重要事情。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-19 08:20:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 细节优化&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 调整了导航栏，修复了搜索异常问题，增加粒子特效页面。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-17 16:263:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 修复问题&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 修复了原来valineqq无法拉取昵称和无法启用博主小伙伴标签的问题，这个问题发现好久了并给添加itsneko添加了小伙伴标签。 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-15 09:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 更换字体&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 更换了站点字体江西拙楷&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-15 19:08:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/archive&quot;&gt;# 新增时间列表&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 文章日历页面新增时间列表，感谢&lt;a href=&quot;https://blog.sky03.cn/&quot; target=&quot;_blank&quot;&gt;sky03大佬&lt;/a&gt; 提供的源码&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-14 09:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 细节优化&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 增加百度统计功能便于了解访客数量及访问量，增加了夜间模式按钮，更正了留言板友链头像信息，&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-12 08:36:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# app&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 将网站打包app，但是由于效果并不好仅供我自己使用。后面有空再优化。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-11 23:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 实验室单页&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 陆续增加了实验室单页mikutap，mikutap这个页面我垂涎已久，这是一个开源的项目不知道为什么我用不了在网上今天找到一个修改版终于可以了。帮你百度，拒绝当伸手党学会百度，音乐隧道音乐用的是我的idol Alan walker的歌，小游戏谷歌恐龙加强版，我的源头nekodeng的网站，液体，烟火秀，樱花雨，todolist&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-09 19:08:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 细节优化&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 将原本标签页面与分类页面合并为文章统计页面，删除关于我中相册，我的项目等内容。改变了原有的主题颜色，真的挑了好久，这个是比较满意的，有时间估计还会调其他的，不是特别满意。删除内容关于我页面中的我的技能，我的其他技能。将文章统计图从关于我页面迁移至文章统计页面，增加使用微软表单方式收集友链信息，调整导航栏顺序。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-07 07:13:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 升级valine&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 升级了valine评论系统，修复了主题自带版本不能显示头像的问题&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-06 12:49:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/about&quot;&gt;# 增加botui机器人&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 在我？页面增加botui对话（不知道为什么hexo g会改写botui.js文件只好使用奇怪的手段解决）&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-06 15:23:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/status&quot;&gt;# 友链检测页面&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 新增友链检测功能并将友链页面从关于移出合并为友链及其检测页面，向今今今生大佬表达感谢&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-05 09:58:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/time&quot;&gt;# 倒计时页面&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 增加了骚气的倒计时页面，人生短暂，加油吧少年！ &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-11-03 14:32:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;/contact&quot;&gt;# 完善留言板&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 完善了留言板和友情链接信息，留言板增加网易云热评，诗词（动态刷新） &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-10-30 07:59:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# artitalk说说页面&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 新增artitalk说说页面&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-10-30 09:48:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# sl证书&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 安装ssl证书并强制https&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-10-28 08:25:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 备案&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 完成网站备案工作，用时九天。&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;dian&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_box&quot;&gt; &lt;div class=&quot;hx&quot;&gt;&lt;/div&gt; &lt;div class=&quot;list_nr&quot;&gt; &lt;p class=&quot;date&quot;&gt;2020-10-24 19:38:00&lt;/p&gt; &lt;div class=&quot;nr_tit&quot;&gt; &lt;a href=&quot;&quot;&gt;# 基础&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;nr_nr&quot;&gt; 完成部署到服务器以及基础优化工作&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../src/tiao_c.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(document).ready(_ =&gt; &#123; let list_box = $(&quot;.list_box&quot;); let hx = $(&quot;.hx&quot;); let list_nr = $(&quot;.list_nr&quot;); let date = $(&quot;.date&quot;); let arr_color = [&#39;#118DF0&#39;, &#39;#8bc24c&#39;, &#39;#FF5F5F&#39;, &#39;#515bd4&#39;, &#39;#F7B32D&#39;]; let flag = 0; let wy = $(&quot;body&quot;).width(); function pc() &#123; if (wy &lt;= 700) &#123; window.history.go(0); &#125; if ($(&quot;body&quot;).width() &lt; 1240) &#123; $(&quot;.top img&quot;).css(&quot;right&quot;, &quot;5px&quot;); &#125; else &#123; $(&quot;.top img&quot;).css(&quot;right&quot;, &quot;-22px&quot;); &#125; $(&quot;.top&quot;).css(&quot;display&quot;, &quot;block&quot;); for (let index = 0; index &lt; list_box.length; index++) &#123; $(list_nr[index]).css(&quot;background&quot;, arr_color[flag]); if (flag == 4) &#123; flag = 0; &#125; else &#123; flag += 1; &#125; if (index % 2 != 0) &#123; let a = $(list_box[index]); let b = $(hx[index]); let c = $(list_nr[index]); let d = $(date[index]); a.css(&#123; &quot;float&quot;: &quot;right&quot; &#125;); b.css(&#123; &quot;float&quot;: &quot;left&quot; &#125;) c.css(&#123; &quot;float&quot;: &quot;right&quot;, &quot;margin-right&quot;: &quot;19%&quot; &#125;) d.css(&#123; &quot;right&quot;: &#39;unset&#39;, &quot;left&quot;: &quot;12%&quot; &#125;) &#125; &#125; $(&quot;.list&quot;).slideDown(800); &#125; function move() &#123; if (wy &gt; 700) &#123; window.history.go(0); &#125; for (let index = 0; index &lt; list_box.length; index++) &#123; $(list_nr[index]).css(&quot;background&quot;, arr_color[flag]); if (flag == 4) &#123; flag = 0; &#125; else &#123; flag += 1; &#125; &#125; $(&quot;.list&quot;).css(&quot;margin-top&quot;, &quot;60px&quot;); $(&quot;.line&quot;).css(&quot;left&quot;, &quot;10%&quot;); $(&quot;.dian&quot;).css(&quot;left&quot;, &quot;10%&quot;); $(&quot;.list_box&quot;).css(&quot;width&quot;, &quot;100%&quot;); $(&quot;.hx&quot;).css(&quot;float&quot;, &quot;left&quot;); $(&quot;.list_nr&quot;).css(&#123; &quot;max-height&quot;: &quot;146px&quot;, &quot;line-height&quot;: &quot;17px&quot;, &quot;font-size&quot;: &quot;12px&quot; &#125;); $($(&quot;.list&quot;)[&#39;0&#39;]).css(&quot;margin-top&quot;, &quot;20px&quot;); $(&quot;.list&quot;).slideDown(800); &#125; function win() &#123; let width = $(&quot;body&quot;).width(); $(&quot;.line&quot;).slideDown(800, _ =&gt; &#123; if (width &lt;= 700) &#123; move(); &#125; else &#123; pc(); &#125; &#125;); &#125; $(window).resize(win); win(); &#125;); $(&quot;.nr_nr&quot;).click((e) =&gt; &#123; if ($(&quot;body&quot;).width() &lt;= 700) &#123; alert(e.delegateTarget.innerText); &#125; &#125;) $(&quot;.top img&quot;).click(_ =&gt; &#123; $(document).scrollTop(0); &#125;) var time = new Date(); var time_new = time.getTime(); var str = &#39;2019-03-01 12:14:46&#39;; str = str.replace(/-/g, &#39;/&#39;); var date = new Date(str); var time_old = date.getTime(); var cha = (time_new - time_old)/86400000; console.log(&#39;本站已运行&#39;+Math.floor(cha)+&#39;天&#39;); // 我也不写注释了，js部分的代码，主要就是拿来兼容移动端和PC端。 &lt;/script&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/gh/cungudafa/cdn/js/echarts.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; .journal &#123; padding: 12px; border: 1px dashed #e6e6e6; color: #969696; position: relative; display: inline-block; width: 95%; background: #fbfbfb50; border-radius: 10px; font-size: 16px; margin: 12px auto; &#125; * &#123; margin: 0; padding: 0; &#125; .box &#123; width: 100%; max-width: 1200px; min-width: 300px; margin: 0 auto; &#125; a &#123; text-decoration: none; color: #ffffff; &#125; .tit &#123; text-align: center; padding: 40px 0; letter-spacing: 2px; font-size: 32px; color: #333; &#125; .min &#123; position: relative; &#125; .line &#123; height: 100%; width: 4px; background: #666666; position: absolute; left: 50%; margin-left: -2px; display: none; &#125; .vas &#123; padding-top: 20px; &#125; .list &#123; width: 100%; height: 160px; margin-top: 40px; position: relative; display: none; &#125; .dian &#123; width: 20px; height: 20px; background: #666666; border-radius: 50%; position: absolute; left: 50%; border: 3px solid #ffffff; box-sizing: border-box; margin-left: -10px; margin-top: 5px; z-index: 2; &#125; .list_box &#123; width: 50%; height: 100%; float: left; position: relative; /* background: red; */ &#125; .hx &#123; width: 150px; height: 4px; background: #666666; margin-top: 12px; float: right; z-index: 1; &#125; .list_nr &#123; width: 65%; height: auto; padding: 15px; background: #118DF0; border-radius: 6px; color: #f6f7f8; float: left; margin-top: -15px; margin-left: 19%; &#125; .nr_tit &#123; font-size: 16px; font-weight: 700; margin: 10px 0; margin-top: 0px; &#125; .nr_nr &#123; line-height: 25px; position: relative; &#125; .date &#123; position: absolute; right: 12%; background:#8a79af; padding: 5px; top: -32px; color: #333; border-radius: 10px; font-size: 12px; &#125; &lt;/style&gt; &lt;section class=&quot;author-profile&quot;&gt; &lt;div class=&quot;info&quot; itemprop=&quot;author&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; &lt;a href=&quot;/about/&quot; class=&quot;profile gravatar&quot;&gt;&lt;img src=&quot;&lt;%- (theme.cdn || &#39;&#39;) + theme.avatar%&gt;&quot; itemprop=&quot;image&quot; alt=&quot;hojun&quot; height=&quot;70&quot; width=&quot;70&quot;&gt;&lt;/a&gt; &lt;div class=&quot;meta&quot;&gt; &lt;span class=&quot;title&quot;&gt;Author&lt;/span&gt; &lt;h3 itemprop=&quot;name&quot;&gt; &lt;a href=&quot;&lt;%- theme.url%&gt;&quot; itemprop=&quot;url&quot; rel=&quot;author&quot;&gt;&lt;%- config.author %&gt;&lt;/a&gt; &lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;p id=&quot;showStr&quot;&gt;&lt;/p&gt; &lt;/section&gt; &lt;!-- 一言 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://api.imjad.cn/hitokoto/?cat=&amp;charset=utf-8&amp;length=&amp;encode=js&amp;fun=sync&amp;source=&quot;&gt;&lt;/script&gt; &lt;div style=&quot;display:none&quot; id=&quot;hitokoto&quot;&gt;&lt;script&gt;hitokoto()&lt;/script&gt; &lt;/div&gt; &lt;script&gt; var index = 0; var str = document.getElementById(&quot;hitokoto&quot;).innerText; str = str.substring(10, str.length)//裁剪hitokoto()字样 function type() &#123; if(index == str.length) &#123; index = 0; &#125; document.getElementById(&quot;showStr&quot;).innerText = str.substring(0, index++); &#125; setInterval(type, 200); //通过定时器来让文字逐步显示 &lt;/script&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 2.新增页面hexo new page &quot;sitelog&quot; 生成的页面在/source/sitelog下将index.md的layout设置成sitelog 3.在主题的配置文件的导航栏路径加入该页面","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"nginx编写自定义http模块过程整理","slug":"nginx编写自定义http模块过程整理","date":"2020-12-21T09:22:22.000Z","updated":"2022-12-05T05:59:20.046Z","comments":true,"path":"2020/12/21/nginx编写自定义http模块过程整理/","link":"","permalink":"http://linxuesong.github.io/2020/12/21/nginx%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89http%E6%A8%A1%E5%9D%97%E8%BF%87%E7%A8%8B%E6%95%B4%E7%90%86/","excerpt":"","text":"一、整体过程梳理1.编写nginx_http_module_t变量nginx_http_hello_module 2.挂载到处理http请求过程种 3. 二、具体编写我们编写过程采用总分的结构，先写整体,再具体每一个成员 1.定义自定义http模块变量 ngx_http_hello_module1.1模板结构体ngx_http_module_t成员说明说明 ♥是重点变量 ngx_http_module_t ngx_http_hello_module &#123; ngx_uint_t ctx_index; // 该模块在当前类别(http类别，core event mail)中的排名序号 nginx框架用到 ngx_uint_t index; // 该模块在所有类别模块中的排名序号 nginx框架用到 ngx_uint_t spare0;//一共四个sapre保留变量暂未用 ngx_uint_t spare1; ngx_uint_t spare2; ngx_uint_t spare3; ngx_uint_t version; // 模块版本 包含当前变量在内之前的共7个变量可以用提供好的#define NGX_MODULE_V1去填充 void *ctx; // 模块的上下文结构 一个非常重要的变量,主要作用:1.设置读取配置文件完成前后的回调函数，①对不同配置值如何处理②设置该模块挂载到http流程的方式③是处理http请求并返回http响应的一个位置，可以以按阶段处理的方式挂在到http处理流程中2.设置不同级别配置项创建方法，供nginx框架遇到模块感兴趣的配置项时调用创建响应的自定义配置项信息结构体 ♥ ngx_command_t *commands; // 指令集合,当和配置文件某项匹配后 执行自定义的指令函数 主要作用:遇到配置项文件后执行自定义函数，函数可以①读取配置文件内容；②是一个处理http请求的位置，以按需分配的方式挂载到http处理流程中♥ ngx_uint_t type; //模块类型 core event http mail ♥ ngx_int_t (*init_master)(ngx_log_t *log); // 初始化master执行 ngx_int_t (*init_module)(ngx_cycle_t *cycle); // 初始化module执行 ngx_int_t (*init_process)(ngx_cycle_t *cycle); ngx_int_t (*init_thread)(ngx_cycle_t *cycle); void (*exit_thread)(ngx_cycle_t *cycle); void (*exit_process)(ngx_cycle_t *cycle); void (*exit_master)(ngx_cycle_t *cycle); // 退出master执行 uintptr_t spare_hook0; // 保留字段未用,可以用提供好的#define NGX_MODULE_V1_PADDING取填充8个变量 uintptr_t spare_hook1; uintptr_t spare_hook2; uintptr_t spare_hook3; uintptr_t spare_hook4; uintptr_t spare_hook5; uintptr_t spare_hook6; uintptr_t spare_hook7; &#125; 1.2自定义模板变量ngx_http_hello_module/*宏定义变量说明 #define NGX_MODULE_V1 0, 0, 0, 0,NGX_DSO_ABI_COMPATIBILITY, NGX_NUMBER_MAJOR, NGX_NUMBER_MINOR //前七个成员的初始化 #define NGX_MODULE_V1_PADDING 0, 0, 0, 0, 0, 0, 0, 0 //后八个成员的初始化 */ ngx_module_t ngx_http_hello_module = &#123; NGX_MODULE_V1, &amp;ngx_http_hello_module_ctx, /* module context ♥*/ ngx_http_hello_commands, /* module directives ♥*/ NGX_HTTP_MODULE, /* module type ♥*/ NULL, /* init master */ NULL, /* init module */ NULL, /* init process */ NULL, /* init thread */ NULL, /* exit thread */ NULL, /* exit process */ NULL, /* exit master */ NGX_MODULE_V1_PADDING &#125;; 接下来对其三个♥成员进行分析，可以直接按目录跳转 2.ngx_http_hello_module_ctx模块上下文结构void *ctx(实际上是一组模块处理流程的回调函数指针)读取配置并保存到我们自己定义的结构体中 对于http模块可能的配置类别有 http、server、location三种，根据我们的需要看要定义几种，如果我们的模块只需要location的配置，对某一路由进行处理那只需要自定义保存location配置信息的结构体即可 2.1结构体定义如下 typedef struct &#123; ngx_int_t (*preconfiguration)(ngx_conf_t *cf); ///* 在解析http&#123;&#125;块内的配置项前回调 */ ngx_int_t (*postconfiguration)(ngx_conf_t *cf); // /* 在解析http&#123;&#125;块内的配置项后回调 */ ♥ void *(*create_main_conf)(ngx_conf_t *cf); // 创建 本模块所在的http block的配置信息结构 char *(*init_main_conf)(ngx_conf_t *cf, void *conf); // 初始化 本模块所在的http block配置信息结构 void *(*create_srv_conf)(ngx_conf_t *cf); // 创建server block的配置信息存储结构 char *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf); // 合并不同级别的server的配置信息存储结构,可无 void *(*create_loc_conf)(ngx_conf_t *cf); // 创建location block的配置信息存储结构 ♥我们关心哪一个级别的配置就写哪一个级别的 char *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf); // 合并不同级别location的,可无 &#125; ngx_http_module_t; 2.2自定义变量 static int ngx_hello_visited_times = 0; static ngx_http_module_t ngx_http_hello_module_ctx = &#123; NULL, /* preconfiguration */ ngx_http_hello_init, /* postconfiguration */ NULL, /* create main configuration */ NULL, /* init main configuration */ NULL, /* create server configuration */ NULL, /* merge server configuration */ ngx_http_hello_create_loc_conf, /* create location configuration */ NULL /* merge location configuration */ &#125;; 2.3其中两个回调函数的定义2.3.1postconfiguration——ngx_http_hello_init// ngx_http_hello_init 当加载完配置文件后执行 1.把当前模块加入处理流程--按处理阶段挂载 2.把配置文件中hello_string 并发送回去 处理http请求 // 这个只有当 static ngx_int_t ngx_http_hello_init(ngx_conf_t *cf) &#123; ngx_http_handler_pt *h; ngx_http_core_main_conf_t *cmcf; cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module); // 把当前模块挂载在到NGX_HTTP_CONTENT_PHASE阶段中 // Mount the current module to NGX_ HTTP_ CONTENT_ In phase h = ngx_array_push(&amp;cmcf-&gt;phases[NGX_HTTP_CONTENT_PHASE].handlers); if (h == NULL) &#123; return NGX_ERROR; &#125; *h = ngx_http_hello_handler; // ♥ 对于读取的配置文件做何种处理，因为此时已经读取配置文件完了可以获取配置文件中的信息 return NGX_OK; &#125; // static ngx_int_t ngx_http_hello_handler(ngx_http_request_t *r) &#123; ngx_int_t rc; ngx_buf_t *b; ngx_chain_t out; ngx_http_hello_loc_conf_t* my_conf; // 用户保存配置文件存储结构体 u_char ngx_hello_string[1024] = &#123;0&#125;; ngx_uint_t content_length = 0; ngx_log_error(NGX_LOG_EMERG, r-&gt;connection-&gt;log, 0, &quot;ngx_http_hello_handler is called!&quot;); my_conf = ngx_http_get_module_loc_conf(r, ngx_http_hello_module); // 获取本地配置♥ if (my_conf-&gt;hello_string.len == 0 ) &#123; ngx_log_error(NGX_LOG_EMERG, r-&gt;connection-&gt;log, 0, &quot;hello_string is empty!&quot;); return NGX_DECLINED; &#125; if (my_conf-&gt;hello_counter == NGX_CONF_UNSET || my_conf-&gt;hello_counter == 0) &#123; ngx_sprintf(ngx_hello_string, &quot;%s&quot;, my_conf-&gt;hello_string.data); &#125; else &#123; ngx_sprintf(ngx_hello_string, &quot;%s Visited Times:%d&quot;, my_conf-&gt;hello_string.data, ++ngx_hello_visited_times); &#125; ngx_log_error(NGX_LOG_EMERG, r-&gt;connection-&gt;log, 0, &quot;hello_string:%s&quot;, ngx_hello_string); content_length = ngx_strlen(ngx_hello_string); /* we response to &#39;GET&#39; and &#39;HEAD&#39; requests only */ if (!(r-&gt;method &amp; (NGX_HTTP_GET|NGX_HTTP_HEAD))) &#123; return NGX_HTTP_NOT_ALLOWED; &#125; /* discard request body, since we don&#39;t need it here */ rc = ngx_http_discard_request_body(r); // 如果不处理http请求体需要调用discard舍弃 if (rc != NGX_OK) &#123; return rc; &#125; /* set the &#39;Content-type&#39; header */ /* *r-&gt;headers_out.content_type.len = sizeof(&quot;text/html&quot;) - 1; *r-&gt;headers_out.content_type.data = (u_char *)&quot;text/html&quot;; */ ngx_str_set(&amp;r-&gt;headers_out.content_type, &quot;text/html&quot;); /* send the header only, if the request type is http &#39;HEAD&#39; */ if (r-&gt;method == NGX_HTTP_HEAD) &#123; r-&gt;headers_out.status = NGX_HTTP_OK; r-&gt;headers_out.content_length_n = content_length; return ngx_http_send_header(r); &#125; /* allocate a buffer for your response body */ b = ngx_pcalloc(r-&gt;pool, sizeof(ngx_buf_t)); if (b == NULL) &#123; return NGX_HTTP_INTERNAL_SERVER_ERROR; &#125; /* attach this huocongqu buffer to the buffer chain */ out.buf = b; out.next = NULL; /* adjust the pointers of the buffer */ b-&gt;pos = ngx_hello_string; // 来自于配置文件中的hello_string b-&gt;last = ngx_hello_string + content_length; b-&gt;memory = 1; /* this buffer is in memory */ b-&gt;last_buf = 1; /* this is the last buffer in the buffer chain */ /* set the status line */ r-&gt;headers_out.status = NGX_HTTP_OK; r-&gt;headers_out.content_length_n = content_length; /* send the headers of your response */ rc = ngx_http_send_header(r); // 发送回http响应头 if (rc == NGX_ERROR || rc &gt; NGX_OK || r-&gt;header_only) &#123; return rc; &#125; /* send the buffer chain of your response */ return ngx_http_output_filter(r, &amp;out); &#125; 2.3.2create_loc_conf——ngx_http_hello_create_loc_conf // 只是创建一个存配置信息的结构体并初始化一些默认初始值 ，提供一个空间 // 在读取配置文件过程中遇到location block中匹配的字符串就创建一个配置结构体(自定义的)返回 static void *ngx_http_hello_create_loc_conf(ngx_conf_t *cf) &#123; ngx_http_hello_loc_conf_t* local_conf = NULL; local_conf = ngx_pcalloc(cf-&gt;pool, sizeof(ngx_http_hello_loc_conf_t));//ngx_http_hello_loc_conf_t自己定义保存配置信息的 if (local_conf == NULL) &#123; return NULL; &#125; ngx_str_null(&amp;local_conf-&gt;hello_string); // 设置成null字符串 local_conf-&gt;hello_counter = NGX_CONF_UNSET; // 设置成-1 return local_conf; // 返回一个配置信息变量 &#125; // 自定义配置信息结构体 typedef struct &#123; ngx_str_t hello_string; ngx_int_t hello_counter; &#125;ngx_http_hello_loc_conf_t; 3. ngx_http_hello_commands 指令集合 *commands当遇到模块感兴趣的配置后做相应处理，读取配置文件保存到自定义配置信息结构体中3.3.1结构体定义ngx_command_tstruct ngx_command_t &#123; ngx_str_t name; // 指令名称 ngx_uint_t type; // 指令所在的context和包含的参数个数 char *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf); // 解析配置，并将参数存入模块配置结构体中,实现时可以调用14中预设方法 ngx_uint_t conf; // 存放配置信息结构体的种类 是http、server、location哪一种，使用宏定义NGX_HTTP_LOC_CONF_OFFSET ngx_uint_t offset; // 指令参数的存储偏移量 void *post; // 用途归于用户使用，我们暂不使用 &#125;; struct ngx_conf_s &#123; char *name; // 感兴趣配置项名♥ ngx_array_t *args; // 保存所有的配置项的参数值 比如apps 1 2 3 那apps配置项就有3个整数型的参数♥ ngx_cycle_t *cycle; // 存放所有moudule模块 (模块都有自己的序号) ngx_pool_t *pool; // 内存池对象用于申请内存的变量 ngx_pool_t *temp_pool; // 临时内存池变量 ngx_conf_file_t *conf_file; // 和整个配置文件绑定 ngx_log_t *log; // 打印日志 void *ctx; // 上下文 ngx_uint_t module_type; // 模块类型 http core mail event ngx_uint_t cmd_type; // 指令类型 ——配置项的类型 是由一个参数还是开关类型还是有2个以上参数的 ngx_conf_handler_ptr handler; // 匹配到响应的匹配项就执行对应的处理函数，函数一般是将配置文件中的配置项的若干变量读取出来放到自定义的配置信息结构体中 ♥ char *handler_conf; &#125;; 3.3.2自定义指令集合变量// 可以看到数组有两个元素，模块感兴趣的配置是hello_string 和hello_counter static ngx_command_t ngx_http_hello_commands[] = &#123; &#123; ngx_string(&quot;hello_string&quot;), NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS|NGX_CONF_TAKE1, // 表示可以接收多种类型的配置项 ngx_http_hello_string, // 函数，将配置文件中的hello_string读取出来放到自定义结构体中 注：有预定义的解题配置项值的方法14个 NGX_HTTP_LOC_CONF_OFFSET, // 表示要存放到自定义的location配置信息保存体 offsetof(ngx_http_hello_loc_conf_t, hello_string), // hello_string是变量名,offsetof返回其在location配置信息结构体中的偏移量 NULL &#125;, &#123; //和上面类似 ngx_string(&quot;hello_counter&quot;), NGX_HTTP_LOC_CONF|NGX_CONF_FLAG, ngx_http_hello_counter, NGX_HTTP_LOC_CONF_OFFSET, offsetof(ngx_http_hello_loc_conf_t, hello_counter), NULL &#125;, ngx_null_command &#125;; // 从配置文件中读取配置hello_string static char * ngx_http_hello_string(ngx_conf_t *cf, ngx_command_t *cmd, void *conf) &#123; ngx_http_hello_loc_conf_t* local_conf; local_conf = conf; char* rv = ngx_conf_set_str_slot(cf, cmd, conf); //14种预置方法之一如果配置项只有一个参数且希望string形式保存 ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, &quot;hello_string:%s&quot;, local_conf-&gt;hello_string.data); return rv; &#125; // 从配置文件中读取配置hello_counter后放入到自定义配置结构体中 static char *ngx_http_hello_counter(ngx_conf_t *cf, ngx_command_t *cmd, void *conf) &#123; ngx_http_hello_loc_conf_t* local_conf; local_conf = conf; // 指针传递 char* rv = NULL; rv = ngx_conf_set_flag_slot(cf, cmd, conf); // 如果配置项是on或off则将变量 设置成1或0，哪一个变量在ngx_command_t中偏移量指出 ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, &quot;hello_counter:%d&quot;, local_conf-&gt;hello_counter); return rv; &#125; 三、从http请求通过的流程分析如何编写自定义模块markdown如何画流程图","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://linxuesong.github.io/tags/nginx/"}],"author":"linxuesong"},{"title":"nginx安装过程及相关使用命令","slug":"nginx安装过程及相关使用命令","date":"2020-12-21T09:12:00.000Z","updated":"2022-12-05T05:59:20.030Z","comments":true,"path":"2020/12/21/nginx安装过程及相关使用命令/","link":"","permalink":"http://linxuesong.github.io/2020/12/21/nginx%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"一、安装过程Nginx安装过程 这里提供两种方式，快速使用 如果是ubuntu可以直接用下面命令安装 apt install nginx 这里详细说一下第二种方式: 0.前期准备(重要，不然会导致下面第3步失败)安装所需的gcc和依赖库 4.1、GCC——GNU编译器集合 ubuntu: apt-get install gcc linux: yum install gcc-c++ 4.2、PCRE库 ubuntu:apt-get install libpcre3 libpcre3-dev linux: yum install -y pcre pcre-devel 4.3、zlib库 ubuntu: apt-get install zlib1g zlib1g-dev linux: yum install -y zlib zlib-devel 4.4、OpenSSL库 ubuntu:apt-get install openssl openssl-dev linux: yum install -y openssl openssl-devel 1.下载源码文件，网址如下http://nginx.org/en/download.html 这里我们选择linux下稳定版本文件 2.解压文件将下载的文件放到linux电脑上，用如下命令解压文件，得到nginx-1.18.0文件夹,进入到文件夹种 tar -zxvf 文件名 cd 解压后的文件夹 3.执行命令安装nginx安装到指定路径下 ./config --prefix=/usr/local/nginx 4.编译源码，生成目标文件、二进制文件make命令可以将c++文件按照makefile指定的依赖规则进行编译 make 5.部署nginxmake install 安装完成，此时nginx文件及相关配置在/user/local/nginx nginx运行程序在/user/local/nginx/sbin 二、运行nginx0.自定义相关配置目录/usr/local/nginx/conf/nginx.conf 可以修改ngxin监听的端口及相关参数 1.启动nginx./user/local/nginx/sbin/nginx 执行命令后使用ps -ef|grep nginx查看是否启动进程 也可以打开浏览器，网址localhost查看是否有内容如果改了监听端口则写上localhost:监听端口 三、其他的相关nginx命令1.关闭./nginx -s stop 2.","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://linxuesong.github.io/tags/nginx/"}],"author":"linxuesong"},{"title":"增加文章统计折线图、饼状图","slug":"增加文章统计折线图、饼状图","date":"2020-12-18T10:03:16.000Z","updated":"2022-12-05T05:59:20.358Z","comments":true,"path":"2020/12/18/增加文章统计折线图、饼状图/","link":"","permalink":"http://linxuesong.github.io/2020/12/18/%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E7%BB%9F%E8%AE%A1%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%81%E9%A5%BC%E7%8A%B6%E5%9B%BE/","excerpt":"","text":"1.sakura/layout/analytics.ejs&lt;div class=&quot;pattern-center-blank&quot;&gt; &lt;/div&gt; &lt;div class=&quot;pattern-center &quot;&gt; &lt;div class=&quot;pattern-attachment-img&quot;&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/drew233/cdn/20200303155335.webp&quot; data-src=&quot;&lt;%= page.photos %&gt;&quot; class=&quot;lazyload&quot; onerror=&quot;imgError(this,3)&quot; style=&quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&quot;&gt; &lt;/div&gt; &lt;style type=&quot;text/css&quot;&gt; #contentss &#123; position: relative; width: 800px; height: 900px; max-height: 1200px; text-align: center; border: 0; color: rgba(0, 0, 0, .87); background: rgba(255, 255, 255, .8); background-size: cover; margin: 0 auto; &#125; &lt;/style&gt; &lt;header class=&quot;pattern-header &quot;&gt; &lt;h1 class=&quot;entry-title&quot;&gt; 文章数据统计&lt;/h1&gt; &lt;/header&gt; &lt;/div&gt; &lt;div id=&quot;contentss&quot;&gt; &lt;%- partial(&#39;_widget/post-charts&#39;) %&gt; &lt;/div&gt; 2.sakura/layout/_widget/post-charts&lt;style type=&quot;text/css&quot;&gt; #posts-chart, #categories-chart, #tags-chart &#123; width: 100%; height: 300px; margin: 0.5rem auto; padding: 0.5rem; &#125; &lt;/style&gt; &lt;div id=&quot;postCharts&quot; class=&quot;post-charts&quot;&gt; &lt;div class=&quot;title center-align&quot; data-aos=&quot;zoom-in-up&quot;&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;chart col s12 m6 l4&quot; data-aos=&quot;zoom-in-up&quot;&gt; &lt;div id=&quot;posts-chart&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;chart col s12 m6 l4&quot; data-aos=&quot;zoom-in-up&quot;&gt; &lt;div id=&quot;categories-chart&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;chart col s12 m6 l4&quot; data-aos=&quot;zoom-in-up&quot;&gt; &lt;div id=&quot;tags-chart&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%= theme.libs.js.echarts %&gt;&quot;&gt;&lt;/script&gt; &lt;script&gt; var postsChart = echarts.init(document.getElementById(&#39;posts-chart&#39;)); var categoriesChart = echarts.init(document.getElementById(&#39;categories-chart&#39;)); var tagsChart = echarts.init(document.getElementById(&#39;tags-chart&#39;)); &lt;% /* calculate postsOption data. */ var startDate = moment().subtract(1, &#39;years&#39;).startOf(&#39;month&#39;); var endDate = moment().endOf(&#39;month&#39;); var monthMap = new Map(); var dayTime = 3600 * 24 * 1000; for (var time = startDate; time &lt;= endDate; time += dayTime) &#123; var month = moment(time).format(&#39;YYYY-MM&#39;); if (!monthMap.has(month)) &#123; monthMap.set(month, 0); &#125; &#125; // post and count map. site.posts.forEach(function (post) &#123; var month = post.date.format(&#39;YYYY-MM&#39;); if (monthMap.has(month)) &#123; monthMap.set(month, monthMap.get(month) + 1); &#125; &#125;); // xAxis data and yAxis data. var monthArr = JSON.stringify([...monthMap.keys()]); var monthValueArr = JSON.stringify([...monthMap.values()]); %&gt; var postsOption = &#123; title: &#123; text: &#39;文章发布统计图&#39;, top: 0, x: &#39;center&#39; &#125;, tooltip: &#123; trigger: &#39;axis&#39; &#125;, xAxis: &#123; type: &#39;category&#39;, data: &lt;%- monthArr %&gt; &#125;, yAxis: &#123; type: &#39;value&#39;, &#125;, series: [&#123; name: &#39;&lt;%- __(&quot;postsNumberName&quot;) %&gt;&#39;, type: &#39;line&#39;, color: [&#39;#6772e5&#39;], data: &lt;%- monthValueArr %&gt; , markPoint: &#123; symbolSize: 45, color: [&#39;#fa755a&#39;, &#39;#3ecf8e&#39;, &#39;#82d3f4&#39;], data: [&#123; type: &#39;max&#39;, itemStyle: &#123; color: [&#39;#3ecf8e&#39;] &#125;, name: &#39;&lt;%- __(&quot;maximum&quot;) %&gt;&#39; &#125;, &#123; type: &#39;min&#39;, itemStyle: &#123; color: [&#39;#fa755a&#39;] &#125;, name: &#39;&lt;%- __(&quot;minimum&quot;) %&gt;&#39; &#125;] &#125;, markLine: &#123; itemStyle: &#123; color: [&#39;#ab47bc&#39;] &#125;, data: [&#123; type: &#39;average&#39;, name: &#39;&lt;%- __(&quot;average&quot;) %&gt;&#39; &#125;] &#125; &#125;] &#125;; &lt;% /* calculate categoriesOption data. */ var categoryArr = []; site.categories.map(function (category) &#123; categoryArr.push(&#123; &#39;name&#39;: category.name, &#39;value&#39;: category.length &#125;) &#125;); var categoryArrJson = JSON.stringify(categoryArr); %&gt; var categoriesOption = &#123; title: &#123; text: &#39;文章分类统计图&#39;, top: 1, x: &#39;center&#39; &#125;, tooltip: &#123; trigger: &#39;item&#39;, formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&quot; &#125;, series: [&#123; name: &#39;&lt;%- __(&quot;categories&quot;) %&gt;&#39;, type: &#39;pie&#39;, radius: &#39;50%&#39;, color: [&#39;#6772e5&#39;, &#39;#ff9e0f&#39;, &#39;#fa755a&#39;, &#39;#3ecf8e&#39;, &#39;#82d3f4&#39;, &#39;#ab47bc&#39;, &#39;#525f7f&#39;, &#39;#f51c47&#39;, &#39;#26A69A&#39; ], data: &lt;%- categoryArrJson %&gt; , itemStyle: &#123; emphasis: &#123; shadowBlur: 10, shadowOffsetX: 0, shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39; &#125; &#125; &#125;] &#125;; &lt;% /* calculate tagsOption data. */ // get all tags name and count,then order by length desc. var tagArr = []; site.tags.map(function (tag) &#123; tagArr.push(&#123; &#39;name&#39;: tag.name, &#39;value&#39;: tag.length &#125;); &#125;); tagArr.sort((a, b) =&gt; &#123; return b.value - a.value &#125;); // get Top 10 tags name and count. var tagNameArr = []; var tagCountArr = []; for (var i = 0, len = Math.min(tagArr.length, 10); i &lt; len; i++) &#123; tagNameArr.push(tagArr[i].name); tagCountArr.push(tagArr[i].value); &#125; var tagNameArrJson = JSON.stringify(tagNameArr); var tagCountArrJson = JSON.stringify(tagCountArr); %&gt; var tagsOption = &#123; title: &#123; text: &#39;Top10标签统计图 &#39;, top: 2, x: &#39;center&#39; &#125;, tooltip: &#123;&#125;, xAxis: [&#123; type: &#39;category&#39;, data: &lt;%- tagNameArrJson %&gt; &#125;], yAxis: [&#123; type: &#39;value&#39; &#125;], series: [&#123; type: &#39;bar&#39;, color: [&#39;#82d3f4&#39;], barWidth: 18, data: &lt;%- tagCountArrJson %&gt; , markPoint: &#123; symbolSize: 45, data: [&#123; type: &#39;max&#39;, itemStyle: &#123; color: [&#39;#3ecf8e&#39;] &#125;, name: &#39;&lt;%- __(&quot;maximum&quot;) %&gt;&#39; &#125;, &#123; type: &#39;min&#39;, itemStyle: &#123; color: [&#39;#fa755a&#39;] &#125;, name: &#39;&lt;%- __(&quot;minimum&quot;) %&gt;&#39; &#125;], &#125;, markLine: &#123; itemStyle: &#123; color: [&#39;#ab47bc&#39;] &#125;, data: [&#123; type: &#39;average&#39;, name: &#39;&lt;%- __(&quot;average&quot;) %&gt;&#39; &#125;] &#125; &#125;] &#125;; // render the charts postsChart.setOption(postsOption); categoriesChart.setOption(categoriesOption); tagsChart.setOption(tagsOption); &lt;/script&gt; 3.hexo new page analyticslayout设置成analytics 在主题配置文件中导航栏加入path: /analytics 4.添加echart.js的引用在主题配置文件的最后加上,因为post-charts.ejs引用到了echart的js代码 libs: css: googlefonts: https://fonts.googleapis.com/css?family=Noto+SerifMerriweather|Merriweather+Sans|Source+Code+Pro|Ubuntu:400,700|Noto+Serif+SC style: https://cdn.jsdelivr.net/gh/cungudafa/cdn/css/style.css #/css/style.css # lib: https://cdn.jsdelivr.net/gh/cungudafa/cdn/css/lib.min.css font: https://cdn.jsdelivr.net/gh/cungudafa/cdn/css/font.css insight: /css/insight.css tags: https://cdn.jsdelivr.net/gh/cungudafa/cdn/css/tags.css fancybox: https://cdn.jsdelivr.net/gh/cungudafa/cdn/css/jquery.fancybox.min.css sharejs: https://cdn.jsdelivr.net/gh/cungudafa/cdn/css/sharejs.css tocbot: https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.4.2/tocbot.css live2d_widget: https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css logo: enable: true # 自定义logo logo: https://cdn.jsdelivr.net/gh/cungudafa/cdn/css/logo.css logo_fonts: https://cdn.jsdelivr.net/gh/cungudafa/cdn/fonts/LOGO/logo.css js: jquery: https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js linkcard: /js/linkcard.js lib: https://cdn.jsdelivr.net/gh/cungudafa/cdn/js/lib.min.js clipboard: https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js InsightSearch: https://cdn.jsdelivr.net/gh/cungudafa/cdn/js/InsightSearch.js sakura_app: https://cdn.jsdelivr.net/gh/cungudafa/cdn/js/sakura-app.js #/js/sakura-app.js busuanzi: https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js fancybox: https://cdn.jsdelivr.net/gh/cungudafa/cdn/js/jquery.fancybox.min.js echarts: https://cdn.jsdelivr.net/gh/cungudafa/cdn/js/echarts.min.js valine: https://unpkg.com/valine/dist/Valine.min.js sakura_petal: https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/sakura.js #other hititle: https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/hititle.js KeyBlock: https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/noSomeKey.js #按键屏蔽,不能F12调试和查看源代码 sakura_petals: https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/sakura.js #仅在首页花瓣飘落（大内存） snow_petals: https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/snow1.js piao: https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/piao.js #飘动彩带 live2d_widget: https://cdn.jsdelivr.net/gh/cungudafa/cdn/live2d-widget/autoload.js word: https://cdn.jsdelivr.net/gh/wallleap/cdn/js/shehuizhuyi.js #点击出现字效 love: https://cdn.jsdelivr.net/gh/wallleap/cdn/js/love.js #点击出现爱心 cursor: https://cdn.jsdelivr.net/gh/cungudafa/cdn@2.1.2/js/cursor.js # 星星跟随坠落(大内存)","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"使用主题的个人插件在文章中插入B站外链视频和图片","slug":"使用主题的个人插件在文章中插入B站外链视频和图片","date":"2020-12-18T03:20:10.000Z","updated":"2022-12-05T05:59:20.233Z","comments":true,"path":"2020/12/18/使用主题的个人插件在文章中插入B站外链视频和图片/","link":"","permalink":"http://linxuesong.github.io/2020/12/18/%E4%BD%BF%E7%94%A8%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%8F%92%E4%BB%B6%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5B%E7%AB%99%E5%A4%96%E9%93%BE%E8%A7%86%E9%A2%91%E5%92%8C%E5%9B%BE%E7%89%87/","excerpt":"","text":"写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： &#123;% bili video_id [page] %&#125; 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： &#123;% fb_img src [caption] %&#125; 详细使用教程详见hexo-tag-fancybox_img","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"主题美化添加自己的书单页面","slug":"主题美化添加自己的书单页面","date":"2020-12-18T02:58:12.000Z","updated":"2022-12-05T05:59:20.218Z","comments":true,"path":"2020/12/18/主题美化添加自己的书单页面/","link":"","permalink":"http://linxuesong.github.io/2020/12/18/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B9%A6%E5%8D%95%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"参考 https://blog.csdn.net/qq_44846853/article/details/104563887 0.准备安装hexo-douban插件npm install hexo-douban --save 1.修改主站目录(非主题目录)的_config.yml博客目录/_config.yml下新建books.ejs 内容如下 douban: user: 252345665 #这个需要修改为你个人的id builtin: false #如果想生成豆瓣页面，这个需要设置为true book: title: &#39;This is my book title&#39; quote: &#39;This is my book quote&#39; movie: title: &#39;This is my movie title&#39; quote: &#39;This is my movie quote&#39; game: title: &#39;This is my game title&#39; quote: &#39;This is my game quote&#39; timeout: 10000 说明: user:：你的豆瓣ID。打开豆瓣，登入账户，然后在右上角点击 ”个人主页“，这时候地址栏的URL大概是这样：https://www.douban.com/people/xxxxxx/ ，其中的”xxxxxx”就是你的个人ID了。 builtin：是否将生成页面的功能嵌入 hexo s 和 hexo g 中，默认是 false ，另一可选项为 true 。 title： 该页面的标题。 quote： 写在页面开头的一段话,支持html语法。 timeout： 爬取数据的超时时间，默认是 10000ms，如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。 2.在导航处增加入口博客目录/themes/sakura/_config.yml中加入书单、电影的入口 /books /movies 清单: &#123; path: javascript:;, fa: fa-list-ul faa-vertical, submenus: &#123; 书单: &#123;path: /books/, fa: fa-th-list faa-bounce &#125;, 番组: &#123;path: /bangumi/, fa: fa-film faa-vertical &#125;, 歌单: &#123;path: /music/, fa: fa-headphones &#125;, 电影: &#123;path: /movies/, fa: fa-headphones &#125;, 图集: &#123;path: /tags/图集/, fa: fa-photo &#125;, 娱乐: &#123;path: /dinoswords, fa: fa-gamepad &#125; &#125; &#125; 这个时候已经可以进入第5步验证，不过如果想自定义书单页面样式的话要3、4步 3.适配sakura主题博客目录/themes/sakura/layout/下 增加文件 douban.ejs &lt;div class=&quot;blank&quot; style=&quot;padding-top: 75px;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;pattern-center &quot;&gt; &lt;div class=&quot;pattern-attachment-img&quot;&gt; &lt;% if (page.photos) &#123; %&gt; &lt;img src=&quot;&lt;%= page.photos %&gt;&quot; src=&quot;&lt;%- theme.lazyloadImg %&gt;&quot; data-src=&quot;&lt;%= page.photos %&gt;&quot; class=&quot;lazyload&quot; onerror=&quot;imgError(this,3)&quot; style=&quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&quot;&gt; &lt;% &#125; else &#123; %&gt; &lt;img src=&quot;&lt;%= theme.bg[Math.floor(Math.random() * theme.bg.length + 1)-1] %&gt;&quot; src=&quot;&lt;%- theme.lazyloadImg %&gt;&quot; data-src=&quot;&lt;%= page.photos %&gt;&quot; class=&quot;lazyload&quot; onerror=&quot;imgError(this,3)&quot; style=&quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&quot;&gt; &lt;% &#125; %&gt; &lt;header class=&quot;pattern-header &quot;&gt; &lt;h1 class=&quot;entry-title&quot;&gt;悦读&lt;/h1&gt; &lt;/header&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot; class=&quot;site-content&quot;&gt; &lt;div id=&quot;main&quot;&gt; &lt;div id=&quot;main-part&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-content&quot; style=&quot;padding: 30px&quot;&gt; &lt;h1 style=&quot;margin: 10px 0 10px 0px;&quot;&gt;&lt;%= page.title %&gt;&lt;/h1&gt; &lt;%- page.content %&gt; &lt;/div&gt; &lt;/div&gt; &lt;section class=&quot;author-profile&quot;&gt; &lt;div class=&quot;info&quot; itemprop=&quot;author&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; &lt;a href=&quot;/about/&quot; class=&quot;profile gravatar&quot;&gt;&lt;img src=&quot;&lt;%- (theme.cdn || &#39;&#39;) + theme.avatar%&gt;&quot; itemprop=&quot;image&quot; alt=&quot;hojun&quot; height=&quot;70&quot; width=&quot;70&quot;&gt;&lt;/a&gt; &lt;div class=&quot;meta&quot;&gt; &lt;span class=&quot;title&quot;&gt;Author&lt;/span&gt; &lt;h3 itemprop=&quot;name&quot;&gt; &lt;a href=&quot;&lt;%- theme.url%&gt;&quot; itemprop=&quot;url&quot; rel=&quot;author&quot;&gt;&lt;%- config.author %&gt;&lt;/a&gt; &lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;p id=&quot;showStr&quot;&gt;&lt;/p&gt; &lt;/section&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 4.修改插件默认应用的模板然后在博客站点目录下的node_modules文件夹下找到hexo-douban/lib，文件夹下有三个js文件，分别为：books-generator.js 、games-generator.js 、movies-generator.js，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容： /* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/ layout: [`douban`] 5.运行插件生成相应界面hexo clean && hexo douban -bgm && hexo g && hexo s 这时页面localhost:4000/books 或 localhost:4000/movies 可以看到界面了 PS:以下是可选的命令参数： -h, --help # 帮助页面 -b, --books # 只生成书单页面 -g, --games # 只生成游戏页面 -m, --movies # 只生成电影页面","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"将博客网站生成手机app获取下载安装码","slug":"将博客网站生成手机app获取下载安装码","date":"2020-12-17T08:15:26.000Z","updated":"2022-12-05T05:59:20.405Z","comments":true,"path":"2020/12/17/将博客网站生成手机app获取下载安装码/","link":"","permalink":"http://linxuesong.github.io/2020/12/17/%E5%B0%86%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E6%89%8B%E6%9C%BAapp%E8%8E%B7%E5%8F%96%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E7%A0%81/","excerpt":"","text":"一门App网站 https://www.yimenapp.com/ 这个比较靠谱，实惠","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"黑科技","slug":"黑科技","permalink":"http://linxuesong.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"}],"author":"linxuesong"},{"title":"如何调整顶部导航栏的整体长度以放入更多导航项","slug":"如何调整顶部导航栏的整体长度以放入更多导航项","date":"2020-12-17T08:09:35.000Z","updated":"2022-12-05T05:59:20.390Z","comments":true,"path":"2020/12/17/如何调整顶部导航栏的整体长度以放入更多导航项/","link":"","permalink":"http://linxuesong.github.io/2020/12/17/%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%95%B4%E4%BD%93%E9%95%BF%E5%BA%A6%E4%BB%A5%E6%94%BE%E5%85%A5%E6%9B%B4%E5%A4%9A%E5%AF%BC%E8%88%AA%E9%A1%B9/","excerpt":"","text":"修改主题目录/source/css/style.css文件 搜到如下内容按自己需要修改 属性： min-width越大一行所容纳的个数越多 ​ left:值越大离左侧的距离越远，这里是以整个屏幕的百分比进行衡量的","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"给博客添加小游戏界面谷歌恐龙小游戏加强版","slug":"给博客添加谷歌恐龙小游戏加强版","date":"2020-12-17T06:02:56.000Z","updated":"2022-12-05T05:59:20.452Z","comments":true,"path":"2020/12/17/给博客添加谷歌恐龙小游戏加强版/","link":"","permalink":"http://linxuesong.github.io/2020/12/17/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%B0%B7%E6%AD%8C%E6%81%90%E9%BE%99%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%8A%A0%E5%BC%BA%E7%89%88/","excerpt":"","text":"已有的游戏界面演示链接 https://dinoswords.gg/ 我们要做的就是添加一个引用接口即可 1.新建游戏界面文件dinoswords hexo new page dinoswords 因为markdown支持html所以 在博客目录/source/dinoswords/index.md接着生成好的内容填上: &lt;main class=&quot;content&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;div class=&quot;note info&quot;&gt; 操作介绍：&lt;br&gt; 开始游戏：首先点击屏幕 &lt;br&gt; 跳跃：注意是“点击屏幕” ！&lt;br&gt; 道具：跳跃后捡到的道具，使用下方对应26字母键盘键&lt;br&gt; 支持手机，电脑，等设备玩耍，点击屏幕开始和跳跃。 &lt;/div&gt; &lt;hr&gt; &lt;iframe width=&quot;100%&quot; height=&quot;488px&quot; src=&quot;https://dinoswords.gg/&quot; frameborder=&quot;no&quot; border=&quot;0&quot; scrolling=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; &gt;&lt;/iframe&gt; &lt;!-- &lt;iframe width=&quot;100%&quot; height=&quot;200px&quot; src=&quot;https://api.dlizi.com:555/dinogame/index.html&quot; frameborder=&quot;no&quot; border=&quot;0&quot; scrolling=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; &gt;&lt;/iframe&gt; --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt; 如果格式不符合要求可自行修改","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"Sakura添加在线和博主聊天功能","slug":"Sakura添加在线和博主聊天功能","date":"2020-12-16T09:49:00.000Z","updated":"2022-12-05T05:59:19.838Z","comments":true,"path":"2020/12/16/Sakura添加在线和博主聊天功能/","link":"","permalink":"http://linxuesong.github.io/2020/12/16/Sakura%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E5%92%8C%E5%8D%9A%E4%B8%BB%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/","excerpt":"","text":"参考博客:https://blog.csdn.net/cungudafa/article/details/104295156 添加 DaoVoice 在线聊天功能效果展示 1.官网注册账号获取appid修改conifg文件前往 DaoVoice 官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中。 daovoice: enable: true daovoice_app_id: 7e5676fe ##这里替换成你DaoVoice上的appid 2.在footer.ejs文件末尾中添加 &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&#39;https:&#39; == document.location.protocol ? &#39;https:&#39; : &#39;http:&#39;) + &quot;//widget.daovoice.io/widget/&lt;%= theme.daovoice.daovoice_app_id%&gt;.js&quot;,&quot;daovoice&quot;); daovoice(&#39;init&#39;, &#123; app_id: &quot;&lt;%= theme.daovoice.daovoice_app_id%&gt;&quot; &#125;); daovoice(&#39;update&#39;); 3.配置自己喜欢的聊天样式 4.可以绑定微信\\邮箱,如果有人发消息会邮箱\\微信消息提醒,在官网查看","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"Sakura主题添加背景切换功能","slug":"Sakura主题添加背景切换功能","date":"2020-12-16T09:23:02.000Z","updated":"2022-12-05T05:59:19.822Z","comments":true,"path":"2020/12/16/Sakura主题添加背景切换功能/","link":"","permalink":"http://linxuesong.github.io/2020/12/16/Sakura%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%88%87%E6%8D%A2%E5%8A%9F%E8%83%BD/","excerpt":"","text":"参考博客:https://cuitianyu.site/Sakura-config-home-20200901.html 恢复切换主题背景功能该功能的前端展示在hexo版本的sakura主题作者删除了,但是js和css代码没有删除，如果要恢复只需重新引用这部分js和css代码即可 1.从博客根目录themes/sakura/layout/layout.ejs的\\中添加 &lt;!-- 实现换肤功能 --&gt; &lt;%- partial(&#39;_partial/skin-list&#39;) %&gt; &lt;%- partial(&#39;_partial/skin-btn&#39;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;%- partial(&#39;_partial/mheader&#39;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;%- partial(&#39;_partial/aplayer&#39;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;/body&gt; &lt;/html&gt; 2.在themes/Sakura/layout/_partial文件夹下依次新建skin-btn.ejs和skin-list.ejsskin-btn.ejs的内容为： &lt;div class=&quot;changeSkin-gear no-select&quot;&gt; &lt;div class=&quot;keys&quot; id=&quot;setbtn&quot;&gt; &lt;span id=&quot;open-skinMenu&quot;&gt; 切换主题 | SCHEME TOOL &lt;i class=&quot;iconfont icon-gear inline-block rotating&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; skin-list.ejs的内容为： &lt;div class=&quot;skin-menu no-select&quot; id=&quot;mainskin&quot; style=&quot;position: fixed&quot;&gt; &lt;div class=&quot;theme-controls row-container&quot;&gt; &lt;ul class=&quot;menu-list&quot;&gt; &lt;li id=&quot;white-bg&quot;&gt; &lt;i class=&quot;fa fa-television&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;sakura-bg&quot;&gt; &lt;i class=&quot;iconfont icon-sakura&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;gribs-bg&quot;&gt; &lt;i class=&quot;fa fa-slack&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;KAdots-bg&quot;&gt; &lt;i class=&quot;iconfont icon-dots&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;totem-bg&quot;&gt; &lt;i class=&quot;fa fa-optin-monster&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;pixiv-bg&quot;&gt; &lt;i class=&quot;iconfont icon-pixiv&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;bing-bg&quot;&gt; &lt;i class=&quot;iconfont icon-bing&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;dark-bg&quot;&gt; &lt;i class=&quot;fa fa-moon-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;canvas id=&quot;night-mode-cover&quot;&gt;&lt;/canvas&gt; 到目前位置我们可以在右下角看到前端切换背景的控制面板 3.背景图片可以在themes/Sakura/source/js/sakura-app.js中更换，其位置为： changeBG(&#39;#sakura-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/sakura.png&#39;) changeBG(&#39;#gribs-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/plaid.jpg&#39;) changeBG(&#39;#pixiv-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/star.png&#39;) changeBG(&#39;#KAdots-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/point.png&#39;) changeBG(&#39;#totem-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/little-monster.png&#39;) changeBGnoTrans(&#39;#bing-bg&#39;, &#39;https://api.shino.cc/bing/&#39;) $(&#39;.skin-menu #white-bg&#39;).click(function () &#123; mashiro_global.variables.skinSecter = false mashiro_global.variables.isNight = false $(&#39;#night-mode-cover&#39;).css(&#39;visibility&#39;, &#39;hidden&#39;) $(&#39;body&#39;).css(&#39;background-image&#39;, &#39;none&#39;) $(&#39;.blank&#39;).css(&#39;background-color&#39;, &#39;rgba(255,255,255,.0)&#39;) $(&#39;.pattern-center-sakura&#39;).removeClass(&#39;pattern-center-sakura&#39;).addClass(&#39;pattern-center&#39;) $(&#39;.headertop-bar-sakura&#39;).removeClass(&#39;headertop-bar-sakura&#39;).addClass(&#39;headertop-bar&#39;) $(&#39;#banner_wave_1&#39;).removeClass(&#39;banner_wave_hide_fit_skin&#39;) $(&#39;#banner_wave_2&#39;).removeClass(&#39;banner_wave_hide_fit_skin&#39;) closeSkinMenu() setCookie(&#39;bgImgSetting&#39;, &#39;&#39;, 30) &#125;) $(&#39;.skin-menu #dark-bg&#39;).click(function () &#123; mashiro_global.variables.skinSecter = true mashiro_global.variables.isNight = true $(&#39;body&#39;).css(&#39;background-image&#39;, &#39;url(https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/other/starry_sky.png)&#39;) $(&#39;.blank&#39;).css(&#39;background-color&#39;, &#39;rgba(255,255,255,.8)&#39;) $(&#39;#night-mode-cover&#39;).css(&#39;visibility&#39;, &#39;visible&#39;) $(&#39;.pattern-center&#39;).removeClass(&#39;pattern-center&#39;).addClass(&#39;pattern-center-sakura&#39;) $(&#39;.headertop-bar&#39;).removeClass(&#39;headertop-bar&#39;).addClass(&#39;headertop-bar-sakura&#39;) $(&#39;#banner_wave_1&#39;).addClass(&#39;banner_wave_hide_fit_skin&#39;) 替换其中所有图片的url即可完成更换。","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"每页文章结尾出增加标签云展示","slug":"每页文章结尾出增加标签云展示","date":"2020-12-11T13:01:19.000Z","updated":"2022-12-05T05:59:20.436Z","comments":true,"path":"2020/12/11/每页文章结尾出增加标签云展示/","link":"","permalink":"http://linxuesong.github.io/2020/12/11/%E6%AF%8F%E9%A1%B5%E6%96%87%E7%AB%A0%E7%BB%93%E5%B0%BE%E5%87%BA%E5%A2%9E%E5%8A%A0%E6%A0%87%E7%AD%BE%E4%BA%91%E5%B1%95%E7%A4%BA/","excerpt":"","text":"https://blog.csdn.net/cungudafa/article/details/104616500","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"增加文章贡献日历","slug":"增加文章贡献日历","date":"2020-12-11T12:59:21.000Z","updated":"2022-12-05T05:59:20.374Z","comments":true,"path":"2020/12/11/增加文章贡献日历/","link":"","permalink":"http://linxuesong.github.io/2020/12/11/%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86/","excerpt":"","text":"https://blog.csdn.net/cungudafa/article/details/106420842","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"linxuesong"},{"title":"动态规划刷题整理","slug":"动态规划刷题整理","date":"2020-12-10T12:04:41.000Z","updated":"2022-12-05T05:59:20.265Z","comments":true,"path":"2020/12/10/动态规划刷题整理/","link":"","permalink":"http://linxuesong.github.io/2020/12/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/","excerpt":"","text":"LeetCode刷题集锦5. 最长回文子串题目描述给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。 示例 1： 输入: &quot;babad&quot; 输出: &quot;bab&quot; 注意: &quot;aba&quot; 也是一个有效答案。 示例 2： 输入: &quot;cbbd&quot; 输出: &quot;bb&quot; 解题思路①想到最优子结构 大字符串是回文，把首尾字符取去掉后小字符串也是回文 aba是回文，取首尾后子串b也是 ②最小子问题 只有一个字母，必定是回文 有两个子母且两个字母相等才是回文 ③状态转移方程 最小子问题如何推出大问题 dp(i,j)=\\begin{cases} true & i==j只有一个字母 \\\\ str[j]==str[i] & j-i==1两个子母 \\\\ dp(i+1,j-1)且str[j]==str[i] &j-i>1 大于两个字母 \\end{cases}④实现动态规划 dp二维数组表示【i，j】范围子串是否为回文，注意遍历的顺序，当大于两个字母时要左下的数组值才能使用状态转移，所以遍历从最后行自左向右遍历 实现代码func longestPalindrome(s string) string &#123; result_s,result_e := 0,0 length := len(s) dp := make([][]bool, length) for i:=0; i =0;i-- &#123; for j:=i;j1 && dp[i+1][j-1] && s[i]==s[j])&#123; dp[i][j] = true if(j-i > result_e-result_s) &#123; result_s,result_e = i,j &#125; &#125;else &#123; dp[i][j] = false &#125; &#125; &#125; return s[result_s:result_e+1] &#125; 62. 不同路径题目描述点链接 解题思路①想到最优子结构 到图中某一点的步数取决于其上方和左方两个位置的走法 ②最小子问题 在起点，不用走只有一种走法 ③状态转移方程 最小子问题如何推出大问题 dp(i,j)=\\begin{cases} 1 & i=0||j=0 \\\\ dp(i-1,j)+dp(i,j-1) &j!=0||i!=0>1 \\end{cases}④实现动态规划 实现代码注：实现代码多用了一行一列省去了对边界条件的判断 func uniquePaths(m int, n int) int &#123; dp := make([][]int, m+1) for i:=0;i","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://linxuesong.github.io/tags/%E7%AE%97%E6%B3%95/"}],"author":"linxuesong"},{"title":"hexo增加RSS订阅功能","slug":"hexo增加RSS订阅功能","date":"2020-12-04T04:12:05.000Z","updated":"2022-12-05T05:59:19.963Z","comments":true,"path":"2020/12/04/hexo增加RSS订阅功能/","link":"","permalink":"http://linxuesong.github.io/2020/12/04/hexo%E5%A2%9E%E5%8A%A0RSS%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/","excerpt":"","text":"Hexo增加RSS订阅RSS介绍生成自己网站的聚合信息，让别人去订阅供其收获你自己的最新消息 ——有了RSS后别人可以关注了你的最新博客动态了 向自己主题中添加RSS功能步骤1.安装插件npm install hexo-generator-feed 2.主题配置文件中增加# Extensions ## Plugins: http://hexo.io/plugins/ #RSS订阅 plugin: hexo-generator-feed #Feed Atom feed: type: atom #RSS的类型(atom/rss2) path: atom.xml #文件路径,默认是atom.xml/rss2.xml limit: 20 #展示文章的数量,使用0或则false代表展示全部 hub: content: #在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false content_limit: 140 #指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现 content_limit_delim: &#39; &#39; #上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断. order_by: -date icon: #icon.png 3.themes\\sakura_config.yml# 简易信息聚合,站点共享 rss: /atom.xml","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"linxuesong"},{"title":"Leetcode-119.杨辉三角 II","slug":"LeetCode119. 杨辉三角 II","date":"2020-09-01T12:19:42.000Z","updated":"2022-12-05T05:59:19.619Z","comments":true,"path":"2020/09/01/LeetCode119. 杨辉三角 II/","link":"","permalink":"http://linxuesong.github.io/2020/09/01/LeetCode119.%20%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%20II/","excerpt":"","text":"LeetCode119. 杨辉三角 II1.0题目描述给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。 在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 3 输出: [1,3,3,1] 进阶： 你可以优化你的算法到 O(k) 空间复杂度吗？ 2.0 题目分析和上一题118联系一起，我们发现二维数组存杨辉三角上一层数组生成下一层数组，现在要求仅用一维数组存储 如何在一维数组的前提下，使用我们的递推公式 本层arr[i]=上一层arr[i] + 上一层arr[i-1] 3.0两种思路对比3.1正向遍历思维遍历时 arr[0] = arr[0]上一层 本层arr[1] = arr[1]上一层 + arr[0]上一层 本层arr[2] = arr[2]上一层+arr[1]（公式要求上一层，但这一步已经arr[1]变成本层了） 所以正向遍历思路就是保存这个上一层的arr[i] 需要变量个数分析：一次遍历要 保存本层arr[i]、用上一层arr[i-1] 保存是一个变量cur 用上一层又是一个变量pre 代码如下 func getRow(rowIndex int) []int &#123; ret := make([]int, rowIndex+1) for i := 0; i < rowIndex+1; i++ &#123; pre := 0 cur := ret[0] for j:=0; j < i; j++ &#123; ret[j] = pre + cur pre,cur = cur, ret[j+1] &#125; ret[i] = 1 &#125; return ret &#125; 进一步优化如果不用两个变量保存，而是换一种方式呢 在头部插入一个0，让数组错开一位，不存在覆盖的现象 func getRow(rowIndex int) []int &#123; res :=[]int&#123;1&#125; for i:=1;i","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Leetcode-581. 最短无序连续子数组","slug":"LeetCode-581. 最短无序连续子数组","date":"2020-09-01T12:16:49.000Z","updated":"2022-12-05T05:59:19.603Z","comments":true,"path":"2020/09/01/LeetCode-581. 最短无序连续子数组/","link":"","permalink":"http://linxuesong.github.io/2020/09/01/LeetCode-581.%20%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/","excerpt":"","text":"581. 最短无序连续子数组 1.0题目描述给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。 你找到的子数组应是最短的，请输出它的长度。 示例 1: 输入: [2, 6, 4, 8, 10, 9, 15] 输出: 5 解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。 说明 : 输入的数组长度范围在 [1, 10,000]。 输入的数组可能包含重复元素 ，所以升序的意思是&lt;=。 2.0解题思路最短无序数组的特征: ①数组为nums[0:i-1] nums[i:j] nums[j+1:n-1] ②子序列 nums[0:i-1] 和 nums[j+1:n-1]升序 ③假设nums[i:j]中的最大最小值为max min，则nums[0:i-1]小于min 并且 nums[j+1:n]大于max 2.1思路一：暴力搜索i，j①i从0到n-1 j从0到n-1， ②i，j固定时判断是否满足上面条件(需要遍历整个n才能判断2.0中③) 2.2思路二：数组排序我们将数组 numsnums 进行排序，记为 nums_sortednums_sorted 。然后我们比较 numsnums 和 nums_sortednums_sorted 的元素来决定最左边和最右边不匹配的元素。它们之间的子数组就是要求的最短无序子数组。 2.3思路三：对于第一个乱序不是左边界的优化一句话概括：第一个乱序不是逆序 一开始的错误思路：正向找左边界 左边界：认为第一个乱序的位置如：1230， 0即左边界 但对于1230 -1 0之前 (1,-1)为逆序 所以 1为左边界 错误原因在于正向第一个乱序 i后面的元素和前面元素有可能逆序 第一个乱序不是第一个逆序 两种解决方法 2.3.1反向查找解决 巧妙但不好想反向查找最后一个逆序对即可避免 j &lt; 所有j之前的数; 如果j比之前的数大就逆序 我们找到一个逆序后会找下一个逆序，知道最后一个，这样保证了所有的逆序都找了 举例：1 2 3 0 -1 从后向前 最小值初始为-1 下标也为-1 0 &gt; -1 (0,-1)逆序 最小值为-1 3&gt;-1 (3,-1)逆序，最小值-1 …… 1&gt;-1 (1,-1)逆序，最小值-1 举例二： -2 1 2 3 0 …… 1&gt;-1 (1,-1)逆序，最小值-1 -2 &lt; -1 最后一个还是（1，-1）逆序，最小值-2 最后逆序的 位置是1所在的位置 2.3.2用第一个乱序定大致范围，再 扩大定最后范围什么意思呢？ 一句话：乱序夹的区间的最大元素，最小元素其排序后的位置即为左右边界 例：123 0 0.5 -1 乱序夹的区间 0 0.5 最大值0.5 最小值0 他们最终的位置会在123 -1中所以最短连续子序列不是0 0.5 0应当放到左边放到 1前 所以左边界为第一个元素 0.5放右边 放到-1之前 所以右边界为最后一个元素 另一种解释方式 乱序夹的范围是首尾第一个逆势拐点，范围内最大最小为a，b a,b延申找到最后左右边界 实现代码仅实现2.3.2思路代码 func findUnsortedSubarray(nums []int) int &#123; low := 0 high := len(nums)-1 for ;low < high && nums[low]","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"58信天翁训练活动","slug":"58信天翁训练活动","date":"2020-08-15T15:16:53.000Z","updated":"2022-12-05T05:59:19.275Z","comments":true,"path":"2020/08/15/58信天翁训练活动/","link":"","permalink":"http://linxuesong.github.io/2020/08/15/58%E4%BF%A1%E5%A4%A9%E7%BF%81%E8%AE%AD%E7%BB%83%E6%B4%BB%E5%8A%A8/","excerpt":"","text":"校招新入职训练活动： 时间悄悄地从手里溜走，或许我已不再年轻，不再可以懵懂无知。转眼入职一月有余，一个人一段过往，一个人一段羁绊。我们走走停停，历风雨、经风霜，有过彩红有过微笑有过眼泪，我大多生命都在厌恶着世界、逃离着生活，试过爱世界，试过把自己关在自己的心里，我办不到，像是躲进心里的黑屋，外面的人熙熙攘攘，他们的声音、行动，你看在眼里停入耳中却无法组织进入心中。哭泣的心灵渴望陪伴和安慰，心声一次次一遍遍告诉自己去得到爱，然而生活中无法感受爱。","categories":[{"name":"生活","slug":"生活","permalink":"http://linxuesong.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://linxuesong.github.io/tags/%E6%84%9F%E6%82%9F/"}],"author":"linxuesong"},{"title":"Leetcode88. 合并两个有序数组","slug":"Leetcode88-合并两个有序数组","date":"2020-08-12T12:19:13.000Z","updated":"2022-12-05T05:59:19.744Z","comments":true,"path":"2020/08/12/Leetcode88-合并两个有序数组/","link":"","permalink":"http://linxuesong.github.io/2020/08/12/Leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"Leetcode-88. 合并两个有序数组 1.问题描述给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。 说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。 示例: 输入:nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6], n = 3 输出: [1,2,2,3,5,6] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/merge-sorted-array著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 2.解题思路注：直接写最优思路了，想看思考过程的可以看最后的总结部分 数组一nums1有最后n个空余位置，利用这点 三个变量 cur1 = m-1 数组一数字的尾部cur2 = n-1 数组二的尾部maxV_site = m+n-1 数组一最后的尾部，存放cur1、cur2较大者 依次比较，逐个放入 3.实现代码func merge(nums1 []int, m int, nums2 []int, n int) &#123; var( cur1 = m-1 cur2 = n-1 maxV_site = m+n-1 // 存放当前两数组的最大值应放入nums1的位置 ) for ;cur1 &gt;= 0 &amp;&amp; cur2 &gt;= 0; &#123; if(nums1[cur1] &gt; nums2[cur2]) &#123; nums1[maxV_site] = nums1[cur1] cur1-- &#125;else &#123; nums1[maxV_site] = nums2[cur2] cur2-- &#125; maxV_site-- &#125; // 一个数组遍历完了 cur2 或 cur1有一个为-1 cur1==-1 把数组二剩下的放前面 cur2==-1不用动，数组一已经在前面了 for ; cur2 &gt;=0; cur2-- &#123; nums1[cur2] = nums2[cur2] &#125; &#125; 4.总结一开始想到从头遍历，比较后要插入数组二元素则让数组一的每个元素后移一位 复杂度为O(n²) 进一步想问题在要移动每一位，如果要是不移动的话直接放要把数组一的元素替代，可以把被替代的数组一元素临时暂存起来，我们想是不是只用保存一次数组一的元素就可以了呢 最终从尾部遍历，省去了进步临时保存变量的问题 题外话：思想一开始还有一个往归并排序申请O(n)空间的方式，但一想都给了空间了就没再深想下去。有了一个思路后大致想一下时间复杂度，不可取后立即斩断，集中精神想其他方法","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Leetcode-66. 加一","slug":"Leetcode-66-加一","date":"2020-08-12T09:16:49.000Z","updated":"2022-12-05T05:59:19.728Z","comments":true,"path":"2020/08/12/Leetcode-66-加一/","link":"","permalink":"http://linxuesong.github.io/2020/08/12/Leetcode-66-%E5%8A%A0%E4%B8%80/","excerpt":"","text":"Leetcode-66. 加一 1.0题目描述给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1: 输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字 123。示例 2: 输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字 4321。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/plus-one著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 2.0解题思路这道题比较简单，从后向前遍历找到第一个非9数字，记下标为not9first，该下标之后所有数全为0，本下标元素值+1 对异常情况值溢出做特殊处理 3.0实现代码func plusOne(digits []int) []int &#123; oldLen := len(digits) not9first := oldLen-1 // 从后向前非9的第一个数 for ; not9first &gt;= 0 &amp;&amp; digits[not9first] == 9; not9first-- &#123; digits[not9first] = 0 // 是9就成0 &#125; if(not9first != -1) &#123; // 加完没溢出 digits[not9first] += 1 &#125;else &#123; // 加完溢出 digits = append([]int&#123;1&#125;, digits...) // 首部赋值1 &#125; return digits &#125;","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Hexo-Sakura标签云分类云","slug":"Hexo-Sakura标签云分类云","date":"2020-08-12T06:23:37.000Z","updated":"2022-12-05T05:59:19.431Z","comments":true,"path":"2020/08/12/Hexo-Sakura标签云分类云/","link":"","permalink":"http://linxuesong.github.io/2020/08/12/Hexo-Sakura%E6%A0%87%E7%AD%BE%E4%BA%91%E5%88%86%E7%B1%BB%E4%BA%91/","excerpt":"","text":"本文参考博客https://www.sakura521.cn/technology/sakurameihua.html 添加优美的标签页效果图如下： 概览我们要创建四个文件，修改一个文件,最后新生成一个标签页面 新建文件1博客目录\\themes\\Sakura\\layout\\tages.ejs ⚠：不是tag是tags 其内容如下： &lt;div class=&quot;blank&quot; style=&quot;padding-top: 75px;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;pattern-center &quot;&gt; &lt;div class=&quot;pattern-attachment-img&quot;&gt; &lt;% if (page.photos) &#123; %&gt; &lt;img src=&quot;&lt;%= page.photos %&gt;&quot; src=&quot;&lt;%- theme.lazyloadImg %&gt;&quot; data-src=&quot;&lt;%= page.photos %&gt;&quot; class=&quot;lazyload&quot; onerror=&quot;imgError(this,3)&quot; style=&quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&quot;&gt; &lt;% &#125; else &#123; %&gt; &lt;img src=&quot;&lt;%= theme.bg[Math.floor(Math.random() * theme.bg.length + 1)-1] %&gt;&quot; src=&quot;&lt;%- theme.lazyloadImg %&gt;&quot; data-src=&quot;&lt;%= page.photos %&gt;&quot; class=&quot;lazyload&quot; onerror=&quot;imgError(this,3)&quot; style=&quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&quot;&gt; &lt;% &#125; %&gt; &lt;header class=&quot;pattern-header &quot;&gt; &lt;h1 class=&quot;entry-title&quot;&gt; 标签云&lt;/h1&gt; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;iconfont icon-attention&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/span&gt; &lt;/header&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot; class=&quot;site-content&quot;&gt; &lt;div id=&quot;main&quot;&gt; &lt;header class=&quot;page-header&quot;&gt; &lt;h1 class=&quot;cat-title&quot;&gt; 标签云&lt;/h1&gt; &lt;span class=&quot;cat-des&quot;&gt; &lt;p&gt; &lt;%- &quot;Tags &quot; + site.tags.length %&gt;&lt;/p&gt; &lt;/span&gt; &lt;/header&gt; &lt;div id=&quot;main-part&quot;&gt; &lt;div class=&quot;tag-cloud&quot;&gt; &lt;div class=&quot;tag-cloud-title&quot;&gt; &lt;/div&gt; &lt;div class=&quot;tag-cloud-tags&quot;&gt; &lt;%- tagcloud(&#123; min_font: 15, max_font: 30, amount: 200, color: true, start_color: &#39;#ff6666&#39;, end_color: &#39;#0099cc&#39; &#125;) %&gt; &lt;/div&gt; &lt;/div&gt; &lt;%- partial(&#39;_widget/tag-cloud&#39;) %&gt; &lt;% if (site.tags &amp;&amp; site.tags.length &gt; 0) &#123; %&gt; &lt;%- partial(&#39;_widget/tag-wordcloud&#39;) %&gt; &lt;% &#125; %&gt; &lt;section class=&quot;author-profile&quot;&gt; &lt;div class=&quot;info&quot; itemprop=&quot;author&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; &lt;a href=&quot;/about/&quot; class=&quot;profile gravatar&quot;&gt;&lt;img src=&quot;&lt;%- (theme.cdn || &#39;&#39;) + theme.avatar%&gt;&quot; itemprop=&quot;image&quot; alt=&quot;hojun&quot; height=&quot;70&quot; width=&quot;70&quot;&gt;&lt;/a&gt; &lt;div class=&quot;meta&quot;&gt; &lt;span class=&quot;title&quot;&gt;Author&lt;/span&gt; &lt;h3 itemprop=&quot;name&quot;&gt; &lt;a href=&quot;&lt;%- theme.url%&gt;&quot; itemprop=&quot;url&quot; rel=&quot;author&quot;&gt;&lt;%- config.author %&gt;&lt;/a&gt; &lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;p id=&quot;showStr&quot;&gt;&lt;/p&gt; &lt;/section&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 新建文件2、3\\themes\\Sakura\\layout_widget\\tag-cloud.ejs \\themes\\Sakura\\layout_widget\\tag-wordcloud.ejs 各自内内容如下 _widget/tag-cloud.ejs &lt;% var colorArr = [&#39;#F9EBEA&#39;, &#39;#F5EEF8&#39;, &#39;#D5F5E3&#39;, &#39;#E8F8F5&#39;, &#39;#FEF9E7&#39;, &#39;#F8F9F9&#39;, &#39;#82E0AA&#39;, &#39;#D7BDE2&#39;, &#39;#A3E4D7&#39;, &#39;#85C1E9&#39;, &#39;#F8C471&#39;, &#39;#F9E79F&#39;, &#39;#FFF&#39;]; var colorCount = colorArr.length; var hashCode = function (str) &#123; if (!str &amp;&amp; str.length === 0) &#123; return 0; &#125; var hash = 0; for (var i = 0, len = str.length; i &lt; len; i++) &#123; hash = ((hash &lt;&lt; 5) - hash) + str.charCodeAt(i); hash |= 0; &#125; return hash; &#125;; var i = 0; var isTag = is_tag(); %&gt; &lt;div id=&quot;tags&quot; class=&quot;container chip-container&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;div class=&quot;tag-title center-align&quot;&gt; &lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp; 标签 &lt;/div&gt; &lt;div class=&quot;tag-chips&quot;&gt; &lt;% site.tags.map(function(tag) &#123; %&gt; &lt;% i++; var color = i &gt;= colorCount ? colorArr[Math.abs(hashCode(tag.name) % colorCount)] : colorArr[i - 1]; %&gt; &lt;a href=&quot;&lt;%- url_for(tag.path) %&gt;&quot; title=&quot;&lt;%- tag.name %&gt;: &lt;%- tag.length %&gt;&quot;&gt; &lt;span class=&quot;chip center-align waves-effect waves-light &lt;% if (isTag &amp;&amp; tag.name == page.tag) &#123; %&gt; chip-active &lt;% &#125; else &#123; %&gt; chip-default &lt;% &#125; %&gt;&quot; data-tagname=&quot;&lt;%- tag.name %&gt;&quot; style=&quot;background-color: &lt;%- color %&gt;;&quot;&gt;&lt;%- tag.name %&gt; &lt;span class=&quot;tag-length&quot;&gt;&lt;%- tag.length %&gt;&lt;/span&gt; &lt;/span&gt; &lt;/a&gt; &lt;% &#125;); %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;style&gt; #tags&#123; margin-top: 60px; &#125; .center-align&#123; text-align:center &#125; .chip-container &#123; margin-top: -60px; &#125; .chip-container .tag-title &#123; margin-bottom: 10px; color: #3C4858; font-size: 1.75rem; font-weight: 400; &#125; .chip-container .tag-chips &#123; margin: 1rem auto 0.5rem; max-width: 850px; text-align: center; &#125; .chip-container .tags-posts &#123; margin-top: 20px; &#125; .chip-container .chip-default &#123; color: #7F95D1; &#125; .chip-container .chip-active &#123; color: #FFF !important; background: linear-gradient(to bottom right, #FF5E3A 0%, #FF2A68 100%) !important; box-shadow: 2px 5px 10px #aaa !important; &#125; .chip-container .chip &#123; margin: 10px 10px; padding: 19px 14px; display: inline-flex; line-height: 0; font-size: 1rem; font-weight: 500; border-radius: 5px; cursor: pointer; box-shadow: 0 3px 5px rgba(0, 0, 0, .12); z-index: 0; &#125; .chip-container .chip:hover &#123; color: #fff; background: linear-gradient(to right, #FFC0BE 0%, #FF82A9 100%) !important; &#125; .chip .tag-length &#123; margin-left: 5px; margin-right: -2px; font-size: 0.5rem; &#125; .chip-default .tag-length &#123; color: #e91e63; margin-top: 1px; &#125; .chip-active .tag-length &#123; color: #fff; &#125; &lt;/style&gt; _widget/tag-wordcloud.ejs &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blinkfox.github.io/libs/jqcloud/jqcloud.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blinkfox.github.io/libs/aos/aos.css&quot;&gt; &lt;style type=&quot;text/css&quot;&gt; #tag-wordcloud &#123; width: 100%; height: 300px; &#125; &lt;/style&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://blinkfox.github.io/libs/aos/aos.js&quot;&gt;&lt;/script&gt; &lt;script&gt; AOS.init(); &lt;/script&gt; &lt;div class=&quot;container&quot; data-aos=&quot;fade-up&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;tag-title center-align&quot;&gt; &lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp; 标签云 &lt;/div&gt; &lt;div id=&quot;tag-wordcloud&quot; class=&quot;card-content&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://blinkfox.github.io/libs/jqcloud/jqcloud-1.0.4.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; &lt;% var tagWordArr = []; site.tags.map(function (tag) &#123; tagWordArr.push(&#123; &#39;text&#39;: tag.name, &#39;weight&#39;: tag.length, &#39;link&#39;: decodeURI(url_for(tag.path)) &#125;); &#125;); var tagWords = JSON.stringify(tagWordArr); %&gt; $(&#39;#tag-wordcloud&#39;).jQCloud( &lt;%- tagWords %&gt;, &#123; autoResize: true &#125;); &lt;/script&gt; 新建文件4目录是博客目录\\themes\\Sakura\\source\\css\\tags.css 这个文件是给标签tag-cloud增加前面小图标样式的 /*tag-cloud*/ .tag-cloud &#123; text-align: center; margin-top: 20px; &#125; .tag-cloud-title &#123; font-size: 1.8rem; text-align: center; &#125; .tag-cloud-tags &#123; text-align: center; &#125; .tag-cloud a &#123; display: inline-block; margin: 0 0.4rem; text-decoration: none; font-weight: normal; font-size: 15px; cursor: pointer; line-height: normal; padding: 5px 5px 5px 10px; position: relative; border-radius: 0 5px 5px 0; -webkit-transition: all 0.3s; -moz-transition: all 0.3s; -o-transition: all 0.3s; -ms-transition: all 0.3s; transition: all 0.3s; &#125; .tag-cloud a:before &#123; content: &quot;🔖&quot;; &#125; .tag-cloud a:hover &#123; color: #ff7242 !important; -webkit-transform: scale(1.2); -moz-transform: scale(1.2); -o-transform: scale(1.2); -ms-transform: scale(1.2); transform: scale(1.2); &#125; 修改文件博客目录\\themes\\Sakura\\source\\css\\styles.css 将这段代码复制到style.css末尾 /*标签云*/ .chip-container &#123; margin-top: 60px; &#125; .chip-container .tag-title &#123; margin-bottom: 10px; color: #3C4858; font-size: 1.75rem; font-weight: 400; &#125; .chip-container .tag-chips &#123; margin: 1rem auto 0.5rem; max-width: 850px; text-align: center; &#125; .chip-container .tags-posts &#123; margin-top: 20px; &#125; .chip-container .chip-default &#123; color: #34495e; &#125; .chip-container .chip-active &#123; color: #FFF !important; background: linear-gradient(to bottom right, #FF5E3A 0%, #FF2A68 100%) !important; box-shadow: 2px 5px 10px #aaa !important; &#125; .chip-container .chip &#123; margin: 10px 10px; padding: 19px 14px; display: inline-flex; line-height: 0; font-size: 1rem; font-weight: 500; border-radius: 5px; cursor: pointer; box-shadow: 0 3px 5px rgba(0, 0, 0, .12); &#125; .chip-container .chip:hover &#123; color: #fff; background: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%) !important; &#125; .chip .tag-length &#123; margin-left: 5px; margin-right: -2px; font-size: 0.5rem; &#125; .chip-default .tag-length &#123; color: #e91e63; margin-top: 1px; &#125; .chip-active .tag-length &#123; color: #fff; &#125; .tag-title.center-align &#123; margin-top: 100px; text-align: center; &#125; /*标签云end*/ 生成标签界面使用命令hexo new page “tags”，修改博客根目录下source/tags/index.md title: tags date: 2020-03-09 13:50:05 layout: tags 在 http://localhost:4000/tags查看页面 添加优美的分类页 概览新建文件1主题目录\\layout\\categories.ejs 内容为 &lt;%- partial(&#39;_partial/header&#39;) %&gt; &lt;main class=&quot;content&quot;&gt; &lt;%- partial(&#39;_widget/category-cloud&#39;) %&gt; &lt;% if (site.categories &amp;&amp; site.categories.length &gt; 0) &#123; %&gt; &lt;%- partial(&#39;_widget/category-radar&#39;) %&gt; &lt;% &#125; %&gt; &lt;/main&gt; 新建文件2、3主题目录\\layout_widget\\category-cloud.ejs 主题目录\\layout_widget\\category-radar.ejs _widget\\category-cloud.ejs &lt;% var colorArr = [&#39;#F9EBEA&#39;, &#39;#F5EEF8&#39;, &#39;#D5F5E3&#39;, &#39;#E8F8F5&#39;, &#39;#FEF9E7&#39;, &#39;#F8F9F9&#39;, &#39;#82E0AA&#39;, &#39;#D7BDE2&#39;, &#39;#A3E4D7&#39;, &#39;#85C1E9&#39;, &#39;#F8C471&#39;, &#39;#F9E79F&#39;, &#39;#FFF&#39;]; var colorCount = colorArr.length; var hashCode = function (str) &#123; if (!str &amp;&amp; str.length === 0) &#123; return 0; &#125; var hash = 0; for (var i = 0, len = str.length; i &lt; len; i++) &#123; hash = ((hash &lt;&lt; 5) - hash) + str.charCodeAt(i); hash |= 0; &#125; return hash; &#125;; var i = 0; var isCategory = is_category(); %&gt; &lt;div id=&quot;category-cloud&quot; class=&quot;container chip-container&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;div class=&quot;tag-title center-align&quot;&gt; &lt;i class=&quot;fa fa-bookmark&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;文章分类 &lt;/div&gt; &lt;div class=&quot;tag-chips&quot;&gt; &lt;% if (site.categories &amp;&amp; site.categories.length &gt; 0) &#123; %&gt; &lt;% site.categories.map(function(category) &#123; %&gt; &lt;% i++; var color = i &gt;= colorCount ? colorArr[Math.abs(hashCode(category.name) % colorCount)] : colorArr[i - 1]; %&gt; &lt;a href=&quot;&lt;%- url_for(category.path) %&gt;&quot; title=&quot;&lt;%- category.name %&gt;: &lt;%- category.length %&gt;&quot;&gt; &lt;span class=&quot;chip center-align waves-effect waves-light &lt;% if (isCategory &amp;&amp; category.name == page.category) &#123; %&gt; chip-active &lt;% &#125; else &#123; %&gt; chip-default &lt;% &#125; %&gt;&quot; style=&quot;background-color: &lt;%- color %&gt;;&quot;&gt;&lt;%- category.name %&gt; &lt;span class=&quot;tag-length&quot;&gt;&lt;%- category.length %&gt;&lt;/span&gt; &lt;/span&gt; &lt;/a&gt; &lt;% &#125;); %&gt; &lt;% &#125; else &#123; %&gt; &lt;%= __(&#39;categoryEmptyTip&#39;) %&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; _widget\\category-radar.ejs &lt;style type=&quot;text/css&quot;&gt; #category-radar &#123; margin-top: 50px; width: 100%; height: 360px; &#125; &lt;/style&gt; &lt;div class=&quot;container&quot; data-aos=&quot;fade-up&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div id=&quot;category-radar&quot; class=&quot;card-content&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/gh/wallleap/cdn/js/echarts.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var radarChart = echarts.init(document.getElementById(&#39;category-radar&#39;)); &lt;% var categories = site.categories; &#123;1&#125; // Find the maximum and average values of the post categories. var radarValueArr = []; categories.some(function(category) &#123; radarValueArr.push(category.length); &#125;); &#123;1&#125; var max = Math.max.apply(null, radarValueArr) + Math.min.apply(null, radarValueArr); &#123;1&#125; // Calculate the data needed for the radar chart. var indicatorArr = []; categories.map(function(category) &#123; indicatorArr.push(&#123;&#39;name&#39;: category.name, &#39;max&#39;: max&#125;); &#125;); &#123;1&#125; var indicatorData = JSON.stringify(indicatorArr); var radarValueData = JSON.stringify(radarValueArr); %&gt; var option = &#123; title: &#123; left: &#39;center&#39;,var text: &#39;文章分类雷达图&#39;, textStyle: &#123; fontWeight: 500, fontSize: 22 &#125; &#125;, tooltip: &#123;&#125;, radar: &#123; name: &#123; textStyle: &#123; color: &#39;#3C4858&#39; &#125; &#125;, indicator: &lt;%- indicatorData %&gt;, nameGap: 5, center: [&#39;50%&#39;,&#39;55%&#39;], radius: &#39;66%&#39; &#125;, series: [&#123; type: &#39;radar&#39;, color: [&#39;#3ecf8e&#39;], itemStyle: &#123;normal: &#123;areaStyle: &#123;type: &#39;default&#39;&#125;&#125;&#125;, data : [ &#123; value : &lt;%- radarValueData %&gt;, name : &#39;文章分类数量&#39; &#125; ] &#125;] &#125;; radarChart.setOption(option); &lt;/script&gt; 接着用命令hexo new page “categories”创建分类页 修改博客根目录下source/categories/index.md title: categories date: 2020-03-09 13:50:05 layout: categories 查看http://localhost:4000/categories 最后完善接着就是把这两个页面放到导航栏上面去 执行 hexo new page tages hexo new page categories 将source中对应目录下面的index.md中的layout设置成对应的tags和categories就好了 修改主题配置文件，将这两行代码放到留言板之前 标签: {path: /tags/, fa: fa-tag } 分类: {path: /categories/, fa: fa-bookmark } 操作依据EJS是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。 我们的layout文件夹下的tags.ejs文件引用_widget下的标签相关ejs文件，主要负责生成基本的html要素，内容用到了新的css样式 之后修改source/css/style.css文件加入标签引用的相关样式供使用 最后的问题：发现加载界面是对于标签下的标签字展示和文章下的文章雷达都会出现需要刷新界面才会展示的问题 2021.01.14日 问题处理之所以出现刷新界面不显示雷达的问题是因为在同一节点第二次点击时会雷达样式文件中的那个let定义的变量会再次定义 所以我们要把let改为var避免报错js中的变量重复定义的问题。我已经把上面的js代码中的let改为var了，应该可以正常使用，只是我没验证过 如果出现问题的话，可以按照问题范围查找一下 于2021.01.14日记录","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"name":"Sakura","slug":"Sakura","permalink":"http://linxuesong.github.io/tags/Sakura/"}],"author":"linxuesong"},{"title":"Leetcode-53. 最大子序和","slug":"Leetcode-53-最大子序和","date":"2020-08-11T12:19:50.000Z","updated":"2022-12-05T05:59:19.713Z","comments":true,"path":"2020/08/11/Leetcode-53-最大子序和/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/Leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/","excerpt":"","text":"Leetcode-53. 最大子序和 题目描述给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 示例: n’j输入: [-2,1,-3,4,-1,2,1,-5,4]输出: 6解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。进阶: 如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-subarray著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 解法一：暴力方法O(n²)解题思路两层遍历，外层遍历所有元素，变量start；内层遍历start~结束元素，变量end 过程中维持着tmp_sum表示start~end的子序列和 两层遍历完找到最终的result 实现代码func maxSubArray(nums []int) int &#123; length := len(nums) if length == 0 &#123; return 0 &#125; start := 0 end := 0 tmp_sum := 0 result := nums[end] for ; start&lt;length; start++ &#123; tmp_sum = 0 for end=start ; end&lt;length; end++ &#123; tmp_sum += nums[end] if(tmp_sum &gt; result) &#123; result = tmp_sum &#125; &#125; &#125; return result &#125; 解法二：动态规划O(n)解题思路暴力方法里有重复的子问题，数组中 和最大的连续子序列 以start=0开始包含以start=1开始的所有计算，不过多加了一个nums[0] 以start=length-1只有一个元素为最小子问题，以此叠加到start=0 1.问题定义为以start开始的数组 和最大的连续子序列 2.状态转移方程 start之前[start-1..end]的和为负数可以直接舍去 f(start-1) = \\begin{cases} nums[start], & \\text{if $f(start)$ < 0}\\\\ nums[start]+f(start),& \\text{if $f(start)$ >= 0} \\end{cases} \\\\注:start数组下标从最后一位开始到03.用一个O(n)数组保存每次状态转移时的f(start)值 4.最后max(保存数组)即为结果 实现代码func maxSubArray(nums []int) int &#123; length := len(nums) if length == 0 &#123; return 0 &#125; // 初始化状态 start := length-1 sums := make([]int, length) sums[start] = nums[start] // 状态转移 for start = length-2; start &gt;=0; start-- &#123; if sums[start+1] &lt; 0 &#123; sums[start] = nums[start] &#125;else &#123; sums[start] = nums[start] + sums[start+1] &#125; &#125; // 发挥保存数组中的最大值 return max(sums) &#125; func max(arr []int) int&#123; max := -2147483647//int的最小值 for i:= range arr &#123; if(arr[i] &gt; max) &#123; max = arr[i] &#125; &#125; return max &#125; 解法三：线段树解法（更通用，待补坑）总结一开始没想暴力，但是别的双指针什么的试过了想不到更好的方法。 之后思考暴力思路不难，之后对暴力进行优化有重复子问题，进阶为动态规划。 思考：问题是整个数组的连续子序列最大化， 动态规划的问题不是一个小数组的连续子序列最大和，而是以start为结尾的连续子序列最大和 可见哪里是重复操作，可以建立状态转移方程，哪里就是要定义问题 再由保存的结果得出问题的最后结果","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Leetcode-35搜索插入位置","slug":"Leetcode-35搜索插入位置","date":"2020-08-11T12:19:42.000Z","updated":"2022-12-05T05:59:19.681Z","comments":true,"path":"2020/08/11/Leetcode-35搜索插入位置/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/Leetcode-35%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/","excerpt":"","text":"Leetcode-35搜索插入位置 题目描述给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 你可以假设数组中无重复元素。 示例 1: 输入: [1,3,5,6], 5输出: 2示例 2: 输入: [1,3,5,6], 2输出: 1示例 3: 输入: [1,3,5,6], 7输出: 4示例 4: 输入: [1,3,5,6], 0输出: 0 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/search-insert-position著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 解题思路二分法很容易想到，但问题是怎么用，查找目标值是等于target，当low&gt;high还未找到就没有 类推插入位置或匹配位置就是找顺序第一个 &gt;=tartget 元素的位置 二分查找最后一定是left=right+1 如果left左开区间的值一直保持小于target，right右开区间一直保持大于等于target， 这样————right———————left————— [0。。。。right]小于targrt [left….length-1]大于等于target 即使边界时也一样 如果硬用二分查找值 &lt; == &gt; 三个分支匹配可看总结处理起来会很麻烦 实现代码func searchInsert(nums []int, target int) int &#123; length := len(nums) high := length-1 low := 0 for ; low &lt;= high; &#123; mid := (high-low)&gt;&gt;1 + low if(nums[mid] &lt; target) &#123; low = mid+1 &#125;else &#123; high = mid-1 &#125; &#125; return low &#125; 总结这个题感觉跳出了二分查找的套路，用left、right分别表示数组不同两集合比较合适，集合交汇处就是我们要找的值 二分查找时其实也差不多 个人初始代码想到了二分但是没有想到插入位置和target的数学关系，直接用的二分查找的代码，最后把所有的可能全部考虑 代码为 func searchInsert(nums []int, target int) int &#123; length := len(nums) high := length-1 low := 0 for ; low &lt;= high; &#123; mid := (high+low)/2 if(nums[mid] &lt; target) &#123; low = mid+1 &#125;else if(nums[mid] == target) &#123; return mid &#125;else &#123; high = mid-1 &#125; &#125; // if(high == -1) &#123; // return 0 // &#125;else if(low == length) &#123; // return length // &#125;else &#123; // return low // &#125; return low &#125; 反思：问题的起点在于没有get到解决问题的数学关系，死板于二分查找&lt; 、&gt;的判断 对于该类问题 把要查找的目标 和 left、right指针的意义对应起来， left的位置表示其左开区间即【0.。。。right】满足left=mid+1条件 right的位置表示其有开区间【right。。。length-1】满足right=mid-1条件 在边界时left=0，high=-1 时表示所有元素都满足left=mid+1条件 left=length,high=length-1时表示所有元素都满足right=mid-1条件 从算法的数学意义出发，每一个变量可以表示一类事物，掌握了和 数学的联系才能掌握算法，取代一个又一个测试用例的自己检测","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"自己定的计划","slug":"自己定的计划","date":"2020-08-11T12:17:22.000Z","updated":"2022-12-05T05:59:20.483Z","comments":true,"path":"2020/08/11/自己定的计划/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/%E8%87%AA%E5%B7%B1%E5%AE%9A%E7%9A%84%E8%AE%A1%E5%88%92/","excerpt":"","text":"自己定的计划 时间2020.8.8 ~ 2021.5.30 目标一：leetcode 150道题 整理并总结，计划按分类啥刷题 一个月25到题 按计划可以完成任务 附加：使用go、C++交叉编写 争取可以对基本的语法做到熟练 目标二：把Effective ++一书看完 目标三：看完一本和写小说技巧有关的书，可以写出几个短篇的小故事 目标四：英文、汉字的书写 目标五：可以喜欢上一个人，多参加活动、人际交往 长久相处靠品质，快速建立关系靠套路 让自己对新鲜的事情感兴趣，找一些途径吧：综艺、外出等等 目标六：如果喜欢上一个人，自己该如何获得关注，建立好感呢 多说话？学习如何表达喜欢，和让自己被喜欢 目标七：北京一些知名的景点，一个月去一个地方 目标八：每个周末总结自己计划，每个月规划自己","categories":[{"name":"期望","slug":"期望","permalink":"http://linxuesong.github.io/categories/%E6%9C%9F%E6%9C%9B/"}],"tags":[{"name":"小目标","slug":"小目标","permalink":"http://linxuesong.github.io/tags/%E5%B0%8F%E7%9B%AE%E6%A0%87/"}],"author":"linxuesong"},{"title":"Leetcode-28. 实现 strStr()","slug":"Leetcode-28-实现-strStr","date":"2020-08-11T12:16:50.000Z","updated":"2022-12-05T05:59:19.666Z","comments":true,"path":"2020/08/11/Leetcode-28-实现-strStr/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/Leetcode-28-%E5%AE%9E%E7%8E%B0-strStr/","excerpt":"","text":"Leetcode-28. 实现 strStr()题目描述实现 strStr() 函数。 给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。 示例 1: 输入: haystack = “hello”, needle = “ll”输出: 2示例 2: 输入: haystack = “aaaaa”, needle = “bba”输出: -1说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/implement-strstr著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 思路遍历每一个haystack的字符，以此为起点和needle匹配，匹配成功，则返回遍历下标；否则返回-1 实现代码func strStr(haystack string, needle string) int &#123; hay_len := len(haystack) ne_len := len(needle) for i:=0; i &lt; hay_len-ne_len+1; i++ &#123; //判断haystack[i]开头是否和needle匹配 if(isStrEqual(haystack[i:], needle))&#123; return i &#125; &#125; return -1 &#125; func isStrEqual(str1 string, str2 string) bool &#123; length := len(str2) flag := true for j:=0; j&lt;length ;j++ &#123; if(str1[j] != str2[j]) &#123; flag = false break &#125; &#125; return flag &#125; 总结书写代码在一开始的时候没有注意到haystack的遍历区间是 len(haystack) - len(needle)+1，遍历到尾部是没必要且麻烦的 避免这种情况就是当我有了基本思路后，是会有好多漏洞的，实现方法要想一次最优且简洁就要把所有的测试用例列出来，不要光用脑子想，要写在纸上 然后把脑子里的思路转成代码，和用例一一对应 进一步的优化（未完待补坑）上面代码的时间复杂度为O((N-L)*L) 优化方案一：hash省去L长度是否匹配判断之所以复杂是因为遍历每一字符都要比较L长度判断是否匹配 这个*L可以转化为O(1) 方法就是用hash值，我们对字符进行编码，生成唯一值 这样每次判断匹配时就转化为计算hash值了 优化方案二：KMP字典匹配方法不用遍历源字符串每个字符了，节省时间这个查了资料比较复杂，等以后有时间不用，挖个坑QAQ","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Leetcode-27移除元素","slug":"Leetcode-27移除元素","date":"2020-08-11T12:16:49.000Z","updated":"2022-12-05T05:59:19.650Z","comments":true,"path":"2020/08/11/Leetcode-27移除元素/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/Leetcode-27%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","excerpt":"","text":"Leetcode-27移除元素 题目描述给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。 注意这五个元素可为任意顺序。 你不需要考虑数组中超出新长度后面的元素。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/remove-element著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 解题思路双指针法：先找到非target元素，放入到开始位置newLen，newLen++等待存放 下一个非target元素 代码实现func removeElement(nums []int, val int) int &#123; length := len(nums) newLen := 0 for i := 0; i &lt; length; i++ &#123; if(nums[i] != val) &#123; nums[newLen] = nums[i] &#125; &#125; return length &#125; 反思自己做这道题的想法是类似快速排序，左边找target 右边找非target，然后交换，最后直到相遇 代码如下： func removeElement(nums []int, val int) int &#123; length := len(nums) var s = 0 var e = length - 1 for ; s &lt;= e; &#123; for ; s&lt;=e &amp;&amp; nums[e] == val; e--&#123; length-- &#125; for ; s&lt;=e&amp;&amp;nums[s] != val ; s++&#123; &#125; if(s &lt; e) &#123; var tmp = nums[e] nums[e] = nums[s] nums[s] = tmp &#125; &#125; return length &#125; 但在写代码的过程中在s、e的比较上花了很长时间，常常遇到很多逻辑上的错误，下面是一次次试错后未简化的代码： func removeElement(nums []int, val int) int &#123; length := len(nums) var s = 0 var e = length - 1 if(length == 0)&#123; return 0 &#125; for ; s &lt; e; &#123; for ; nums[e] == val &amp;&amp; s&lt;e; e--&#123; length-- &#125; for ; nums[s] != val &amp;&amp; s&lt;e; s++&#123; &#125; if(s!=e) &#123; var tmp = nums[e] nums[e] = nums[s] nums[s] = tmp &#125; &#125; if(nums[s] == val) &#123; length-- &#125; return length &#125; 对比可以看出逻辑很混乱，之所以出现这样的情况是因为没有很好的模板思路去解题，有了大致思路不准备细节就开始写，最后以致写出低质量代码。 总结1.双指针法 一个指针用来存放最后的结果，另一个用来寻找要操作的元素下标，O(n)时间解决问题 2.双向指针循环的结束条件可以是 s&lt;e也可以是s&lt;=e 但是s&lt;=e要写在前面如 s&lt;=e &amp;&amp; nums[e] == val，否则数组越界 s&lt;e适合终止位置要存放特定元素 s&lt;=e适合从头找到尾，处理所有元素而非单一元素","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Hexo-Sakura如何写新博客","slug":"Hexo-Sakura如何写新博客","date":"2020-08-11T12:15:41.000Z","updated":"2022-12-05T05:59:19.385Z","comments":true,"path":"2020/08/11/Hexo-Sakura如何写新博客/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/Hexo-Sakura%E5%A6%82%E4%BD%95%E5%86%99%E6%96%B0%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"Hexo-Sakura如何写新博客1.创建文章$ hexo new [layout] &lt;title&gt; //例 $ hexo new page &quot;我的页面&quot; //布局有三种：post（文章）、draft（草稿）、page（页面） 2.编辑文章样式在博客根目录/source/_posts下找到生成的博客文件 根据自己的需要修改，一般添加photo的url tag keywords categories 即可，其他可在布局文件中默认设置，自定义布局过程程如下 在博客根目录/scaffolds/下有三个布局的文件 我们根据自己的需求更改 3.编辑文本内容使用markdown格式编写内容，期间涉及代码块样式、插入图片等技巧可查看本站其他文章","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"name":"Sakura","slug":"Sakura","permalink":"http://linxuesong.github.io/tags/Sakura/"}],"author":"linxuesong"},{"title":"LeetCode-26删除数组中重复项","slug":"LeetCode-26删除数组中重复项","date":"2020-08-11T12:14:04.000Z","updated":"2022-12-05T05:59:19.588Z","comments":true,"path":"2020/08/11/LeetCode-26删除数组中重复项/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/LeetCode-26%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E9%A1%B9/","excerpt":"","text":"题目描述给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 示例 1: 给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。示例 2: 给定 nums = [0,0,1,1,1,2,2,3,3,4], 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。 你不需要考虑数组中超出新长度后面的元素。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 解题思路双指针法：存放非重复元素的指针(0开始) 寻找下一个非重复元素的指针(1开始) 寻找指针：遍历数组找到 下一个不重复元素(和已存放的元素不相等)，找到后存入非重复指针 代码实现func removeDuplicates(nums []int) int &#123; if(len(nums) == 1) &#123; return 1 &#125; //bef最大不重复项 cur当前遍历元素 bef := 0 for cur := 1; cur &lt; len(nums); cur++ &#123; if(nums[bef] != nums[cur]) &#123; bef++ nums[bef] = nums[cur] &#125; &#125; return bef+1 &#125; 总结一开始的思路是相邻元素两两比较，不同则后续元素前移一位，数组长度减1 ，时间复杂度为O(n方)。 缺点就是每次不同移动n个元素，双指针法就是一指针存放，一指针寻找，只移动一个元素，更快","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Leetcode-118. 杨辉三角","slug":"Leetcode-118. 杨辉三角","date":"2020-08-11T12:14:04.000Z","updated":"2022-12-05T05:59:19.635Z","comments":true,"path":"2020/08/11/Leetcode-118. 杨辉三角/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/Leetcode-118.%20%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/","excerpt":"","text":"Leetcode-118. 杨辉三角1.0题目描述给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。 在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 5 输出: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ] 2.0解题思路和题目描述那个图的过程一样，比较简单 3.0代码func generate(numRows int) [][]int &#123; if(numRows &lt;= 0) &#123; return nil &#125; first := []int&#123;1&#125; result := make([][]int, numRows) for i:=0; i&lt;numRows; i++ &#123; result[i] = make([]int, i+1) &#125; result[0] = first for i:=1; i&lt;numRows; i++ &#123; next := make([]int, i+1) next[0], next[i] = 1, 1 for j :=1; j&lt;i; j++ &#123; next[j] = result[i-1][j-1] + result[i-1][j] &#125; result[i] = next &#125; return result &#125; 4.0总结1.第一版代码的问题，变量起名比较乱，建议修改优化一下2.多维切片的创建，和初始化 如果不make无疑是nil①make([][]int, x)②for arr := range arrs arr:= make([]int, y)","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"}],"author":"linxuesong"},{"title":"Hexo-Sakura如何博客迁移到不同电脑","slug":"Hexo-Sakura如何博客迁移到不同电脑","date":"2020-08-11T12:10:14.000Z","updated":"2022-12-05T05:59:19.400Z","comments":true,"path":"2020/08/11/Hexo-Sakura如何博客迁移到不同电脑/","link":"","permalink":"http://linxuesong.github.io/2020/08/11/Hexo-Sakura%E5%A6%82%E4%BD%95%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E4%B8%8D%E5%90%8C%E7%94%B5%E8%84%91/","excerpt":"","text":"Hexo-Sakura博客迁移前期准备1.将所有的博客项目文件(可以在执行hexo clean 后，这样文件少一点)上传到GitHub的仓库 这里是上传到linxuesong / linxuesong.github.io的hexo分支 下面开始迁移： 步骤一：本地初始化hexo博客环境详见hexo搭建个人博客教程 要求：hexo s后可以本地看到默认页面 步骤二：用我们上传的博客项目文件替换初始化的默认文件1.下载上传的所有博客项目文件 2.替换默认文件 步骤三：启用需插件功能下载不同功能所需对应的hexo插件 1.本地搜索功能 npm install hexo-generator-json-content --save 2.启用自定义代码块背景 npm i -S hexo-prism-plugin 如何选用hexo-prism-plugin的代码块样式主题，可以本站搜索 3.添加RSS订阅的网站 https://blog.csdn.net/cungudafa/article/details/104320396 4.添加豆瓣hexo-douban插件生成书单、电影等页面 npm install hexo-douban --save 然后在博客站点目录下的node_modules文件夹下找到hexo-douban/lib，文件夹下有三个js文件，分别为：books-generator.js 、games-generator.js 、movies-generator.js，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容： /* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/ layout: [`douban`] 5.添加sitemap站点地图生成插件 用于谷歌、百度收录本网站 npm install hexo-generator-sitemap --save 6.添加哔哩哔哩追番页在hexo generate或hexo deploy之前使用hexo bangumi -u命令更新追番数据，使用hexo cinema -u命令更新追剧数据！删除数据命令:hexo bangumi -d/hexo cinema -d npm install hexo-bilibili-bangumi --save6.添加哔哩哔哩追番页 7.安装文章样式插件参考：https://akilar.top/posts/615e2dec/ npm install hexo-butterfly-tag-plugins-plus --save // 更换渲染工具 npm uninstall hexo-renderer-marked --save npm install hexo-renderer-kramed --save","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"name":"Sakura","slug":"Sakura","permalink":"http://linxuesong.github.io/tags/Sakura/"}],"author":"linxuesong"},{"title":"Hexo博客md文件插入图片（以Typora编辑器为例）","slug":"Hexo博客md文件插入图片（以Typora编辑器为例）","date":"2020-07-28T06:13:54.000Z","updated":"2022-12-05T05:59:19.478Z","comments":true,"path":"2020/07/28/Hexo博客md文件插入图片（以Typora编辑器为例）/","link":"","permalink":"http://linxuesong.github.io/2020/07/28/Hexo%E5%8D%9A%E5%AE%A2md%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%EF%BC%88%E4%BB%A5Typora%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BA%E4%BE%8B%EF%BC%89/","excerpt":"","text":"Typora插入Base64图片在Typora中插入图片常用的处理方法是： 将本地的图片地址传入将网络上的图片地址传入这两种方式都存在一个问题：链接不可用时，图片就展示不出来了！ 解决方法方法一首先将图片通过在线转码工具转换成base64的编码，并用以下格式嵌入即可，格式如下： ![image] (base64)但是由于这base64编码往往都很长，很占篇幅，因此我们可以给图片编号，并将所有的图片base64编码放在文档的最后即可，格式如下：在插入图片的地方使用：![image] [图片编号]在文档最后使用：[图片编号]:base64编码这样即可完成图片的永久插入！ ————————————————版权声明：本文为CSDN博主「听雨眠_sun」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/baidu_31492511/java/article/details/90704123 方法二图片素材按官方教程说法，可统一放置在source/images目录中，并以 ![](/images/image.jpg) 方式引用 或者在 _config.yml 打开 post_asset_folder 功能，将当前文章所用的图片放置到source目录下的文章同名资源目录下，以 ![](image.jpg) 方式引用 ———————————————— 作者：Wavky链接：https://www.jianshu.com/p/925fa86ccc95来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"hojun"},{"title":"Hexo-Sakura添加本站搜索功能","slug":"Hexo-Sakura添加本站搜索功能","date":"2020-07-28T06:12:50.000Z","updated":"2022-12-05T05:59:19.447Z","comments":true,"path":"2020/07/28/Hexo-Sakura添加本站搜索功能/","link":"","permalink":"http://linxuesong.github.io/2020/07/28/Hexo-Sakura%E6%B7%BB%E5%8A%A0%E6%9C%AC%E7%AB%99%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","excerpt":"","text":"hexo-sakura添加本站搜索功能效果图如下： 构建步骤 1.安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令： npm install hexo-generator-searchdb --save 2.全局配置文件_config.yml，新增如下内容： search: path: search.xml field: post format: html limit: 10000 3.hexo主题配置文件（\\themes\\next_config.yml），修改local_search的enable为true： # Local search # Dependencies: https://github.com/flashlab/hexo-generator-search local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hojun"},{"title":"Hexo-Sakura主题优化：jsDelivr + Github 搭建免费CDN（生成自己资源的url）","slug":"Hexo-Sakura主题优化：jsDelivr-Github-搭建免费CDN（生成自己资源的url）","date":"2020-07-28T06:11:26.000Z","updated":"2022-12-05T05:59:19.353Z","comments":true,"path":"2020/07/28/Hexo-Sakura主题优化：jsDelivr-Github-搭建免费CDN（生成自己资源的url）/","link":"","permalink":"http://linxuesong.github.io/2020/07/28/Hexo-Sakura%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%EF%BC%9AjsDelivr-Github-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9CDN%EF%BC%88%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E8%B5%84%E6%BA%90%E7%9A%84url%EF%BC%89/","excerpt":"","text":"主题优化：jsDelivr + Github 搭建免费CDN（生成自己资源的url） 使用效果： 以一个仓库存放我们网络资源文件，在写网页或者修改配置时可以使用我们自己的网上资源 如：https://cdn.jsdelivr.net/gh/linxuesong/cdn 创建方法 1.创建github存储库，记得要选public 2.发布仓库 发布成功后 3. 通过 jsDelivr 引用资源格式：https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径例如：https://cdn.jsdelivr.net/gh/heruo/CDN@1.1/blog_medias/avatar.png在文件夹末尾以/结束，可以显示资源目录例如：https://cdn.jsdelivr.net/gh/heruo/CDN@1.1/blog_medias/reward/","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":"hojun"},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2022-12-05T05:59:19.463Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"http://linxuesong.github.io/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: &#123; path: /, fa: fa-fort-awesome faa-shake &#125; 归档: &#123; path: /archives, fa: fa-archive faa-shake, submenus: &#123; 技术: &#123;path: /categories/技术/, fa: fa-code &#125;, 生活: &#123;path: /categories/生活/, fa: fa-file-text-o &#125;, 资源: &#123;path: /categories/资源/, fa: fa-cloud-download &#125;, 随想: &#123;path: /categories/随想/, fa: fa-commenting-o &#125;, 转载: &#123;path: /categories/转载/, fa: fa-book &#125; &#125; &#125; 清单: &#123; path: javascript:;, fa: fa-list-ul faa-vertical, submenus: &#123; 书单: &#123;path: /tags/悦读/, fa: fa-th-list faa-bounce &#125;, 番组: &#123;path: /bangumi/, fa: fa-film faa-vertical &#125;, 歌单: &#123;path: /music/, fa: fa-headphones &#125;, 图集: &#123;path: /tags/图集/, fa: fa-photo &#125; &#125; &#125; 留言板: &#123; path: /comment/, fa: fa-pencil-square-o faa-tada &#125; 友人帐: &#123; path: /links/, fa: fa-link faa-shake &#125; 赞赏: &#123; path: /donate/, fa: fa-heart faa-pulse &#125; 关于: &#123; path: /, fa: fa-leaf faa-wrench , submenus: &#123; 我？: &#123;path: /about/, fa: fa-meetup&#125;, 主题: &#123;path: /theme-sakura/, fa: iconfont icon-sakura &#125;, Lab: &#123;path: /lab/, fa: fa-cogs &#125;, &#125; &#125; 客户端: &#123; path: /client/, fa: fa-android faa-vertical &#125; RSS: &#123; path: /atom.xml, fa: fa-rss faa-pulse &#125; # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - &#123;url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png&#125; - &#123;url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg&#125; - &#123;url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg&#125; # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: &#123;url: http://github.com/honjun, img: /img/social/github.png&#125; sina: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png&#125; wangyiyun: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png&#125; zhihu: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png&#125; email: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg&#125; wechat: &#123;url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png&#125; # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: &#123;url: http://github.com/honjun, fa: fa-github, color: 333&#125; weibo: &#123;url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39&#125; qq: &#123;url: https://wpa.qq.com/msgrd?v=3&uin=954655431&site=qq&menu=yes, fa: fa-qq, color: 25c6fe&#125; # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 < (￣︶￣)> items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： &#123;% bili video_id [page] %&#125; 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： &#123;% fb_img src [caption] %&#125; 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"web","slug":"web","permalink":"http://linxuesong.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"http://linxuesong.github.io/tags/%E6%82%A6%E8%AF%BB/"}],"author":"hojun"}],"categories":[{"name":"技术","slug":"技术","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"主题","slug":"技术/主题","permalink":"http://linxuesong.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%B8%BB%E9%A2%98/"},{"name":"主题","slug":"主题","permalink":"http://linxuesong.github.io/categories/%E4%B8%BB%E9%A2%98/"},{"name":"转载","slug":"转载","permalink":"http://linxuesong.github.io/categories/%E8%BD%AC%E8%BD%BD/"},{"name":"资源","slug":"资源","permalink":"http://linxuesong.github.io/categories/%E8%B5%84%E6%BA%90/"},{"name":"生活","slug":"生活","permalink":"http://linxuesong.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"期望","slug":"期望","permalink":"http://linxuesong.github.io/categories/%E6%9C%9F%E6%9C%9B/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://linxuesong.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://linxuesong.github.io/tags/LeetCode/"},{"name":"简单","slug":"简单","permalink":"http://linxuesong.github.io/tags/%E7%AE%80%E5%8D%95/"},{"name":"golang","slug":"golang","permalink":"http://linxuesong.github.io/tags/golang/"},{"name":"hexo","slug":"hexo","permalink":"http://linxuesong.github.io/tags/hexo/"},{"name":"Golang","slug":"Golang","permalink":"http://linxuesong.github.io/tags/Golang/"},{"name":"主题美化","slug":"主题美化","permalink":"http://linxuesong.github.io/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"name":"protobuf","slug":"protobuf","permalink":"http://linxuesong.github.io/tags/protobuf/"},{"name":"go","slug":"go","permalink":"http://linxuesong.github.io/tags/go/"},{"name":"资料整理","slug":"资料整理","permalink":"http://linxuesong.github.io/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"},{"name":"linux","slug":"linux","permalink":"http://linxuesong.github.io/tags/linux/"},{"name":"博客归类","slug":"博客归类","permalink":"http://linxuesong.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%BD%92%E7%B1%BB/"},{"name":"异常","slug":"异常","permalink":"http://linxuesong.github.io/tags/%E5%BC%82%E5%B8%B8/"},{"name":"java","slug":"java","permalink":"http://linxuesong.github.io/tags/java/"},{"name":"JAVA","slug":"JAVA","permalink":"http://linxuesong.github.io/tags/JAVA/"},{"name":"String","slug":"String","permalink":"http://linxuesong.github.io/tags/String/"},{"name":"Reids","slug":"Reids","permalink":"http://linxuesong.github.io/tags/Reids/"},{"name":"Go","slug":"Go","permalink":"http://linxuesong.github.io/tags/Go/"},{"name":"包管理工具","slug":"包管理工具","permalink":"http://linxuesong.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"},{"name":"mac软件","slug":"mac软件","permalink":"http://linxuesong.github.io/tags/mac%E8%BD%AF%E4%BB%B6/"},{"name":"软件安装","slug":"软件安装","permalink":"http://linxuesong.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"sakura","slug":"sakura","permalink":"http://linxuesong.github.io/tags/sakura/"},{"name":"nginx","slug":"nginx","permalink":"http://linxuesong.github.io/tags/nginx/"},{"name":"算法","slug":"算法","permalink":"http://linxuesong.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"MarkDown","slug":"MarkDown","permalink":"http://linxuesong.github.io/tags/MarkDown/"},{"name":"文件读取","slug":"文件读取","permalink":"http://linxuesong.github.io/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"},{"name":"C++","slug":"C","permalink":"http://linxuesong.github.io/tags/C/"},{"name":"多线程","slug":"多线程","permalink":"http://linxuesong.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"黑科技","slug":"黑科技","permalink":"http://linxuesong.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"},{"name":"感悟","slug":"感悟","permalink":"http://linxuesong.github.io/tags/%E6%84%9F%E6%82%9F/"},{"name":"Sakura","slug":"Sakura","permalink":"http://linxuesong.github.io/tags/Sakura/"},{"name":"小目标","slug":"小目标","permalink":"http://linxuesong.github.io/tags/%E5%B0%8F%E7%9B%AE%E6%A0%87/"},{"name":"web","slug":"web","permalink":"http://linxuesong.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"http://linxuesong.github.io/tags/%E6%82%A6%E8%AF%BB/"}]}